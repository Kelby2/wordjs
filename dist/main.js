/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@firebase/app/dist/index.cjs.js":
/*!******************************************************!*\
  !*** ./node_modules/@firebase/app/dist/index.cjs.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar util = __webpack_require__(/*! @firebase/util */ \"./node_modules/@firebase/util/dist/index.cjs.js\");\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n// An array to capture listeners before the true auth functions\r\n// exist\r\nvar tokenListeners = [];\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\r\nvar FirebaseAppImpl = /** @class */ (function () {\r\n    function FirebaseAppImpl(options, config, firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.isDeleted_ = false;\r\n        this.services_ = {};\r\n        this.name_ = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled || false;\r\n        this.options_ = util.deepCopy(options);\r\n        this.INTERNAL = {\r\n            getUid: function () { return null; },\r\n            getToken: function () { return Promise.resolve(null); },\r\n            addAuthTokenListener: function (callback) {\r\n                tokenListeners.push(callback);\r\n                // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                setTimeout(function () { return callback(null); }, 0);\r\n            },\r\n            removeAuthTokenListener: function (callback) {\r\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this._automaticDataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            this.checkDestroyed_();\r\n            this._automaticDataCollectionEnabled = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.options_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FirebaseAppImpl.prototype.delete = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.checkDestroyed_();\r\n            resolve();\r\n        })\r\n            .then(function () {\r\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n            var services = [];\r\n            Object.keys(_this.services_).forEach(function (serviceKey) {\r\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\r\n                    services.push(_this.services_[serviceKey][instanceKey]);\r\n                });\r\n            });\r\n            return Promise.all(services.map(function (service) {\r\n                return service.INTERNAL.delete();\r\n            }));\r\n        })\r\n            .then(function () {\r\n            _this.isDeleted_ = true;\r\n            _this.services_ = {};\r\n        });\r\n    };\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage is the only one that is leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n        this.checkDestroyed_();\r\n        if (!this.services_[name]) {\r\n            this.services_[name] = {};\r\n        }\r\n        if (!this.services_[name][instanceIdentifier]) {\r\n            /**\r\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n             * then we will pass that instance on, otherwise we pass `null`\r\n             */\r\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                ? instanceIdentifier\r\n                : undefined;\r\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n            this.services_[name][instanceIdentifier] = service;\r\n        }\r\n        return this.services_[name][instanceIdentifier];\r\n    };\r\n    /**\r\n     * Callback function used to extend an App instance at the time\r\n     * of service instance creation.\r\n     */\r\n    FirebaseAppImpl.prototype.extendApp = function (props) {\r\n        var _this = this;\r\n        // Copy the object onto the FirebaseAppImpl prototype\r\n        util.deepExtend(this, props);\r\n        /**\r\n         * If the app has overwritten the addAuthTokenListener stub, forward\r\n         * the active token listeners on to the true fxn.\r\n         *\r\n         * TODO: This function is required due to our current module\r\n         * structure. Once we are able to rely strictly upon a single module\r\n         * implementation, this code should be refactored and Auth should\r\n         * provide these stubs and the upgrade logic\r\n         */\r\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\r\n            tokenListeners.forEach(function (listener) {\r\n                _this.INTERNAL.addAuthTokenListener(listener);\r\n            });\r\n            tokenListeners = [];\r\n        }\r\n    };\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n        if (this.isDeleted_) {\r\n            error('app-deleted', { name: this.name_ });\r\n        }\r\n    };\r\n    return FirebaseAppImpl;\r\n}());\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n    FirebaseAppImpl.prototype.delete ||\r\n    console.log('dc');\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    var apps_ = {};\r\n    var factories = {};\r\n    var appHooks = {};\r\n    // A namespace is a plain JavaScript Object.\r\n    var namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        __esModule: true,\r\n        initializeApp: initializeApp,\r\n        app: app,\r\n        apps: null,\r\n        Promise: Promise,\r\n        SDK_VERSION: '5.0.4',\r\n        INTERNAL: {\r\n            registerService: registerService,\r\n            createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: util.createSubscribe,\r\n            ErrorFactory: util.ErrorFactory,\r\n            removeApp: removeApp,\r\n            factories: factories,\r\n            useAsService: useAsService,\r\n            Promise: Promise,\r\n            deepExtend: util.deepExtend\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    util.patchProperty(namespace, 'default', namespace);\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        var app = apps_[name];\r\n        callAppHooks(app, 'delete');\r\n        delete apps_[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps_, name)) {\r\n            error('no-app', { name: name });\r\n        }\r\n        return apps_[name];\r\n    }\r\n    util.patchProperty(app, 'App', FirebaseAppImpl);\r\n    function initializeApp(options, rawConfig) {\r\n        if (rawConfig === void 0) { rawConfig = {}; }\r\n        if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n            var name_1 = rawConfig;\r\n            rawConfig = { name: name_1 };\r\n        }\r\n        var config = rawConfig;\r\n        if (config.name === undefined) {\r\n            config.name = DEFAULT_ENTRY_NAME;\r\n        }\r\n        var name = config.name;\r\n        if (typeof name !== 'string' || !name) {\r\n            error('bad-app-name', { name: name + '' });\r\n        }\r\n        if (contains(apps_, name)) {\r\n            error('duplicate-app', { name: name });\r\n        }\r\n        var app = new FirebaseAppImpl(options, config, namespace);\r\n        apps_[name] = app;\r\n        callAppHooks(app, 'create');\r\n        return app;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\r\n    }\r\n    /*\r\n     * Register a Firebase Service.\r\n     *\r\n     * firebase.INTERNAL.registerService()\r\n     *\r\n     * TODO: Implement serviceProperties.\r\n     */\r\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n        // Cannot re-register a service that already exists\r\n        if (factories[name]) {\r\n            error('duplicate-service', { name: name });\r\n        }\r\n        // Capture the service factory for later service instantiation\r\n        factories[name] = createService;\r\n        // Capture the appHook, if passed\r\n        if (appHook) {\r\n            appHooks[name] = appHook;\r\n            // Run the **new** app hook on all existing apps\r\n            getApps().forEach(function (app) {\r\n                appHook('create', app);\r\n            });\r\n        }\r\n        // The Service namespace is an accessor function ...\r\n        var serviceNamespace = function (appArg) {\r\n            if (appArg === void 0) { appArg = app(); }\r\n            if (typeof appArg[name] !== 'function') {\r\n                // Invalid argument.\r\n                // This happens in the following case: firebase.storage('gs:/')\r\n                error('invalid-app-argument', { name: name });\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp.\r\n            return appArg[name]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            util.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the serviceNamespace onto the firebase namespace\r\n        namespace[name] = serviceNamespace;\r\n        // Patch the FirebaseAppImpl prototype\r\n        FirebaseAppImpl.prototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var serviceFxn = this._getService.bind(this, name);\r\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n        };\r\n        return serviceNamespace;\r\n    }\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        util.deepExtend(namespace, props);\r\n    }\r\n    function callAppHooks(app, eventName) {\r\n        Object.keys(factories).forEach(function (serviceName) {\r\n            // Ignore virtual services\r\n            var factoryName = useAsService(app, serviceName);\r\n            if (factoryName === null) {\r\n                return;\r\n            }\r\n            if (appHooks[factoryName]) {\r\n                appHooks[factoryName](eventName, app);\r\n            }\r\n        });\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        var useService = name;\r\n        var options = app.options;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\r\nfunction error(code, args) {\r\n    throw appErrors.create(code, args);\r\n}\r\n// TypeScript does not support non-string indexes!\r\n// let errors: {[code: AppError: string} = {\r\nvar errors = {\r\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    'bad-app-name': \"Illegal App name: '{$name}\",\r\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\r\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\r\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\r\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\r\n        'account is only allowed in a Node.js environment. On client ' +\r\n        'devices, you should instead initialize the SDK with an api key and ' +\r\n        'auth domain',\r\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nvar appErrors = new util.ErrorFactory('app', 'Firebase', errors);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar firebase = createFirebaseNamespace();\n\nexports.firebase = firebase;\nexports.default = firebase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/app/dist/index.cjs.js\n");

/***/ }),

/***/ "./node_modules/@firebase/database/dist/index.cjs.js":
/*!***********************************************************!*\
  !*** ./node_modules/@firebase/database/dist/index.cjs.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar util = __webpack_require__(/*! @firebase/util */ \"./node_modules/@firebase/util/dist/index.cjs.js\");\nvar logger = __webpack_require__(/*! @firebase/logger */ \"./node_modules/@firebase/logger/dist/index.esm.js\");\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar firebase = _interopDefault(__webpack_require__(/*! @firebase/app */ \"./node_modules/@firebase/app/dist/index.cjs.js\"));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger$1 = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger.LogLevel.VERBOSE;\r\n        logger$1 = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger$1 = logger_;\r\n    }\r\n    else {\r\n        logger$1 = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger$1) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger$1(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error$$1);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                else {\r\n                    // There's nothing below us, so nothing we need to start listening on\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        else {\r\n            // No-op, this listener must've been already removed\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error$$1 = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error$$1);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error$$1) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error$$1);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger$1) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                this.log_(error$$1);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                _this.log_(error$$1);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error$$1) {\r\n                self_1.log_('Failed to get token: ' + error$$1);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error$$1);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParamaters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParamaters, function (error$$1, result) {\r\n            var data = result;\r\n            if (error$$1 === 404) {\r\n                data = null;\r\n                error$$1 = null;\r\n            }\r\n            if (error$$1 === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error$$1) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error$$1 == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error$$1;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error$$1 = new Error(message);\r\n                    error$$1.code = code;\r\n                    callback(error$$1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error$$1, committed, snapshot) {\r\n            if (error$$1) {\r\n                deferred.reject(error$$1);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error$$1, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/database/dist/index.cjs.js\n");

/***/ }),

/***/ "./node_modules/@firebase/logger/dist/index.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@firebase/logger/dist/index.esm.js ***!
  \*********************************************************/
/*! exports provided: setLogLevel, Logger, LogLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setLogLevel\", function() { return setLogLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Logger\", function() { return Logger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LogLevel\", function() { return LogLevel; });\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/logger/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/@firebase/polyfill/dist/index.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@firebase/polyfill/dist/index.esm.js ***!
  \***********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(setImmediate, global) {/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\");\n/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(whatwg_fetch__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  this._state = 0;\n  this._handled = false;\n  this._value = undefined;\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = function(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n};\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!globalNS.Promise) {\n  globalNS.Promise = Promise;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = { version: '2.5.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n});\nvar _core_1 = _core.version;\n\nvar _isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function (it) {\n  if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar document = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = _isObject(document) && _isObject(document.createElement);\nvar _domCreate = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function (it, S) {\n  if (!_isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if (_ie8DomDefine) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar _hide = _descriptors ? function (object, key, value) {\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar _redefine = createCommonjsModule(function (module) {\nvar SRC = _uid('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n_core.inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === _global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    _hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    _hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n});\n\nvar _aFunction = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function (fn, that, length) {\n  _aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // extend global\n    if (target) _redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) _hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\n_global.core = _core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nvar _export = $export;\n\nvar toString = {}.toString;\n\nvar _cof = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function (it) {\n  return Object(_defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\n\nvar min = Math.min;\nvar _toLength = function (it) {\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n// 7.2.2 IsArray(argument)\n\nvar _isArray = Array.isArray || function isArray(arg) {\n  return _cof(arg) == 'Array';\n};\n\nvar SHARED = '__core-js_shared__';\nvar store = _global[SHARED] || (_global[SHARED] = {});\nvar _shared = function (key) {\n  return store[key] || (store[key] = {});\n};\n\nvar _wks = createCommonjsModule(function (module) {\nvar store = _shared('wks');\n\nvar Symbol = _global.Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\nvar SPECIES = _wks('species');\n\nvar _arraySpeciesConstructor = function (original) {\n  var C;\n  if (_isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;\n    if (_isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\n\n\nvar _arraySpeciesCreate = function (original, length) {\n  return new (_arraySpeciesConstructor(original))(length);\n};\n\n// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\n\n\n\n\n\nvar _arrayMethods = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || _arraySpeciesCreate;\n  return function ($this, callbackfn, that) {\n    var O = _toObject($this);\n    var self = _iobject(O);\n    var f = _ctx(callbackfn, that, 3);\n    var length = _toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = _wks('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});\nvar _addToUnscopables = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n\nvar $find = _arrayMethods(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n_export(_export.P + _export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY);\n\nvar find = _core.Array.find;\n\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n\nvar $find$1 = _arrayMethods(6);\nvar KEY$1 = 'findIndex';\nvar forced$1 = true;\n// Shouldn't skip holes\nif (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });\n_export(_export.P + _export.F * forced$1, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY$1);\n\nvar findIndex = _core.Array.findIndex;\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\nvar _toIobject = function (it) {\n  return _iobject(_defined(it));\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function (index, length) {\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\n\n\nvar _arrayIncludes = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = _toIobject($this);\n    var length = _toLength(O.length);\n    var index = _toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar shared = _shared('keys');\n\nvar _sharedKey = function (key) {\n  return shared[key] || (shared[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function (object, names) {\n  var O = _toIobject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (_has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar f$1 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$1\n};\n\nvar f$2 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$2\n};\n\n// 19.1.2.1 Object.assign(target, source, ...)\n\n\n\n\n\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = _toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = _objectGops.f;\n  var isEnum = _objectPie.f;\n  while (aLen > index) {\n    var S = _iobject(arguments[index++]);\n    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', { assign: _objectAssign });\n\nvar assign = _core.Object.assign;\n\n// 7.2.8 IsRegExp(argument)\n\n\nvar MATCH = _wks('match');\nvar _isRegexp = function (it) {\n  var isRegExp;\n  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\n};\n\n// helper for String#{startsWith, endsWith, includes}\n\n\n\nvar _stringContext = function (that, searchString, NAME) {\n  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(_defined(that));\n};\n\nvar MATCH$1 = _wks('match');\nvar _failsIsRegexp = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH$1] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = _stringContext(this, searchString, STARTS_WITH);\n    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\nvar startsWith = _core.String.startsWith;\n\nvar _stringRepeat = function repeat(count) {\n  var str = String(_defined(this));\n  var res = '';\n  var n = _toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n\n_export(_export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: _stringRepeat\n});\n\nvar repeat = _core.String.repeat;\n\nvar _meta = createCommonjsModule(function (module) {\nvar META = _uid('meta');\n\n\nvar setDesc = _objectDp.f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !_fails(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n});\nvar _meta_1 = _meta.KEY;\nvar _meta_2 = _meta.NEED;\nvar _meta_3 = _meta.fastKey;\nvar _meta_4 = _meta.getWeak;\nvar _meta_5 = _meta.onFreeze;\n\nvar def = _objectDp.f;\n\nvar TAG = _wks('toStringTag');\n\nvar _setToStringTag = function (it, tag, stat) {\n  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\nvar f$3 = _wks;\n\nvar _wksExt = {\n\tf: f$3\n};\n\nvar _library = false;\n\nvar defineProperty = _objectDp.f;\nvar _wksDefine = function (name) {\n  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: _wksExt.f(name) });\n};\n\n// all enumerable object keys, includes symbols\n\n\n\nvar _enumKeys = function (it) {\n  var result = _objectKeys(it);\n  var getSymbols = _objectGops.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = _objectPie.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  _anObject(O);\n  var keys = _objectKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\nvar document$1 = _global.document;\nvar _html = document$1 && document$1.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\n\nvar IE_PROTO$1 = _sharedKey('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE$1 = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe');\n  var i = _enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];\n  return createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE$1] = _anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : _objectDps(result, Properties);\n};\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\nvar hiddenKeys = _enumBugKeys.concat('length', 'prototype');\n\nvar f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return _objectKeysInternal(O, hiddenKeys);\n};\n\nvar _objectGopn = {\n\tf: f$4\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\nvar gOPN = _objectGopn.f;\nvar toString$1 = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nvar f$5 = function getOwnPropertyNames(it) {\n  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));\n};\n\nvar _objectGopnExt = {\n\tf: f$5\n};\n\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = _toIobject(O);\n  P = _toPrimitive(P, true);\n  if (_ie8DomDefine) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);\n};\n\nvar _objectGopd = {\n\tf: f$6\n};\n\n// ECMAScript 6 symbols shim\n\n\n\n\n\nvar META = _meta.KEY;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar gOPD$1 = _objectGopd.f;\nvar dP$1 = _objectDp.f;\nvar gOPN$1 = _objectGopnExt.f;\nvar $Symbol = _global.Symbol;\nvar $JSON = _global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE$2 = 'prototype';\nvar HIDDEN = _wks('_hidden');\nvar TO_PRIMITIVE = _wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = _shared('symbol-registry');\nvar AllSymbols = _shared('symbols');\nvar OPSymbols = _shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE$2];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = _global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = _descriptors && _fails(function () {\n  return _objectCreate(dP$1({}, 'a', {\n    get: function () { return dP$1(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD$1(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP$1(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);\n} : dP$1;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  _anObject(it);\n  key = _toPrimitive(key, true);\n  _anObject(D);\n  if (_has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP$1(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  _anObject(it);\n  var keys = _enumKeys(P = _toIobject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = _toPrimitive(key, true));\n  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;\n  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = _toIobject(it);\n  key = _toPrimitive(key, true);\n  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;\n  var D = gOPD$1(it, key);\n  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN$1(_toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, _propertyDesc(1, value));\n    };\n    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {\n    return this._k;\n  });\n\n  _objectGopd.f = $getOwnPropertyDescriptor;\n  _objectDp.f = $defineProperty;\n  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;\n  _objectPie.f = $propertyIsEnumerable;\n  _objectGops.f = $getOwnPropertySymbols;\n\n  if (_descriptors && !_library) {\n    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  _wksExt.f = function (name) {\n    return wrap(_wks(name));\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return _has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!_isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\n_setToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\n_setToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\n_setToStringTag(_global.JSON, 'JSON', true);\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\n\nvar TAG$1 = _wks('toStringTag');\n// ES3 wrong here\nvar ARG = _cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nvar _classof = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\n    // builtinTag case\n    : ARG ? _cof(O)\n    // ES3 arguments fallback\n    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n// 19.1.3.6 Object.prototype.toString()\n\nvar test = {};\ntest[_wks('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  _redefine(Object.prototype, 'toString', function toString() {\n    return '[object ' + _classof(this) + ']';\n  }, true);\n}\n\n_wksDefine('asyncIterator');\n\n_wksDefine('observable');\n\nvar symbol = _core.Symbol;\n\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(_defined(that));\n    var i = _toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _iterators = {};\n\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function () { return this; });\n\nvar _iterCreate = function (Constructor, NAME, next) {\n  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });\n  _setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\n\nvar IE_PROTO$2 = _sharedKey('IE_PROTO');\nvar ObjectProto$1 = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function (O) {\n  O = _toObject(O);\n  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto$1 : null;\n};\n\nvar ITERATOR = _wks('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nvar _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  _iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = _objectGpo($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      _setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    _hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  _iterators[NAME] = $default;\n  _iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) _redefine(proto, key, methods[key]);\n    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\nvar $at = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\nvar _iterStep = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nvar es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\n  this._t = _toIobject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return _iterStep(1);\n  }\n  if (kind == 'keys') return _iterStep(0, index);\n  if (kind == 'values') return _iterStep(0, O[index]);\n  return _iterStep(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n_iterators.Arguments = _iterators.Array;\n\n_addToUnscopables('keys');\n_addToUnscopables('values');\n_addToUnscopables('entries');\n\nvar ITERATOR$1 = _wks('iterator');\nvar TO_STRING_TAG = _wks('toStringTag');\nvar ArrayValues = _iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = _global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);\n    if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);\n    _iterators[NAME] = ArrayValues;\n    if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);\n  }\n}\n\nvar iterator = _wksExt.f('iterator');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/polyfill/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/@firebase/util/dist/index.cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/@firebase/util/dist/index.cjs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, opt_webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = opt_webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\r\n    decodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, opt_webSafe) {\r\n        this.init_();\r\n        var charToByteMap = opt_webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 != 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 != 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!source.hasOwnProperty(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\n// TODO: Really needed (for JSCompiler type checking)?\r\nfunction patchProperty(obj, prop, value) {\r\n    obj[prop] = value;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nvar getUA = function () {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nvar isMobileCordova = function () {\r\n    return (typeof window !== 'undefined' &&\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n};\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nvar isReactNative = function () {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n};\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nvar isNodeSdk = function () {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n};\n\nvar ERROR_NAME = 'FirebaseError';\r\nvar captureStackTrace = Error\r\n    .captureStackTrace;\r\n// Export for faking in tests\r\nfunction patchCapture(captureFake) {\r\n    var result = captureStackTrace;\r\n    captureStackTrace = captureFake;\r\n    return result;\r\n}\r\nvar FirebaseError = /** @class */ (function () {\r\n    function FirebaseError(code, message) {\r\n        this.code = code;\r\n        this.message = message;\r\n        // We want the stack value, if implemented by Error\r\n        if (captureStackTrace) {\r\n            // Patches this.stack, omitted calls above ErrorFactory#create\r\n            captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n        else {\r\n            try {\r\n                // In case of IE11, stack will be set only after error is raised.\r\n                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript\r\n                throw Error.apply(this, arguments);\r\n            }\r\n            catch (err) {\r\n                this.name = ERROR_NAME;\r\n                // Make non-enumerable getter for the property.\r\n                Object.defineProperty(this, 'stack', {\r\n                    get: function () {\r\n                        return err.stack;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return FirebaseError;\r\n}());\r\n// Back-door inheritance\r\nFirebaseError.prototype = Object.create(Error.prototype);\r\nFirebaseError.prototype.constructor = FirebaseError;\r\nFirebaseError.prototype.name = ERROR_NAME;\r\nvar ErrorFactory = /** @class */ (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n        // Matches {$name}, by default.\r\n        this.pattern = /\\{\\$([^}]+)}/g;\r\n        // empty\r\n    }\r\n    ErrorFactory.prototype.create = function (code, data) {\r\n        if (data === undefined) {\r\n            data = {};\r\n        }\r\n        var template = this.errors[code];\r\n        var fullCode = this.service + '/' + code;\r\n        var message;\r\n        if (template === undefined) {\r\n            message = 'Error';\r\n        }\r\n        else {\r\n            message = template.replace(this.pattern, function (match, key) {\r\n                var value = data[key];\r\n                return value !== undefined ? value.toString() : '<' + key + '?>';\r\n            });\r\n        }\r\n        // Service: Error message (service/code).\r\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\r\n        var err = new FirebaseError(fullCode, message);\r\n        // Populate the Error object with message parts for programmatic\r\n        // accesses (e.g., e.file).\r\n        for (var prop in data) {\r\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\r\n                continue;\r\n            }\r\n            err[prop] = data[prop];\r\n        }\r\n        return err;\r\n    };\r\n    return ErrorFactory;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\r\n * signature.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return (!!decoded.signature &&\r\n        !!claims &&\r\n        typeof claims === 'object' &&\r\n        claims.hasOwnProperty('iat'));\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar safeGet = function (obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key))\r\n        return obj[key];\r\n    // else return undefined.\r\n};\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar forEach = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nvar extend = function (objTo, objFrom) {\r\n    forEach(objFrom, function (key, value) {\r\n        objTo[key] = value;\r\n    });\r\n    return objTo;\r\n};\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nvar clone = function (obj) {\r\n    return extend({}, obj);\r\n};\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nvar isNonNullObject = function (obj) {\r\n    return typeof obj === 'object' && obj !== null;\r\n};\r\nvar isEmpty = function (obj) {\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar getCount = function (obj) {\r\n    var rv = 0;\r\n    for (var key in obj) {\r\n        rv++;\r\n    }\r\n    return rv;\r\n};\r\nvar map = function (obj, f, opt_obj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        res[key] = f.call(opt_obj, obj[key], key, obj);\r\n    }\r\n    return res;\r\n};\r\nvar findKey = function (obj, fn, opt_this) {\r\n    for (var key in obj) {\r\n        if (fn.call(opt_this, obj[key], key, obj)) {\r\n            return key;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nvar findValue = function (obj, fn, opt_this) {\r\n    var key = findKey(obj, fn, opt_this);\r\n    return key && obj[key];\r\n};\r\nvar getAnyKey = function (obj) {\r\n    for (var key in obj) {\r\n        return key;\r\n    }\r\n};\r\nvar getValues = function (obj) {\r\n    var res = [];\r\n    var i = 0;\r\n    for (var key in obj) {\r\n        res[i++] = obj[key];\r\n    }\r\n    return res;\r\n};\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar every = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            if (!fn(key, obj[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nvar querystring = function (querystringParams) {\r\n    var params = [];\r\n    forEach(querystringParams, function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    });\r\n    return params.length ? '&' + params.join('&') : '';\r\n};\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nvar querystringDecode = function (querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var key = token.split('=');\r\n            obj[key[0]] = key[1];\r\n        }\r\n    });\r\n    return obj;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\r\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\r\nvar Hash = /** @class */ (function () {\r\n    function Hash() {\r\n        /**\r\n         * The block size for the hasher.\r\n         * @type {number}\r\n         */\r\n        this.blockSize = -1;\r\n    }\r\n    return Hash;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sha1, _super);\r\n    function Sha1() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.total_ = 0;\r\n        _this.blockSize = 512 / 8;\r\n        _this.pad_[0] = 128;\r\n        for (var i = 1; i < _this.blockSize; ++i) {\r\n            _this.pad_[i] = 0;\r\n        }\r\n        _this.reset();\r\n        return _this;\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\r\n        if (!opt_offset) {\r\n            opt_offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(opt_offset) << 24) |\r\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\r\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\r\n                        buf.charCodeAt(opt_offset + 3);\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[opt_offset] << 24) |\r\n                        (buf[opt_offset + 1] << 16) |\r\n                        (buf[opt_offset + 2] << 8) |\r\n                        buf[opt_offset + 3];\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, opt_length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (opt_length === undefined) {\r\n            opt_length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = opt_length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < opt_length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf == 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += opt_length;\r\n    };\r\n    /** @override */\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}(Hash));\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = /** @class */ (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n/** Turn synchronous function into one called asynchronously. */\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argumentNumber, optional) {\r\n    var argName = '';\r\n    switch (argumentNumber) {\r\n        case 1:\r\n            argName = optional ? 'first' : 'First';\r\n            break;\r\n        case 2:\r\n            argName = optional ? 'second' : 'Second';\r\n            break;\r\n        case 3:\r\n            argName = optional ? 'third' : 'Third';\r\n            break;\r\n        case 4:\r\n            argName = optional ? 'fourth' : 'Fourth';\r\n            break;\r\n        default:\r\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\r\n    }\r\n    var error = fnName + ' failed: ';\r\n    error += argName + ' argument ';\r\n    return error;\r\n}\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\r\n    if (optional && !namespace)\r\n        return;\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\r\n    if (optional && !callback)\r\n        return;\r\n    if (typeof callback !== 'function')\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid function.');\r\n}\r\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\r\n    if (optional && !context)\r\n        return;\r\n    if (typeof context !== 'object' || context === null)\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid context object.');\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.CONSTANTS = CONSTANTS;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.patchProperty = patchProperty;\nexports.Deferred = Deferred;\nexports.getUA = getUA;\nexports.isMobileCordova = isMobileCordova;\nexports.isNodeSdk = isNodeSdk;\nexports.isReactNative = isReactNative;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.patchCapture = patchCapture;\nexports.jsonEval = jsonEval;\nexports.stringify = stringify;\nexports.decode = decode;\nexports.isAdmin = isAdmin;\nexports.issuedAtTime = issuedAtTime;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.clone = clone;\nexports.contains = contains;\nexports.every = every;\nexports.extend = extend;\nexports.findKey = findKey;\nexports.findValue = findValue;\nexports.forEach = forEach;\nexports.getAnyKey = getAnyKey;\nexports.getCount = getCount;\nexports.getValues = getValues;\nexports.isEmpty = isEmpty;\nexports.isNonNullObject = isNonNullObject;\nexports.map = map;\nexports.safeGet = safeGet;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.Sha1 = Sha1;\nexports.async = async;\nexports.createSubscribe = createSubscribe;\nexports.errorPrefix = errorPrefix;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateNamespace = validateNamespace;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/util/dist/index.cjs.js\n");

/***/ }),

/***/ "./node_modules/all-subsets/index.js":
/*!*******************************************!*\
  !*** ./node_modules/all-subsets/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nfunction * subsets(array, offset = 0) {\r\n    while (offset < array.length) {\r\n        let first = array[offset++];\r\n        for (let subset of subsets(array, offset)) {\r\n            subset.push(first);\r\n            yield subset;\r\n        }\r\n    }\r\n    yield [];\r\n}\r\n\r\nmodule.exports = inputArray => {\r\n    const result = [];\r\n\r\n    for (let subset of subsets(inputArray)) {\r\n        result.push(subset);\r\n    }\r\n\r\n    return result;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWxsLXN1YnNldHMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWxsLXN1YnNldHMvaW5kZXguanM/MWVjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5mdW5jdGlvbiAqIHN1YnNldHMoYXJyYXksIG9mZnNldCA9IDApIHtcclxuICAgIHdoaWxlIChvZmZzZXQgPCBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICBsZXQgZmlyc3QgPSBhcnJheVtvZmZzZXQrK107XHJcbiAgICAgICAgZm9yIChsZXQgc3Vic2V0IG9mIHN1YnNldHMoYXJyYXksIG9mZnNldCkpIHtcclxuICAgICAgICAgICAgc3Vic2V0LnB1c2goZmlyc3QpO1xyXG4gICAgICAgICAgICB5aWVsZCBzdWJzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgeWllbGQgW107XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gaW5wdXRBcnJheSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBzdWJzZXQgb2Ygc3Vic2V0cyhpbnB1dEFycmF5KSkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHN1YnNldCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/all-subsets/index.js\n");

/***/ }),

/***/ "./node_modules/firebase/app/dist/index.cjs.js":
/*!*****************************************************!*\
  !*** ./node_modules/firebase/app/dist/index.cjs.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\n__webpack_require__(/*! @firebase/polyfill */ \"./node_modules/@firebase/polyfill/dist/index.esm.js\");\nvar firebase = _interopDefault(__webpack_require__(/*! @firebase/app */ \"./node_modules/@firebase/app/dist/index.cjs.js\"));\n\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nmodule.exports = firebase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXguY2pzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2FwcC9kaXN0L2luZGV4LmNqcy5qcz81OWNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnJlcXVpcmUoJ0BmaXJlYmFzZS9wb2x5ZmlsbCcpO1xudmFyIGZpcmViYXNlID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BmaXJlYmFzZS9hcHAnKSk7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpcmViYXNlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/firebase/app/dist/index.cjs.js\n");

/***/ }),

/***/ "./node_modules/firebase/database/dist/index.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/firebase/database/dist/index.esm.js ***!
  \**********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _firebase_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/database */ \"./node_modules/@firebase/database/dist/index.cjs.js\");\n/* harmony import */ var _firebase_database__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_firebase_database__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvZGF0YWJhc2UvZGlzdC9pbmRleC5lc20uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvZGF0YWJhc2UvZGlzdC9pbmRleC5lc20uanM/NjZjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0BmaXJlYmFzZS9kYXRhYmFzZSc7XG5cbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/firebase/database/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/permutation/permutations.js":
/*!**************************************************!*\
  !*** ./node_modules/permutation/permutations.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function(){\n\n  function uniqueFilter(value, index, self) {\n      return self.indexOf(value) === index;\n  }\n\n  function unique(a) {\n    return a.filter(uniqueFilter);\n  }\n\n  function permutations(v, opts) {\n    if (!v) return [];\n    opts = opts || {};\n    function p(prefix, s, acc) {\n      acc = acc || [];\n      var n = s.length;\n      if (n === 0) return acc.push(prefix);\n      for (var i = 0; i < n; i++) {\n        p(prefix + s.charAt(i), s.substring(0,i) + s.substring(i+1), acc);\n      }\n      return opts.unique ? unique(acc) : acc;\n    }\n\n    return p('', v);\n  }\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = permutations;\n  } else {\n    window.permutations = permutations;\n  }\n\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGVybXV0YXRpb24vcGVybXV0YXRpb25zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Blcm11dGF0aW9uL3Blcm11dGF0aW9ucy5qcz9lMjRlIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1xuXG4gIGZ1bmN0aW9uIHVuaXF1ZUZpbHRlcih2YWx1ZSwgaW5kZXgsIHNlbGYpIHtcbiAgICAgIHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuaXF1ZShhKSB7XG4gICAgcmV0dXJuIGEuZmlsdGVyKHVuaXF1ZUZpbHRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJtdXRhdGlvbnModiwgb3B0cykge1xuICAgIGlmICghdikgcmV0dXJuIFtdO1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGZ1bmN0aW9uIHAocHJlZml4LCBzLCBhY2MpIHtcbiAgICAgIGFjYyA9IGFjYyB8fCBbXTtcbiAgICAgIHZhciBuID0gcy5sZW5ndGg7XG4gICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIGFjYy5wdXNoKHByZWZpeCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBwKHByZWZpeCArIHMuY2hhckF0KGkpLCBzLnN1YnN0cmluZygwLGkpICsgcy5zdWJzdHJpbmcoaSsxKSwgYWNjKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRzLnVuaXF1ZSA/IHVuaXF1ZShhY2MpIDogYWNjO1xuICAgIH1cblxuICAgIHJldHVybiBwKCcnLCB2KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBwZXJtdXRhdGlvbnM7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LnBlcm11dGF0aW9ucyA9IHBlcm11dGF0aW9ucztcbiAgfVxuXG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/permutation/permutations.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzPzUxMTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVpZGF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__extends\", function() { return __extends; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__assign\", function() { return __assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__rest\", function() { return __rest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__decorate\", function() { return __decorate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__param\", function() { return __param; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__metadata\", function() { return __metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__awaiter\", function() { return __awaiter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__generator\", function() { return __generator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__exportStar\", function() { return __exportStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__values\", function() { return __values; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__read\", function() { return __read; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__spread\", function() { return __spread; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__await\", function() { return __await; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncGenerator\", function() { return __asyncGenerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncDelegator\", function() { return __asyncDelegator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__asyncValues\", function() { return __asyncValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__makeTemplateObject\", function() { return __makeTemplateObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importStar\", function() { return __importStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__importDefault\", function() { return __importDefault; });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/whatwg-fetch/fetch.js\n");

/***/ }),

/***/ "./src/components/board.js":
/*!*********************************!*\
  !*** ./src/components/board.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tile_factory = __webpack_require__(/*! ./tile_factory */ \"./src/components/tile_factory.js\");\n\nvar _tile_factory2 = _interopRequireDefault(_tile_factory);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Board = function () {\n  function Board(keyWord) {\n    _classCallCheck(this, Board);\n\n    this.keyWord = keyWord;\n    this.shortAnsCharLimit = 4;\n    this.shortAnsDisplay = document.getElementById(\"short-list\");\n    this.longAnsDisplay = document.getElementById(\"long-list\");\n    this.reset();\n    this.populate();\n  }\n\n  _createClass(Board, [{\n    key: \"populate\",\n    value: function populate() {\n      var _this = this;\n\n      //creates side panels and main game word panel\n      //shuffles and displays keyWord on game-panel\n      this.populateKeyWord();\n\n      this.keyWord.allSubwords.forEach(function (word) {\n        if (word.length < _this.shortAnsCharLimit) {\n          var shortAnsItem = new _tile_factory2.default(word);\n          _this.ansDisplayKey[word] = shortAnsItem;\n          _this.shortAnsDisplay.append(shortAnsItem.answerItem);\n        } else {\n          var longAnsItem = new _tile_factory2.default(word);\n          _this.ansDisplayKey[word] = longAnsItem;\n          _this.longAnsDisplay.append(longAnsItem.answerItem);\n        }\n      });\n    }\n  }, {\n    key: \"populateKeyWord\",\n    value: function populateKeyWord() {\n      //shuffle keyWord letters\n      var keyWordField = document.getElementById(\"key-word\");\n      var keyWord = new _tile_factory2.default(this.keyWord.value, true);\n      keyWord.reveal();\n      if (keyWordField.firstChild) {\n        keyWordField.removeChild(keyWordField.firstChild);\n      }\n      keyWordField.append(keyWord.answerItem);\n    }\n  }, {\n    key: \"updateAnswerDisplay\",\n    value: function updateAnswerDisplay(word) {\n      if (this.ansDisplayKey[word]) {\n        this.ansDisplayKey[word].reveal();\n      }\n    }\n  }, {\n    key: \"revealAll\",\n    value: function revealAll() {\n      var _this2 = this;\n\n      //reveals the remaining words\n      Object.keys(this.ansDisplayKey).forEach(function (word) {\n        if (!_this2.ansDisplayKey[word].revealed) {\n          _this2.ansDisplayKey[word].reveal(true);\n        }\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.ansDisplayKey = {};\n      while (this.shortAnsDisplay.firstChild) {\n        this.shortAnsDisplay.removeChild(this.shortAnsDisplay.firstChild);\n      }\n\n      while (this.longAnsDisplay.firstChild) {\n        this.longAnsDisplay.removeChild(this.longAnsDisplay.firstChild);\n      }\n    }\n  }]);\n\n  return Board;\n}();\n\nexports.default = Board;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9ib2FyZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9ib2FyZC5qcz81NjljIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMZXR0ZXJUaWxlcyBmcm9tICcuL3RpbGVfZmFjdG9yeSc7XG5cbmNsYXNzIEJvYXJkIHtcblxuICBjb25zdHJ1Y3RvcihrZXlXb3JkKSB7XG4gICAgdGhpcy5rZXlXb3JkID0ga2V5V29yZDtcbiAgICB0aGlzLnNob3J0QW5zQ2hhckxpbWl0ID0gNDtcbiAgICB0aGlzLnNob3J0QW5zRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hvcnQtbGlzdFwiKTtcbiAgICB0aGlzLmxvbmdBbnNEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb25nLWxpc3RcIik7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMucG9wdWxhdGUoKTtcbiAgfVxuXG4gIHBvcHVsYXRlKCkge1xuICAgIC8vY3JlYXRlcyBzaWRlIHBhbmVscyBhbmQgbWFpbiBnYW1lIHdvcmQgcGFuZWxcbiAgICAvL3NodWZmbGVzIGFuZCBkaXNwbGF5cyBrZXlXb3JkIG9uIGdhbWUtcGFuZWxcbiAgICB0aGlzLnBvcHVsYXRlS2V5V29yZCgpO1xuXG4gICAgdGhpcy5rZXlXb3JkLmFsbFN1YndvcmRzLmZvckVhY2god29yZCA9PiB7XG4gICAgICBpZiAod29yZC5sZW5ndGggPCB0aGlzLnNob3J0QW5zQ2hhckxpbWl0KSB7XG4gICAgICAgIGNvbnN0IHNob3J0QW5zSXRlbSA9IG5ldyBMZXR0ZXJUaWxlcyh3b3JkKTtcbiAgICAgICAgdGhpcy5hbnNEaXNwbGF5S2V5W3dvcmRdID0gc2hvcnRBbnNJdGVtO1xuICAgICAgICB0aGlzLnNob3J0QW5zRGlzcGxheS5hcHBlbmQoc2hvcnRBbnNJdGVtLmFuc3dlckl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbG9uZ0Fuc0l0ZW0gPSBuZXcgTGV0dGVyVGlsZXMod29yZCk7XG4gICAgICAgIHRoaXMuYW5zRGlzcGxheUtleVt3b3JkXSA9IGxvbmdBbnNJdGVtO1xuICAgICAgICB0aGlzLmxvbmdBbnNEaXNwbGF5LmFwcGVuZChsb25nQW5zSXRlbS5hbnN3ZXJJdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHBvcHVsYXRlS2V5V29yZCgpIHtcbiAgICAvL3NodWZmbGUga2V5V29yZCBsZXR0ZXJzXG4gICAgY29uc3Qga2V5V29yZEZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrZXktd29yZFwiKTtcbiAgICBjb25zdCBrZXlXb3JkID0gbmV3IExldHRlclRpbGVzKHRoaXMua2V5V29yZC52YWx1ZSwgdHJ1ZSk7XG4gICAga2V5V29yZC5yZXZlYWwoKTtcbiAgICBpZiAoa2V5V29yZEZpZWxkLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGtleVdvcmRGaWVsZC5yZW1vdmVDaGlsZChrZXlXb3JkRmllbGQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGtleVdvcmRGaWVsZC5hcHBlbmQoa2V5V29yZC5hbnN3ZXJJdGVtKTtcbiAgfVxuXG4gIHVwZGF0ZUFuc3dlckRpc3BsYXkod29yZCkge1xuICAgIGlmICh0aGlzLmFuc0Rpc3BsYXlLZXlbd29yZF0pIHtcbiAgICAgIHRoaXMuYW5zRGlzcGxheUtleVt3b3JkXS5yZXZlYWwoKTtcbiAgICB9XG4gIH1cblxuICByZXZlYWxBbGwoKSB7XG4gICAgLy9yZXZlYWxzIHRoZSByZW1haW5pbmcgd29yZHNcbiAgICBPYmplY3Qua2V5cyh0aGlzLmFuc0Rpc3BsYXlLZXkpLmZvckVhY2god29yZCA9PiB7XG4gICAgICBpZiAoIXRoaXMuYW5zRGlzcGxheUtleVt3b3JkXS5yZXZlYWxlZCkge1xuICAgICAgICB0aGlzLmFuc0Rpc3BsYXlLZXlbd29yZF0ucmV2ZWFsKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5hbnNEaXNwbGF5S2V5ID0ge307XG4gICAgd2hpbGUgKHRoaXMuc2hvcnRBbnNEaXNwbGF5LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHRoaXMuc2hvcnRBbnNEaXNwbGF5LnJlbW92ZUNoaWxkKHRoaXMuc2hvcnRBbnNEaXNwbGF5LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHdoaWxlICh0aGlzLmxvbmdBbnNEaXNwbGF5LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHRoaXMubG9uZ0Fuc0Rpc3BsYXkucmVtb3ZlQ2hpbGQodGhpcy5sb25nQW5zRGlzcGxheS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJvYXJkO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/board.js\n");

/***/ }),

/***/ "./src/components/dictionary/dictionary.js":
/*!*************************************************!*\
  !*** ./src/components/dictionary/dictionary.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _valid_words_library = __webpack_require__(/*! ./valid_words_library */ \"./src/components/dictionary/valid_words_library.js\");\n\nvar _valid_words_library2 = _interopRequireDefault(_valid_words_library);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Dictionary = function () {\n  function Dictionary() {\n    _classCallCheck(this, Dictionary);\n\n    this.dictionary = new Set(_valid_words_library2.default);\n  }\n\n  _createClass(Dictionary, [{\n    key: \"isValid\",\n    value: function isValid(word) {\n      return this.dictionary.has(word);\n    }\n  }, {\n    key: \"validateCollection\",\n    value: function validateCollection(wordArray) {\n      var _this = this;\n\n      return wordArray.filter(function (word) {\n        return _this.isValid(word);\n      });\n    }\n  }]);\n\n  return Dictionary;\n}();\n\nexports.default = Dictionary;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9kaWN0aW9uYXJ5L2RpY3Rpb25hcnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvZGljdGlvbmFyeS9kaWN0aW9uYXJ5LmpzP2ZmMWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdvcmRMaWJyYXJ5IGZyb20gXCIuL3ZhbGlkX3dvcmRzX2xpYnJhcnlcIjtcblxuY2xhc3MgRGljdGlvbmFyeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGljdGlvbmFyeSA9IG5ldyBTZXQod29yZExpYnJhcnkpO1xuICB9XG5cbiAgaXNWYWxpZCh3b3JkKSB7XG4gICAgcmV0dXJuIHRoaXMuZGljdGlvbmFyeS5oYXMod29yZCk7XG4gIH1cblxuICB2YWxpZGF0ZUNvbGxlY3Rpb24od29yZEFycmF5KSB7XG4gICAgcmV0dXJuIHdvcmRBcnJheS5maWx0ZXIod29yZCA9PiB0aGlzLmlzVmFsaWQod29yZCkpO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGljdGlvbmFyeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBOzs7Ozs7O0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7Ozs7OztBQUlBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/dictionary/dictionary.js\n");

/***/ }),

/***/ "./src/components/dictionary/game_keys.js":
/*!************************************************!*\
  !*** ./src/components/dictionary/game_keys.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar keyWords = [\"abduct\", \"abound\", \"accept\", \"acting\", \"active\", \"actual\", \"acumen\", \"adjure\", \"adjust\", \"advice\", \"affect\", \"afford\", \"afraid\", \"agency\", \"agonic\", \"aguish\", \"akimbo\", \"amebic\", \"annual\", \"anyone\", \"argufy\", \"arrive\", \"artful\", \"assist\", \"attend\", \"august\", \"avenue\", \"avowed\", \"awhile\", \"backed\", \"barque\", \"beachy\", \"became\", \"befoul\", \"behalf\", \"behind\", \"belief\", \"better\", \"bicker\", \"bifold\", \"biopsy\", \"blimey\", \"blotch\", \"bluing\", \"bodice\", \"bodily\", \"bonked\", \"botany\", \"bottle\", \"bottom\", \"bought\", \"bounce\", \"bowing\", \"bowman\", \"boxier\", \"branch\", \"brazen\", \"bright\", \"bronze\", \"budget\", \"bumped\", \"bumper\", \"bungle\", \"bunked\", \"bunker\", \"buoyed\", \"bureau\", \"burial\", \"button\", \"byline\", \"bypath\", \"cajole\", \"caking\", \"cannot\", \"career\", \"casque\", \"casual\", \"caught\", \"caving\", \"cawing\", \"ceding\", \"cerium\", \"cesium\", \"chafed\", \"chalky\", \"chance\", \"change\", \"chanty\", \"chawed\", \"chimed\", \"choked\", \"choker\", \"choose\", \"circle\", \"climax\", \"cloven\", \"clover\", \"coding\", \"cogent\", \"combed\", \"compel\", \"comply\", \"consul\", \"copied\", \"copper\", \"copula\", \"corner\", \"cortex\", \"costly\", \"cougar\", \"county\", \"couple\", \"cousin\", \"cozier\", \"crikey\", \"cringe\", \"crisis\", \"crispy\", \"crusty\", \"cubism\", \"cudgel\", \"curing\", \"curved\", \"curvet\", \"cutely\", \"dainty\", \"darkly\", \"dazing\", \"decade\", \"defend\", \"depend\", \"depict\", \"deputy\", \"descry\", \"device\", \"devout\", \"dickey\", \"differ\", \"dinner\", \"docket\", \"dollar\", \"donkey\", \"doubly\", \"dozier\", \"duping\", \"duplex\", \"dyeing\", \"effort\", \"eighth\", \"embank\", \"embryo\", \"emerge\", \"employ\", \"ending\", \"energy\", \"engine\", \"enmity\", \"enough\", \"enrich\", \"entity\", \"eponym\", \"erbium\", \"expand\", \"expert\", \"extend\", \"extent\", \"fabric\", \"faking\", \"fallen\", \"family\", \"famous\", \"feting\", \"fidget\", \"figure\", \"finely\", \"finery\", \"finish\", \"fixate\", \"flashy\", \"flexor\", \"flinty\", \"florid\", \"fluent\", \"foible\", \"foment\", \"forbid\", \"fought\", \"fourth\", \"frisky\", \"frolic\", \"frozen\", \"frugal\", \"fumble\", \"funked\", \"fusion\", \"gadfly\", \"garlic\", \"gawked\", \"gently\", \"gifted\", \"ground\", \"growth\", \"guitar\", \"gushed\", \"hairdo\", \"handed\", \"hankie\", \"happen\", \"hardly\", \"having\", \"hazing\", \"headed\", \"height\", \"helium\", \"hewing\", \"hidden\", \"hinged\", \"hoaxed\", \"hoaxer\", \"hockey\", \"homage\", \"homely\", \"hoping\", \"howler\", \"humane\", \"hunted\", \"hurdle\", \"hurled\", \"hurtle\", \"husked\", \"husker\", \"imbrue\", \"imbued\", \"impact\", \"impure\", \"income\", \"indeed\", \"induce\", \"infamy\", \"infect\", \"inform\", \"infuse\", \"intent\", \"invoke\", \"jading\", \"jargon\", \"jawing\", \"jersey\", \"jilted\", \"joined\", \"joiner\", \"jungle\", \"kayoed\", \"keying\", \"keypad\", \"kidney\", \"killed\", \"kludge\", \"knight\", \"labium\", \"labour\", \"lazing\", \"lemony\", \"length\", \"letter\", \"levity\", \"lights\", \"likely\", \"little\", \"lizard\", \"locker\", \"locket\", \"lounge\", \"lucent\", \"lumper\", \"lunacy\", \"making\", \"manner\", \"matrix\", \"mazing\", \"medfly\", \"medick\", \"medium\", \"member\", \"merely\", \"middle\", \"miller\", \"minced\", \"mincer\", \"miscue\", \"mobile\", \"mocked\", \"moiety\", \"moping\", \"morbid\", \"mosque\", \"mostly\", \"motion\", \"motive\", \"motley\", \"mouthy\", \"muskeg\", \"musket\", \"mutual\", \"myopia\", \"myself\", \"mystic\", \"narrow\", \"nicety\", \"niched\", \"nicked\", \"nickel\", \"nimble\", \"nobody\", \"nuclei\", \"nudity\", \"number\", \"nutmeg\", \"offset\", \"origin\", \"outbid\", \"owlish\", \"oxtail\", \"pacing\", \"packed\", \"patchy\", \"pencil\", \"penury\", \"phobia\", \"picked\", \"pitchy\", \"plaguy\", \"plenty\", \"plough\", \"plunge\", \"pocket\", \"police\", \"policy\", \"potful\", \"pounce\", \"prefer\", \"premix\", \"pretty\", \"privet\", \"prized\", \"profit\", \"proven\", \"prying\", \"putrid\", \"quaint\", \"quarto\", \"racily\", \"rankly\", \"ravish\", \"razing\", \"recent\", \"rectum\", \"rhymed\", \"riding\", \"ropily\", \"rucked\", \"ruling\", \"saluki\", \"scheme\", \"school\", \"screen\", \"screwy\", \"seller\", \"shifty\", \"should\", \"shrunk\", \"shying\", \"simply\", \"singly\", \"sketch\", \"skimpy\", \"sleigh\", \"slight\", \"slough\", \"snugly\", \"softly\", \"soviet\", \"speech\", \"sphinx\", \"spongy\", \"squeal\", \"stocky\", \"stress\", \"strict\", \"strong\", \"struck\", \"sturdy\", \"subway\", \"sudden\", \"suffer\", \"summer\", \"summit\", \"swingy\", \"sylvan\", \"symbol\", \"syntax\", \"system\", \"thinly\", \"though\", \"throng\", \"ticket\", \"tickle\", \"timely\", \"tingly\", \"tissue\", \"toying\", \"tragic\", \"trench\", \"trudge\", \"trying\", \"tubing\", \"turfed\", \"turkey\", \"twelve\", \"twenty\", \"typing\", \"umpire\", \"unbolt\", \"unclad\", \"unfair\", \"unisex\", \"unkept\", \"unless\", \"unlike\", \"unload\", \"untidy\", \"unveil\", \"unwary\", \"unwrap\", \"upheld\", \"uphold\", \"uptown\", \"vainly\", \"valley\", \"vamped\", \"vastly\", \"verify\", \"vermin\", \"versus\", \"visual\", \"volume\", \"vortex\", \"vulgar\", \"waived\", \"walnut\", \"warmly\", \"waving\", \"weekly\", \"weight\", \"whined\", \"whiner\", \"wicker\", \"window\", \"winery\", \"winker\", \"winkle\", \"wisdom\", \"within\", \"woeful\", \"worker\", \"wretch\", \"wright\", \"yellow\", \"zinged\", \"zodiac\", \"zodiac\"];\n\nexports.default = keyWords;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/dictionary/game_keys.js\n");

/***/ }),

/***/ "./src/components/dictionary/util.js":
/*!*******************************************!*\
  !*** ./src/components/dictionary/util.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateWordScore = exports._charFrequency = exports._getValidSubstrings = undefined;\n\nvar _allSubsets = __webpack_require__(/*! all-subsets */ \"./node_modules/all-subsets/index.js\");\n\nvar _allSubsets2 = _interopRequireDefault(_allSubsets);\n\nvar _permutation = __webpack_require__(/*! permutation */ \"./node_modules/permutation/permutations.js\");\n\nvar _permutation2 = _interopRequireDefault(_permutation);\n\nvar _dictionary = __webpack_require__(/*! ./dictionary */ \"./src/components/dictionary/dictionary.js\");\n\nvar _dictionary2 = _interopRequireDefault(_dictionary);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getSubsets(word) {\n  var letters = word.split('');\n  // unique subsets\n  return (0, _allSubsets2.default)(letters).filter(function (letterArrs) {\n    return letterArrs.length > 2;\n  }).map(function (substrings) {\n    return substrings.join('');\n  });\n}\n\nfunction _getPermutations(array) {\n  var subwords = array.reduce(function (acc, el) {\n    return acc.concat((0, _permutation2.default)(el, { unique: true }));\n  }, []);\n  return subwords;\n}\n\nvar _getValidSubstrings = exports._getValidSubstrings = function _getValidSubstrings(keyWord, lengths) {\n  var dictionary = new _dictionary2.default();\n  var substrings = _getSubsets(keyWord);\n  var subwords = _getPermutations(substrings);\n  var validSubwords = dictionary.validateCollection(subwords);\n  return validSubwords.filter(function (word, index, list) {\n    return word.length >= lengths.min && word.length <= lengths.max && list.indexOf(word) === index;\n  }).sort(function (word1, word2) {\n    return (\n      //sorts first by length and then alphabetically\n      word1.length - word2.length || word1.localeCompare(word2)\n    );\n  });\n};\n\nvar _charFrequency = exports._charFrequency = function _charFrequency(string) {\n  var frequency = {};\n  var letters = string.toLowerCase().split(\"\");\n  letters.forEach(function (letter) {\n    if (frequency[letter]) {\n      frequency[letter] += 1;\n    } else {\n      frequency[letter] = 1;\n    }\n  });\n\n  return frequency;\n};\n\nvar calculateWordScore = exports.calculateWordScore = function calculateWordScore(word) {\n  return word.length * 30;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9kaWN0aW9uYXJ5L3V0aWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvZGljdGlvbmFyeS91dGlsLmpzP2FkNzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN1YnNldCBmcm9tICdhbGwtc3Vic2V0cyc7XG5pbXBvcnQgcGVybXV0YXRpb25zIGZyb20gJ3Blcm11dGF0aW9uJztcbmltcG9ydCBEaWN0aW9uYXJ5IGZyb20gJy4vZGljdGlvbmFyeSc7XG5cbmZ1bmN0aW9uIF9nZXRTdWJzZXRzKHdvcmQpIHtcbiAgY29uc3QgbGV0dGVycyA9IHdvcmQuc3BsaXQoJycpO1xuICAvLyB1bmlxdWUgc3Vic2V0c1xuICByZXR1cm4gc3Vic2V0KGxldHRlcnMpXG4gICAgICAgICAgICAuZmlsdGVyKGxldHRlckFycnMgPT4gbGV0dGVyQXJycy5sZW5ndGggPiAyKVxuICAgICAgICAgICAgLm1hcChzdWJzdHJpbmdzID0+IHN1YnN0cmluZ3Muam9pbignJykpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UGVybXV0YXRpb25zKGFycmF5KSB7XG4gIGNvbnN0IHN1YndvcmRzID0gYXJyYXkucmVkdWNlKChhY2MsIGVsKSA9PiB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQocGVybXV0YXRpb25zKGVsLCB7IHVuaXF1ZTogdHJ1ZSB9KSk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHN1YndvcmRzO1xufVxuXG5leHBvcnQgY29uc3QgX2dldFZhbGlkU3Vic3RyaW5ncyA9IChrZXlXb3JkLCBsZW5ndGhzKSA9PiB7XG4gIGNvbnN0IGRpY3Rpb25hcnkgPSBuZXcgRGljdGlvbmFyeSgpO1xuICBjb25zdCBzdWJzdHJpbmdzID0gX2dldFN1YnNldHMoa2V5V29yZCk7XG4gIGNvbnN0IHN1YndvcmRzID0gX2dldFBlcm11dGF0aW9ucyhzdWJzdHJpbmdzKTtcbiAgY29uc3QgdmFsaWRTdWJ3b3JkcyA9IGRpY3Rpb25hcnkudmFsaWRhdGVDb2xsZWN0aW9uKHN1YndvcmRzKTtcbiAgcmV0dXJuIHZhbGlkU3Vid29yZHMuZmlsdGVyKCh3b3JkLCBpbmRleCwgbGlzdCkgPT4gKFxuICAgIHdvcmQubGVuZ3RoID49IGxlbmd0aHMubWluXG4gICAgJiYgd29yZC5sZW5ndGggPD0gbGVuZ3Rocy5tYXhcbiAgICAmJiBsaXN0LmluZGV4T2Yod29yZCkgPT09IGluZGV4XG4gICkpLnNvcnQoKHdvcmQxLCB3b3JkMikgPT4gKFxuICAgIC8vc29ydHMgZmlyc3QgYnkgbGVuZ3RoIGFuZCB0aGVuIGFscGhhYmV0aWNhbGx5XG4gICAgd29yZDEubGVuZ3RoIC0gd29yZDIubGVuZ3RoIHx8IHdvcmQxLmxvY2FsZUNvbXBhcmUod29yZDIpXG4gICkpO1xufTtcblxuZXhwb3J0IGNvbnN0IF9jaGFyRnJlcXVlbmN5ID0gKHN0cmluZykgPT4ge1xuICBjb25zdCBmcmVxdWVuY3kgPSB7fTtcbiAgY29uc3QgbGV0dGVycyA9IHN0cmluZy50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiXCIpO1xuICBsZXR0ZXJzLmZvckVhY2gobGV0dGVyID0+IHtcbiAgICBpZiAoZnJlcXVlbmN5W2xldHRlcl0pIHtcbiAgICAgIGZyZXF1ZW5jeVtsZXR0ZXJdICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyZXF1ZW5jeVtsZXR0ZXJdID0gMTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBmcmVxdWVuY3k7XG59O1xuXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlV29yZFNjb3JlID0gKHdvcmQpID0+IHtcbiAgcmV0dXJuIHdvcmQubGVuZ3RoICogMzA7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/dictionary/util.js\n");

/***/ }),

/***/ "./src/components/dictionary/valid_words_library.js":
/*!**********************************************************!*\
  !*** ./src/components/dictionary/valid_words_library.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar words = [\"aah\", \"aahed\", \"aahing\", \"aahs\", \"aal\", \"aalii\", \"aaliis\", \"aals\", \"aargh\", \"aarrgh\", \"aas\", \"aba\", \"abaca\", \"abacas\", \"abaci\", \"aback\", \"abacus\", \"abaft\", \"abaka\", \"abakas\", \"abamp\", \"abamps\", \"abas\", \"abase\", \"abased\", \"abaser\", \"abases\", \"abash\", \"abasia\", \"abate\", \"abated\", \"abater\", \"abates\", \"abatis\", \"abator\", \"abba\", \"abbacy\", \"abbas\", \"abbe\", \"abbes\", \"abbess\", \"abbey\", \"abbeys\", \"abbot\", \"abbots\", \"abduce\", \"abduct\", \"abeam\", \"abed\", \"abele\", \"abeles\", \"abelia\", \"abet\", \"abets\", \"abhor\", \"abhors\", \"abide\", \"abided\", \"abider\", \"abides\", \"abject\", \"abjure\", \"ablate\", \"ablaut\", \"ablaze\", \"able\", \"abler\", \"ables\", \"ablest\", \"ablins\", \"abloom\", \"ablush\", \"ably\", \"abmho\", \"abmhos\", \"abo\", \"aboard\", \"abode\", \"aboded\", \"abodes\", \"abohm\", \"abohms\", \"aboil\", \"abolla\", \"aboma\", \"abomas\", \"aboon\", \"aboral\", \"abort\", \"aborts\", \"abos\", \"abound\", \"about\", \"above\", \"aboves\", \"abrade\", \"abri\", \"abris\", \"abroad\", \"abrupt\", \"abs\", \"abseil\", \"absent\", \"absorb\", \"absurd\", \"abulia\", \"abulic\", \"abuse\", \"abused\", \"abuser\", \"abuses\", \"abut\", \"abuts\", \"abuzz\", \"abvolt\", \"abwatt\", \"aby\", \"abye\", \"abyes\", \"abying\", \"abys\", \"abysm\", \"abysms\", \"abyss\", \"acacia\", \"acajou\", \"acari\", \"acarid\", \"acarus\", \"accede\", \"accent\", \"accept\", \"access\", \"accord\", \"accost\", \"accrue\", \"accuse\", \"ace\", \"aced\", \"acedia\", \"acerb\", \"aces\", \"aceta\", \"acetal\", \"acetic\", \"acetin\", \"acetum\", \"acetyl\", \"ache\", \"ached\", \"achene\", \"aches\", \"achier\", \"aching\", \"achoo\", \"achy\", \"acid\", \"acidic\", \"acidly\", \"acids\", \"acidy\", \"acinar\", \"acing\", \"acini\", \"acinic\", \"acinus\", \"ackee\", \"ackees\", \"acme\", \"acmes\", \"acmic\", \"acne\", \"acned\", \"acnes\", \"acnode\", \"acock\", \"acold\", \"acorn\", \"acorns\", \"acquit\", \"acre\", \"acred\", \"acres\", \"acrid\", \"across\", \"act\", \"acta\", \"acted\", \"actin\", \"acting\", \"actins\", \"action\", \"active\", \"actor\", \"actors\", \"acts\", \"actual\", \"acuate\", \"acuity\", \"aculei\", \"acumen\", \"acute\", \"acuter\", \"acutes\", \"acyl\", \"acyls\", \"adage\", \"adages\", \"adagio\", \"adapt\", \"adapts\", \"add\", \"addax\", \"added\", \"addend\", \"adder\", \"adders\", \"addict\", \"adding\", \"addle\", \"addled\", \"addles\", \"adds\", \"adduce\", \"adduct\", \"adeem\", \"adeems\", \"adenyl\", \"adept\", \"adepts\", \"adhere\", \"adieu\", \"adieus\", \"adieux\", \"adios\", \"adipic\", \"adit\", \"adits\", \"adjoin\", \"adjure\", \"adjust\", \"adman\", \"admass\", \"admen\", \"admire\", \"admit\", \"admits\", \"admix\", \"admixt\", \"adnate\", \"adnexa\", \"adnoun\", \"ado\", \"adobe\", \"adobes\", \"adobo\", \"adobos\", \"adonis\", \"adopt\", \"adopts\", \"adore\", \"adored\", \"adorer\", \"adores\", \"adorn\", \"adorns\", \"ados\", \"adown\", \"adoze\", \"adrift\", \"adroit\", \"ads\", \"adsorb\", \"adult\", \"adults\", \"adunc\", \"adust\", \"advect\", \"advent\", \"adverb\", \"advert\", \"advice\", \"advise\", \"adyta\", \"adytum\", \"adz\", \"adze\", \"adzes\", \"adzuki\", \"aecia\", \"aecial\", \"aecium\", \"aedes\", \"aedile\", \"aedine\", \"aegis\", \"aeneus\", \"aeon\", \"aeonic\", \"aeons\", \"aerate\", \"aerial\", \"aerie\", \"aeried\", \"aerier\", \"aeries\", \"aerify\", \"aerily\", \"aero\", \"aerobe\", \"aerugo\", \"aery\", \"aether\", \"afar\", \"afars\", \"afeard\", \"aff\", \"affair\", \"affect\", \"affine\", \"affirm\", \"affix\", \"afflux\", \"afford\", \"affray\", \"afghan\", \"afield\", \"afire\", \"aflame\", \"afloat\", \"afoot\", \"afore\", \"afoul\", \"afraid\", \"afreet\", \"afresh\", \"afrit\", \"afrits\", \"aft\", \"after\", \"afters\", \"aftosa\", \"aga\", \"again\", \"agama\", \"agamas\", \"agamic\", \"agapae\", \"agapai\", \"agape\", \"agar\", \"agaric\", \"agars\", \"agas\", \"agate\", \"agates\", \"agave\", \"agaves\", \"agaze\", \"age\", \"aged\", \"agedly\", \"agee\", \"ageing\", \"ageism\", \"ageist\", \"agency\", \"agenda\", \"agene\", \"agenes\", \"agent\", \"agents\", \"ager\", \"agers\", \"ages\", \"agger\", \"aggers\", \"aggie\", \"aggies\", \"aggro\", \"aggros\", \"agha\", \"aghas\", \"aghast\", \"agile\", \"agin\", \"aging\", \"agings\", \"agio\", \"agios\", \"agism\", \"agisms\", \"agist\", \"agists\", \"aglare\", \"agleam\", \"aglee\", \"aglet\", \"aglets\", \"agley\", \"aglow\", \"agly\", \"agma\", \"agmas\", \"agnail\", \"agnate\", \"agnize\", \"ago\", \"agog\", \"agon\", \"agonal\", \"agone\", \"agones\", \"agonic\", \"agons\", \"agony\", \"agora\", \"agorae\", \"agoras\", \"agorot\", \"agouti\", \"agouty\", \"agrafe\", \"agree\", \"agreed\", \"agrees\", \"agria\", \"agrias\", \"ague\", \"agues\", \"aguish\", \"aha\", \"ahchoo\", \"ahead\", \"ahem\", \"ahimsa\", \"ahold\", \"aholds\", \"ahorse\", \"ahoy\", \"ahull\", \"aid\", \"aide\", \"aided\", \"aider\", \"aiders\", \"aides\", \"aidful\", \"aiding\", \"aidman\", \"aidmen\", \"aids\", \"aiglet\", \"aigret\", \"aikido\", \"ail\", \"ailed\", \"ailing\", \"ails\", \"aim\", \"aimed\", \"aimer\", \"aimers\", \"aimful\", \"aiming\", \"aims\", \"ain\", \"ains\", \"aioli\", \"aiolis\", \"air\", \"airbus\", \"aired\", \"airer\", \"airers\", \"airest\", \"airier\", \"airily\", \"airing\", \"airman\", \"airmen\", \"airn\", \"airns\", \"airs\", \"airt\", \"airted\", \"airth\", \"airths\", \"airts\", \"airway\", \"airy\", \"ais\", \"aisle\", \"aisled\", \"aisles\", \"ait\", \"aitch\", \"aits\", \"aiver\", \"aivers\", \"ajar\", \"ajee\", \"ajiva\", \"ajivas\", \"ajowan\", \"ajuga\", \"ajugas\", \"akee\", \"akees\", \"akela\", \"akelas\", \"akene\", \"akenes\", \"akimbo\", \"akin\", \"ala\", \"alack\", \"alae\", \"alamo\", \"alamos\", \"alan\", \"aland\", \"alands\", \"alane\", \"alang\", \"alanin\", \"alans\", \"alant\", \"alants\", \"alanyl\", \"alar\", \"alarm\", \"alarms\", \"alarum\", \"alary\", \"alas\", \"alaska\", \"alate\", \"alated\", \"alates\", \"alb\", \"alba\", \"albas\", \"albata\", \"albedo\", \"albeit\", \"albino\", \"albite\", \"albs\", \"album\", \"albums\", \"alcade\", \"alcaic\", \"alcid\", \"alcids\", \"alcove\", \"alder\", \"alders\", \"aldol\", \"aldols\", \"aldose\", \"aldrin\", \"ale\", \"alec\", \"alecs\", \"alee\", \"alef\", \"alefs\", \"alegar\", \"aleph\", \"alephs\", \"alert\", \"alerts\", \"ales\", \"alevin\", \"alexia\", \"alexin\", \"alfa\", \"alfaki\", \"alfas\", \"alga\", \"algae\", \"algal\", \"algas\", \"algid\", \"algin\", \"algins\", \"algoid\", \"algor\", \"algors\", \"algum\", \"algums\", \"alias\", \"alibi\", \"alibis\", \"alible\", \"alidad\", \"alien\", \"aliens\", \"alif\", \"alifs\", \"alight\", \"align\", \"aligns\", \"alike\", \"aline\", \"alined\", \"aliner\", \"alines\", \"aliped\", \"alist\", \"alit\", \"alive\", \"aliya\", \"aliyah\", \"aliyas\", \"aliyos\", \"aliyot\", \"alkali\", \"alkane\", \"alkene\", \"alkies\", \"alkine\", \"alkoxy\", \"alky\", \"alkyd\", \"alkyds\", \"alkyl\", \"alkyls\", \"alkyne\", \"all\", \"allay\", \"allays\", \"allee\", \"allees\", \"allege\", \"allele\", \"alley\", \"alleys\", \"allied\", \"allies\", \"allium\", \"allod\", \"allods\", \"allot\", \"allots\", \"allow\", \"allows\", \"alloy\", \"alloys\", \"alls\", \"allude\", \"allure\", \"ally\", \"allyl\", \"allyls\", \"alma\", \"almah\", \"almahs\", \"almas\", \"alme\", \"almeh\", \"almehs\", \"almes\", \"almner\", \"almond\", \"almost\", \"alms\", \"almuce\", \"almud\", \"almude\", \"almuds\", \"almug\", \"almugs\", \"alnico\", \"alodia\", \"aloe\", \"aloes\", \"aloft\", \"aloha\", \"alohas\", \"aloin\", \"aloins\", \"alone\", \"along\", \"aloof\", \"aloud\", \"alow\", \"alp\", \"alpaca\", \"alpha\", \"alphas\", \"alphyl\", \"alpine\", \"alps\", \"als\", \"alsike\", \"also\", \"alt\", \"altar\", \"altars\", \"alter\", \"alters\", \"althea\", \"altho\", \"alto\", \"altos\", \"alts\", \"aludel\", \"alula\", \"alulae\", \"alular\", \"alum\", \"alumin\", \"alumna\", \"alumni\", \"alums\", \"alvine\", \"alway\", \"always\", \"ama\", \"amadou\", \"amah\", \"amahs\", \"amain\", \"amarna\", \"amas\", \"amass\", \"amatol\", \"amaze\", \"amazed\", \"amazes\", \"amazon\", \"ambage\", \"ambari\", \"ambary\", \"ambeer\", \"amber\", \"ambers\", \"ambery\", \"ambit\", \"ambits\", \"amble\", \"ambled\", \"ambler\", \"ambles\", \"ambo\", \"ambos\", \"ambry\", \"ambush\", \"ameba\", \"amebae\", \"ameban\", \"amebas\", \"amebic\", \"ameer\", \"ameers\", \"amen\", \"amend\", \"amends\", \"amens\", \"ament\", \"aments\", \"amerce\", \"ami\", \"amia\", \"amias\", \"amice\", \"amices\", \"amici\", \"amicus\", \"amid\", \"amide\", \"amides\", \"amidic\", \"amidin\", \"amido\", \"amidol\", \"amids\", \"amidst\", \"amie\", \"amies\", \"amiga\", \"amigas\", \"amigo\", \"amigos\", \"amin\", \"amine\", \"amines\", \"aminic\", \"amino\", \"amins\", \"amir\", \"amirs\", \"amis\", \"amiss\", \"amity\", \"ammine\", \"ammino\", \"ammo\", \"ammono\", \"ammos\", \"amnia\", \"amnic\", \"amnion\", \"amoeba\", \"amok\", \"amoks\", \"amole\", \"amoles\", \"among\", \"amoral\", \"amort\", \"amount\", \"amour\", \"amours\", \"amp\", \"ampere\", \"ample\", \"ampler\", \"amply\", \"amps\", \"ampul\", \"ampule\", \"ampuls\", \"amrita\", \"amtrac\", \"amu\", \"amuck\", \"amucks\", \"amulet\", \"amus\", \"amuse\", \"amused\", \"amuser\", \"amuses\", \"amusia\", \"amyl\", \"amylic\", \"amyls\", \"amylum\", \"ana\", \"anabas\", \"anadem\", \"anal\", \"anally\", \"analog\", \"ananke\", \"anarch\", \"anas\", \"anatto\", \"anchor\", \"ancon\", \"ancone\", \"and\", \"ands\", \"ane\", \"anear\", \"anears\", \"anele\", \"aneled\", \"aneles\", \"anemia\", \"anemic\", \"anenst\", \"anent\", \"anergy\", \"anes\", \"anew\", \"anga\", \"angary\", \"angas\", \"angel\", \"angels\", \"anger\", \"angers\", \"angina\", \"angle\", \"angled\", \"angler\", \"angles\", \"angora\", \"angry\", \"angst\", \"angsts\", \"ani\", \"anil\", \"anile\", \"anilin\", \"anils\", \"anima\", \"animal\", \"animas\", \"anime\", \"animes\", \"animi\", \"animis\", \"animus\", \"anion\", \"anions\", \"anis\", \"anise\", \"anises\", \"anisic\", \"ankh\", \"ankhs\", \"ankle\", \"ankled\", \"ankles\", \"anklet\", \"ankus\", \"ankush\", \"anlace\", \"anlage\", \"anlas\", \"anna\", \"annal\", \"annals\", \"annas\", \"anneal\", \"annex\", \"annexe\", \"annoy\", \"annoys\", \"annual\", \"annul\", \"annuli\", \"annuls\", \"anoa\", \"anoas\", \"anodal\", \"anode\", \"anodes\", \"anodic\", \"anoint\", \"anole\", \"anoles\", \"anomic\", \"anomie\", \"anomy\", \"anon\", \"anonym\", \"anopia\", \"anorak\", \"anoxia\", \"anoxic\", \"ansa\", \"ansae\", \"ansate\", \"answer\", \"ant\", \"anta\", \"antae\", \"antas\", \"ante\", \"anted\", \"anteed\", \"antes\", \"anthem\", \"anther\", \"anti\", \"antiar\", \"antic\", \"antick\", \"antics\", \"anting\", \"antis\", \"antler\", \"antra\", \"antral\", \"antre\", \"antres\", \"antrum\", \"ants\", \"antsy\", \"anural\", \"anuran\", \"anuria\", \"anuric\", \"anus\", \"anuses\", \"anvil\", \"anvils\", \"any\", \"anyhow\", \"anyone\", \"anyway\", \"aorist\", \"aorta\", \"aortae\", \"aortal\", \"aortas\", \"aortic\", \"aoudad\", \"apace\", \"apache\", \"apart\", \"apathy\", \"ape\", \"apeak\", \"aped\", \"apeek\", \"aper\", \"apercu\", \"apers\", \"apery\", \"apes\", \"apex\", \"apexes\", \"aphid\", \"aphids\", \"aphis\", \"aphtha\", \"apian\", \"apiary\", \"apical\", \"apices\", \"apiece\", \"aping\", \"apish\", \"aplite\", \"aplomb\", \"apnea\", \"apneal\", \"apneas\", \"apneic\", \"apnoea\", \"apod\", \"apodal\", \"apods\", \"apogee\", \"apollo\", \"apolog\", \"aport\", \"appal\", \"appall\", \"appals\", \"appeal\", \"appear\", \"appel\", \"appels\", \"append\", \"apple\", \"apples\", \"apply\", \"appose\", \"apres\", \"apron\", \"aprons\", \"apse\", \"apses\", \"apsis\", \"apt\", \"apter\", \"aptest\", \"aptly\", \"aqua\", \"aquae\", \"aquas\", \"arabic\", \"arable\", \"arak\", \"araks\", \"aramid\", \"arb\", \"arbor\", \"arbors\", \"arbour\", \"arbs\", \"arbute\", \"arc\", \"arcade\", \"arcana\", \"arcane\", \"arced\", \"arch\", \"arched\", \"archer\", \"arches\", \"archil\", \"archly\", \"archon\", \"arcing\", \"arcked\", \"arco\", \"arcs\", \"arctic\", \"arcus\", \"ardeb\", \"ardebs\", \"ardent\", \"ardor\", \"ardors\", \"ardour\", \"are\", \"area\", \"areae\", \"areal\", \"areas\", \"areca\", \"arecas\", \"areic\", \"arena\", \"arenas\", \"areola\", \"areole\", \"ares\", \"arete\", \"aretes\", \"arf\", \"arfs\", \"argal\", \"argala\", \"argali\", \"argals\", \"argent\", \"argil\", \"argils\", \"argle\", \"argled\", \"argles\", \"argol\", \"argols\", \"argon\", \"argons\", \"argosy\", \"argot\", \"argots\", \"argue\", \"argued\", \"arguer\", \"argues\", \"argufy\", \"argus\", \"argyle\", \"argyll\", \"arhat\", \"arhats\", \"aria\", \"arias\", \"arid\", \"arider\", \"aridly\", \"ariel\", \"ariels\", \"aright\", \"aril\", \"ariled\", \"arils\", \"ariose\", \"ariosi\", \"arioso\", \"arise\", \"arisen\", \"arises\", \"arista\", \"aristo\", \"ark\", \"arkose\", \"arks\", \"arles\", \"arm\", \"armada\", \"armed\", \"armer\", \"armers\", \"armet\", \"armets\", \"armful\", \"armies\", \"arming\", \"armlet\", \"armor\", \"armors\", \"armory\", \"armour\", \"armpit\", \"arms\", \"armure\", \"army\", \"arnica\", \"aroid\", \"aroids\", \"aroint\", \"aroma\", \"aromas\", \"arose\", \"around\", \"arouse\", \"aroynt\", \"arpen\", \"arpens\", \"arpent\", \"arrack\", \"arrant\", \"arras\", \"array\", \"arrays\", \"arrear\", \"arrest\", \"arris\", \"arrive\", \"arroba\", \"arrow\", \"arrows\", \"arrowy\", \"arroyo\", \"ars\", \"arse\", \"arseno\", \"arses\", \"arshin\", \"arsine\", \"arsino\", \"arsis\", \"arson\", \"arsons\", \"art\", \"artal\", \"artel\", \"artels\", \"artery\", \"artful\", \"artier\", \"artily\", \"artist\", \"arts\", \"artsy\", \"arty\", \"arum\", \"arums\", \"arval\", \"arvo\", \"arvos\", \"aryl\", \"aryls\", \"asana\", \"asanas\", \"asarum\", \"ascend\", \"ascent\", \"asci\", \"ascot\", \"ascots\", \"ascus\", \"asdic\", \"asdics\", \"asea\", \"ash\", \"ashcan\", \"ashed\", \"ashen\", \"ashes\", \"ashier\", \"ashing\", \"ashlar\", \"ashler\", \"ashman\", \"ashmen\", \"ashore\", \"ashram\", \"ashy\", \"aside\", \"asides\", \"ask\", \"askant\", \"asked\", \"asker\", \"askers\", \"askew\", \"asking\", \"askoi\", \"askos\", \"asks\", \"aslant\", \"asleep\", \"aslope\", \"asp\", \"aspect\", \"aspen\", \"aspens\", \"asper\", \"aspers\", \"aspic\", \"aspics\", \"aspire\", \"aspis\", \"aspish\", \"asps\", \"asrama\", \"ass\", \"assai\", \"assail\", \"assais\", \"assay\", \"assays\", \"assent\", \"assert\", \"asses\", \"assess\", \"asset\", \"assets\", \"assign\", \"assist\", \"assize\", \"assoil\", \"assort\", \"assume\", \"assure\", \"aster\", \"astern\", \"asters\", \"asthma\", \"astir\", \"astony\", \"astral\", \"astray\", \"astute\", \"aswarm\", \"aswirl\", \"aswoon\", \"asyla\", \"asylum\", \"atabal\", \"ataman\", \"atap\", \"ataps\", \"atavic\", \"ataxia\", \"ataxic\", \"ataxy\", \"ate\", \"atelic\", \"ates\", \"atilt\", \"atlas\", \"atlatl\", \"atma\", \"atman\", \"atmans\", \"atmas\", \"atoll\", \"atolls\", \"atom\", \"atomic\", \"atoms\", \"atomy\", \"atonal\", \"atone\", \"atoned\", \"atoner\", \"atones\", \"atonic\", \"atony\", \"atop\", \"atopic\", \"atopy\", \"atria\", \"atrial\", \"atrip\", \"atrium\", \"att\", \"attach\", \"attack\", \"attain\", \"attar\", \"attars\", \"attend\", \"attent\", \"attest\", \"attic\", \"attics\", \"attire\", \"attorn\", \"attune\", \"atwain\", \"atween\", \"atypic\", \"aubade\", \"auburn\", \"aucuba\", \"audad\", \"audads\", \"audial\", \"audile\", \"auding\", \"audio\", \"audios\", \"audit\", \"audits\", \"augend\", \"auger\", \"augers\", \"aught\", \"aughts\", \"augite\", \"augur\", \"augurs\", \"augury\", \"august\", \"auk\", \"auklet\", \"auks\", \"auld\", \"aulder\", \"aulic\", \"aunt\", \"auntie\", \"auntly\", \"aunts\", \"aunty\", \"aura\", \"aurae\", \"aural\", \"aurar\", \"auras\", \"aurate\", \"aurei\", \"aures\", \"aureus\", \"auric\", \"auris\", \"aurist\", \"aurora\", \"aurous\", \"aurum\", \"aurums\", \"auspex\", \"ausubo\", \"auteur\", \"author\", \"autism\", \"auto\", \"autoed\", \"autos\", \"autumn\", \"auxin\", \"auxins\", \"ava\", \"avail\", \"avails\", \"avant\", \"avast\", \"avatar\", \"avaunt\", \"ave\", \"avenge\", \"avens\", \"avenue\", \"aver\", \"avers\", \"averse\", \"avert\", \"averts\", \"aves\", \"avgas\", \"avian\", \"avians\", \"aviary\", \"aviate\", \"avid\", \"avidin\", \"avidly\", \"avion\", \"avions\", \"aviso\", \"avisos\", \"avo\", \"avocet\", \"avoid\", \"avoids\", \"avos\", \"avoset\", \"avouch\", \"avow\", \"avowal\", \"avowed\", \"avower\", \"avows\", \"avulse\", \"awa\", \"await\", \"awaits\", \"awake\", \"awaked\", \"awaken\", \"awakes\", \"award\", \"awards\", \"aware\", \"awash\", \"away\", \"awe\", \"aweary\", \"awed\", \"awee\", \"aweigh\", \"aweing\", \"awes\", \"awful\", \"awhile\", \"awhirl\", \"awing\", \"awl\", \"awless\", \"awls\", \"awmous\", \"awn\", \"awned\", \"awning\", \"awns\", \"awny\", \"awoke\", \"awoken\", \"awol\", \"awols\", \"awry\", \"axal\", \"axe\", \"axed\", \"axel\", \"axels\", \"axeman\", \"axemen\", \"axenic\", \"axes\", \"axial\", \"axil\", \"axile\", \"axilla\", \"axils\", \"axing\", \"axiom\", \"axioms\", \"axion\", \"axions\", \"axis\", \"axised\", \"axises\", \"axite\", \"axites\", \"axle\", \"axled\", \"axles\", \"axlike\", \"axman\", \"axmen\", \"axon\", \"axonal\", \"axone\", \"axones\", \"axonic\", \"axons\", \"axseed\", \"ayah\", \"ayahs\", \"aye\", \"ayes\", \"ayin\", \"ayins\", \"ays\", \"azalea\", \"azan\", \"azans\", \"azide\", \"azides\", \"azido\", \"azine\", \"azines\", \"azlon\", \"azlons\", \"azo\", \"azoic\", \"azole\", \"azoles\", \"azon\", \"azonal\", \"azonic\", \"azons\", \"azote\", \"azoted\", \"azotes\", \"azoth\", \"azoths\", \"azotic\", \"azure\", \"azures\", \"azygos\", \"baa\", \"baaed\", \"baaing\", \"baal\", \"baalim\", \"baals\", \"baas\", \"baases\", \"baba\", \"babas\", \"babble\", \"babe\", \"babel\", \"babels\", \"babes\", \"babied\", \"babies\", \"babka\", \"babkas\", \"baboo\", \"babool\", \"baboon\", \"baboos\", \"babu\", \"babul\", \"babuls\", \"babus\", \"baby\", \"bacca\", \"baccae\", \"bach\", \"bached\", \"baches\", \"back\", \"backed\", \"backer\", \"backs\", \"backup\", \"bacon\", \"bacons\", \"bacula\", \"bad\", \"badass\", \"badder\", \"baddie\", \"baddy\", \"bade\", \"badge\", \"badged\", \"badger\", \"badges\", \"badly\", \"badman\", \"badmen\", \"bads\", \"baff\", \"baffed\", \"baffle\", \"baffs\", \"baffy\", \"bag\", \"bagass\", \"bagel\", \"bagels\", \"bagful\", \"bagged\", \"bagger\", \"baggie\", \"baggy\", \"bagman\", \"bagmen\", \"bagnio\", \"bags\", \"baguet\", \"bagwig\", \"bah\", \"baht\", \"bahts\", \"bail\", \"bailed\", \"bailee\", \"bailer\", \"bailey\", \"bailie\", \"bailor\", \"bails\", \"bairn\", \"bairns\", \"bait\", \"baited\", \"baiter\", \"baith\", \"baits\", \"baiza\", \"baizas\", \"baize\", \"baizes\", \"bake\", \"baked\", \"baker\", \"bakers\", \"bakery\", \"bakes\", \"baking\", \"bal\", \"balas\", \"balata\", \"balboa\", \"bald\", \"balded\", \"balder\", \"baldly\", \"balds\", \"baldy\", \"bale\", \"baled\", \"baleen\", \"baler\", \"balers\", \"bales\", \"baling\", \"balk\", \"balked\", \"balker\", \"balks\", \"balky\", \"ball\", \"ballad\", \"balled\", \"baller\", \"ballet\", \"ballon\", \"ballot\", \"balls\", \"ballsy\", \"bally\", \"balm\", \"balms\", \"balmy\", \"bals\", \"balsa\", \"balsam\", \"balsas\", \"bam\", \"bamboo\", \"bammed\", \"bams\", \"ban\", \"banal\", \"banana\", \"banco\", \"bancos\", \"band\", \"banded\", \"bander\", \"bandit\", \"bandog\", \"bands\", \"bandy\", \"bane\", \"baned\", \"banes\", \"bang\", \"banged\", \"banger\", \"bangle\", \"bangs\", \"bani\", \"banian\", \"baning\", \"banish\", \"banjax\", \"banjo\", \"banjos\", \"bank\", \"banked\", \"banker\", \"banks\", \"banned\", \"banner\", \"bannet\", \"banns\", \"bans\", \"bantam\", \"banter\", \"banty\", \"banyan\", \"banzai\", \"baobab\", \"bap\", \"baps\", \"bar\", \"barb\", \"barbal\", \"barbe\", \"barbed\", \"barbel\", \"barber\", \"barbes\", \"barbet\", \"barbs\", \"barbut\", \"bard\", \"barde\", \"barded\", \"bardes\", \"bardic\", \"bards\", \"bare\", \"bared\", \"barege\", \"barely\", \"barer\", \"bares\", \"barest\", \"barf\", \"barfed\", \"barfly\", \"barfs\", \"barge\", \"barged\", \"bargee\", \"barges\", \"barhop\", \"baric\", \"baring\", \"barite\", \"barium\", \"bark\", \"barked\", \"barker\", \"barks\", \"barky\", \"barley\", \"barlow\", \"barm\", \"barman\", \"barmen\", \"barmie\", \"barms\", \"barmy\", \"barn\", \"barns\", \"barny\", \"baron\", \"barong\", \"barons\", \"barony\", \"barque\", \"barre\", \"barred\", \"barrel\", \"barren\", \"barres\", \"barret\", \"barrio\", \"barrow\", \"bars\", \"barter\", \"barye\", \"baryes\", \"baryon\", \"baryta\", \"baryte\", \"bas\", \"basal\", \"basalt\", \"base\", \"based\", \"basely\", \"baser\", \"bases\", \"basest\", \"bash\", \"bashaw\", \"bashed\", \"basher\", \"bashes\", \"basic\", \"basics\", \"basify\", \"basil\", \"basils\", \"basin\", \"basing\", \"basins\", \"basion\", \"basis\", \"bask\", \"basked\", \"basket\", \"basks\", \"basque\", \"bass\", \"basses\", \"basset\", \"bassi\", \"bassly\", \"basso\", \"bassos\", \"bassy\", \"bast\", \"baste\", \"basted\", \"baster\", \"bastes\", \"basts\", \"bat\", \"batboy\", \"batch\", \"bate\", \"bateau\", \"bated\", \"bates\", \"bath\", \"bathe\", \"bathed\", \"bather\", \"bathes\", \"bathos\", \"baths\", \"batik\", \"batiks\", \"bating\", \"batman\", \"batmen\", \"baton\", \"batons\", \"bats\", \"batt\", \"batted\", \"batten\", \"batter\", \"battik\", \"battle\", \"batts\", \"battu\", \"battue\", \"batty\", \"baubee\", \"bauble\", \"baud\", \"bauds\", \"baulk\", \"baulks\", \"baulky\", \"bawbee\", \"bawd\", \"bawdry\", \"bawds\", \"bawdy\", \"bawl\", \"bawled\", \"bawler\", \"bawls\", \"bawtie\", \"bawty\", \"bay\", \"bayamo\", \"bayard\", \"bayed\", \"baying\", \"bayman\", \"baymen\", \"bayou\", \"bayous\", \"bays\", \"bazaar\", \"bazar\", \"bazars\", \"bazoo\", \"bazoos\", \"beach\", \"beachy\", \"beacon\", \"bead\", \"beaded\", \"beadle\", \"beads\", \"beady\", \"beagle\", \"beak\", \"beaked\", \"beaker\", \"beaks\", \"beaky\", \"beam\", \"beamed\", \"beams\", \"beamy\", \"bean\", \"beaned\", \"beanie\", \"beano\", \"beanos\", \"beans\", \"bear\", \"beard\", \"beards\", \"bearer\", \"bears\", \"beast\", \"beasts\", \"beat\", \"beaten\", \"beater\", \"beats\", \"beau\", \"beaus\", \"beaut\", \"beauts\", \"beauty\", \"beaux\", \"beaver\", \"bebop\", \"bebops\", \"becalm\", \"became\", \"becap\", \"becaps\", \"beck\", \"becked\", \"becket\", \"beckon\", \"becks\", \"beclog\", \"become\", \"bed\", \"bedamn\", \"bedaub\", \"bedbug\", \"bedded\", \"bedder\", \"bedeck\", \"bedel\", \"bedell\", \"bedels\", \"bedew\", \"bedews\", \"bedim\", \"bedims\", \"bedlam\", \"bedpan\", \"bedrid\", \"bedrug\", \"beds\", \"bedsit\", \"bedu\", \"beduin\", \"bedumb\", \"bee\", \"beebee\", \"beech\", \"beechy\", \"beef\", \"beefed\", \"beefs\", \"beefy\", \"been\", \"beep\", \"beeped\", \"beeper\", \"beeps\", \"beer\", \"beers\", \"beery\", \"bees\", \"beet\", \"beetle\", \"beets\", \"beeves\", \"beezer\", \"befall\", \"befell\", \"befit\", \"befits\", \"beflag\", \"beflea\", \"befog\", \"befogs\", \"befool\", \"before\", \"befoul\", \"befret\", \"beg\", \"begall\", \"began\", \"begat\", \"begaze\", \"beget\", \"begets\", \"beggar\", \"begged\", \"begin\", \"begins\", \"begird\", \"begirt\", \"beglad\", \"begone\", \"begot\", \"begrim\", \"begs\", \"begulf\", \"begum\", \"begums\", \"begun\", \"behalf\", \"behave\", \"behead\", \"beheld\", \"behest\", \"behind\", \"behold\", \"behoof\", \"behove\", \"behowl\", \"beige\", \"beiges\", \"beigy\", \"being\", \"beings\", \"bekiss\", \"beknot\", \"bel\", \"belady\", \"belaud\", \"belay\", \"belays\", \"belch\", \"beldam\", \"beleap\", \"belfry\", \"belga\", \"belgas\", \"belie\", \"belied\", \"belief\", \"belier\", \"belies\", \"belike\", \"belive\", \"bell\", \"belle\", \"belled\", \"belles\", \"bellow\", \"bells\", \"belly\", \"belong\", \"below\", \"belows\", \"bels\", \"belt\", \"belted\", \"belter\", \"belts\", \"beluga\", \"bema\", \"bemas\", \"bemata\", \"bemean\", \"bemire\", \"bemist\", \"bemix\", \"bemixt\", \"bemoan\", \"bemock\", \"bemuse\", \"ben\", \"bename\", \"bench\", \"bend\", \"benday\", \"bended\", \"bendee\", \"bender\", \"bends\", \"bendy\", \"bendys\", \"bene\", \"benes\", \"benign\", \"benne\", \"bennes\", \"bennet\", \"benni\", \"bennis\", \"benny\", \"bens\", \"bent\", \"bents\", \"benumb\", \"benzal\", \"benzin\", \"benzol\", \"benzyl\", \"berake\", \"berate\", \"bereft\", \"beret\", \"berets\", \"berg\", \"bergs\", \"berime\", \"berlin\", \"berm\", \"berme\", \"bermes\", \"berms\", \"berry\", \"berth\", \"bertha\", \"berths\", \"beryl\", \"beryls\", \"beseem\", \"beset\", \"besets\", \"beside\", \"besmut\", \"besnow\", \"besom\", \"besoms\", \"besot\", \"besots\", \"best\", \"bested\", \"bestir\", \"bestow\", \"bests\", \"bestud\", \"bet\", \"beta\", \"betake\", \"betas\", \"betel\", \"betels\", \"beth\", \"bethel\", \"beths\", \"betide\", \"betime\", \"betise\", \"beton\", \"betons\", \"betony\", \"betook\", \"betray\", \"bets\", \"betta\", \"bettas\", \"betted\", \"better\", \"bettor\", \"bevel\", \"bevels\", \"bevies\", \"bevor\", \"bevors\", \"bevy\", \"bewail\", \"beware\", \"beweep\", \"bewept\", \"bewig\", \"bewigs\", \"beworm\", \"bewrap\", \"bewray\", \"bey\", \"beylic\", \"beylik\", \"beyond\", \"beys\", \"bezant\", \"bezazz\", \"bezel\", \"bezels\", \"bezil\", \"bezils\", \"bezoar\", \"bhakta\", \"bhakti\", \"bhang\", \"bhangs\", \"bharal\", \"bhoot\", \"bhoots\", \"bhut\", \"bhuts\", \"biali\", \"bialis\", \"bialy\", \"bialys\", \"bias\", \"biased\", \"biases\", \"biaxal\", \"bib\", \"bibb\", \"bibbed\", \"bibber\", \"bibbs\", \"bible\", \"bibles\", \"bibs\", \"bicarb\", \"bice\", \"biceps\", \"bices\", \"bicker\", \"bicorn\", \"bicron\", \"bid\", \"bidden\", \"bidder\", \"biddy\", \"bide\", \"bided\", \"bider\", \"biders\", \"bides\", \"bidet\", \"bidets\", \"biding\", \"bids\", \"bield\", \"bields\", \"bier\", \"biers\", \"biface\", \"biff\", \"biffed\", \"biffin\", \"biffs\", \"biffy\", \"bifid\", \"biflex\", \"bifold\", \"biform\", \"big\", \"bigamy\", \"bigeye\", \"bigger\", \"biggie\", \"biggin\", \"bight\", \"bights\", \"bigly\", \"bigot\", \"bigots\", \"bigs\", \"bigwig\", \"bijou\", \"bijous\", \"bijoux\", \"bike\", \"biked\", \"biker\", \"bikers\", \"bikes\", \"bikie\", \"bikies\", \"biking\", \"bikini\", \"bilbo\", \"bilboa\", \"bilbos\", \"bile\", \"biles\", \"bilge\", \"bilged\", \"bilges\", \"bilgy\", \"bilk\", \"bilked\", \"bilker\", \"bilks\", \"bill\", \"billed\", \"biller\", \"billet\", \"billie\", \"billon\", \"billow\", \"bills\", \"billy\", \"bima\", \"bimah\", \"bimahs\", \"bimas\", \"bimbo\", \"bimbos\", \"bin\", \"binal\", \"binary\", \"binate\", \"bind\", \"binder\", \"bindi\", \"bindis\", \"bindle\", \"binds\", \"bine\", \"bines\", \"binge\", \"binged\", \"binger\", \"binges\", \"bingo\", \"bingos\", \"binit\", \"binits\", \"binned\", \"binocs\", \"bins\", \"bint\", \"bints\", \"bio\", \"biogas\", \"biogen\", \"biome\", \"biomes\", \"bionic\", \"biont\", \"bionts\", \"biopic\", \"biopsy\", \"bios\", \"biota\", \"biotas\", \"biotic\", \"biotin\", \"bipack\", \"biped\", \"bipeds\", \"bipod\", \"bipods\", \"birch\", \"bird\", \"birded\", \"birder\", \"birdie\", \"birds\", \"bireme\", \"birk\", \"birkie\", \"birks\", \"birl\", \"birle\", \"birled\", \"birler\", \"birles\", \"birls\", \"birr\", \"birred\", \"birrs\", \"birse\", \"birses\", \"birth\", \"births\", \"bis\", \"bise\", \"bisect\", \"bises\", \"bishop\", \"bisk\", \"bisks\", \"bison\", \"bisons\", \"bisque\", \"bister\", \"bistre\", \"bistro\", \"bit\", \"bitch\", \"bitchy\", \"bite\", \"biter\", \"biters\", \"bites\", \"biting\", \"bits\", \"bitsy\", \"bitt\", \"bitted\", \"bitten\", \"bitter\", \"bitts\", \"bitty\", \"biz\", \"bize\", \"bizes\", \"bizone\", \"bizzes\", \"blab\", \"blabby\", \"blabs\", \"black\", \"blacks\", \"blade\", \"bladed\", \"blades\", \"blae\", \"blah\", \"blahs\", \"blain\", \"blains\", \"blam\", \"blame\", \"blamed\", \"blamer\", \"blames\", \"blams\", \"blanch\", \"bland\", \"blank\", \"blanks\", \"blare\", \"blared\", \"blares\", \"blase\", \"blast\", \"blasts\", \"blasty\", \"blat\", \"blate\", \"blats\", \"blaw\", \"blawed\", \"blawn\", \"blaws\", \"blaze\", \"blazed\", \"blazer\", \"blazes\", \"blazon\", \"bleach\", \"bleak\", \"bleaks\", \"blear\", \"blears\", \"bleary\", \"bleat\", \"bleats\", \"bleb\", \"blebby\", \"blebs\", \"bled\", \"bleed\", \"bleeds\", \"bleep\", \"bleeps\", \"blench\", \"blend\", \"blende\", \"blends\", \"blenny\", \"blent\", \"bless\", \"blest\", \"blet\", \"blets\", \"blew\", \"blight\", \"blimey\", \"blimp\", \"blimps\", \"blimy\", \"blin\", \"blind\", \"blinds\", \"blini\", \"blinis\", \"blink\", \"blinks\", \"blintz\", \"blip\", \"blips\", \"bliss\", \"blite\", \"blites\", \"blithe\", \"blitz\", \"bloat\", \"bloats\", \"blob\", \"blobs\", \"bloc\", \"block\", \"blocks\", \"blocky\", \"blocs\", \"bloke\", \"blokes\", \"blond\", \"blonde\", \"blonds\", \"blood\", \"bloods\", \"bloody\", \"blooey\", \"blooie\", \"bloom\", \"blooms\", \"bloomy\", \"bloop\", \"bloops\", \"blot\", \"blotch\", \"blots\", \"blotto\", \"blotty\", \"blouse\", \"blousy\", \"blow\", \"blowby\", \"blowed\", \"blower\", \"blown\", \"blows\", \"blowsy\", \"blowup\", \"blowy\", \"blowzy\", \"blub\", \"blubs\", \"blue\", \"blued\", \"bluely\", \"bluer\", \"blues\", \"bluest\", \"bluesy\", \"bluet\", \"bluets\", \"bluey\", \"blueys\", \"bluff\", \"bluffs\", \"bluing\", \"bluish\", \"blume\", \"blumed\", \"blumes\", \"blunge\", \"blunt\", \"blunts\", \"blur\", \"blurb\", \"blurbs\", \"blurry\", \"blurs\", \"blurt\", \"blurts\", \"blush\", \"blype\", \"blypes\", \"boa\", \"boar\", \"board\", \"boards\", \"boars\", \"boart\", \"boarts\", \"boas\", \"boast\", \"boasts\", \"boat\", \"boated\", \"boatel\", \"boater\", \"boats\", \"bob\", \"bobbed\", \"bobber\", \"bobbin\", \"bobble\", \"bobby\", \"bobcat\", \"bobs\", \"bocce\", \"bocces\", \"bocci\", \"boccia\", \"boccie\", \"boccis\", \"boche\", \"boches\", \"bock\", \"bocks\", \"bod\", \"bode\", \"boded\", \"bodega\", \"bodes\", \"bodice\", \"bodied\", \"bodies\", \"bodily\", \"boding\", \"bodkin\", \"bods\", \"body\", \"boff\", \"boffin\", \"boffo\", \"boffos\", \"boffs\", \"bog\", \"bogan\", \"bogans\", \"bogey\", \"bogeys\", \"bogged\", \"boggle\", \"boggy\", \"bogie\", \"bogies\", \"bogle\", \"bogles\", \"bogs\", \"bogus\", \"bogy\", \"bohea\", \"boheas\", \"bohunk\", \"boil\", \"boiled\", \"boiler\", \"boils\", \"boing\", \"boite\", \"boites\", \"bola\", \"bolar\", \"bolas\", \"bold\", \"bolder\", \"boldly\", \"bolds\", \"bole\", \"bolero\", \"boles\", \"bolete\", \"boleti\", \"bolide\", \"boll\", \"bolled\", \"bollix\", \"bollox\", \"bolls\", \"bolo\", \"bolos\", \"bolshy\", \"bolson\", \"bolt\", \"bolted\", \"bolter\", \"bolts\", \"bolus\", \"bomb\", \"bombax\", \"bombe\", \"bombed\", \"bomber\", \"bombes\", \"bombs\", \"bombyx\", \"bonaci\", \"bonbon\", \"bond\", \"bonded\", \"bonder\", \"bonds\", \"bonduc\", \"bone\", \"boned\", \"boner\", \"boners\", \"bones\", \"boney\", \"bong\", \"bonged\", \"bongo\", \"bongos\", \"bongs\", \"bonier\", \"boning\", \"bonita\", \"bonito\", \"bonk\", \"bonked\", \"bonks\", \"bonne\", \"bonnes\", \"bonnet\", \"bonnie\", \"bonny\", \"bonsai\", \"bonus\", \"bony\", \"bonze\", \"bonzer\", \"bonzes\", \"boo\", \"boob\", \"boobed\", \"boobie\", \"booboo\", \"boobs\", \"booby\", \"boodle\", \"booed\", \"booger\", \"boogey\", \"boogie\", \"boogy\", \"boohoo\", \"booing\", \"book\", \"booked\", \"booker\", \"bookie\", \"books\", \"boom\", \"boomed\", \"boomer\", \"booms\", \"boomy\", \"boon\", \"boons\", \"boor\", \"boors\", \"boos\", \"boost\", \"boosts\", \"boot\", \"booted\", \"bootee\", \"booth\", \"booths\", \"bootie\", \"boots\", \"booty\", \"booze\", \"boozed\", \"boozer\", \"boozes\", \"boozy\", \"bop\", \"bopeep\", \"bopped\", \"bopper\", \"bops\", \"bora\", \"borage\", \"boral\", \"borals\", \"borane\", \"boras\", \"borate\", \"borax\", \"bordel\", \"border\", \"bore\", \"boreal\", \"bored\", \"boreen\", \"borer\", \"borers\", \"bores\", \"boric\", \"boride\", \"boring\", \"born\", \"borne\", \"boron\", \"borons\", \"borrow\", \"borsch\", \"borsht\", \"bort\", \"borts\", \"borty\", \"bortz\", \"borzoi\", \"bos\", \"bosh\", \"boshes\", \"bosk\", \"bosker\", \"bosket\", \"bosks\", \"bosky\", \"bosom\", \"bosoms\", \"bosomy\", \"boson\", \"bosons\", \"bosque\", \"boss\", \"bossed\", \"bosses\", \"bossy\", \"boston\", \"bosun\", \"bosuns\", \"bot\", \"bota\", \"botany\", \"botas\", \"botch\", \"botchy\", \"botel\", \"botels\", \"botfly\", \"both\", \"bother\", \"bothy\", \"bots\", \"bott\", \"bottle\", \"bottom\", \"botts\", \"boubou\", \"boucle\", \"bouffe\", \"bough\", \"boughs\", \"bought\", \"bougie\", \"boule\", \"boules\", \"boulle\", \"bounce\", \"bouncy\", \"bound\", \"bounds\", \"bounty\", \"bourg\", \"bourgs\", \"bourn\", \"bourne\", \"bourns\", \"bourse\", \"bouse\", \"boused\", \"bouses\", \"bousy\", \"bout\", \"bouton\", \"bouts\", \"bovid\", \"bovids\", \"bovine\", \"bow\", \"bowed\", \"bowel\", \"bowels\", \"bower\", \"bowers\", \"bowery\", \"bowfin\", \"bowing\", \"bowl\", \"bowled\", \"bowleg\", \"bowler\", \"bowls\", \"bowman\", \"bowmen\", \"bowpot\", \"bows\", \"bowse\", \"bowsed\", \"bowses\", \"bowwow\", \"bowyer\", \"box\", \"boxcar\", \"boxed\", \"boxer\", \"boxers\", \"boxes\", \"boxful\", \"boxier\", \"boxing\", \"boxy\", \"boy\", \"boyar\", \"boyard\", \"boyars\", \"boyish\", \"boyla\", \"boylas\", \"boyo\", \"boyos\", \"boys\", \"bozo\", \"bozos\", \"bra\", \"brace\", \"braced\", \"bracer\", \"braces\", \"brach\", \"brachs\", \"bract\", \"bracts\", \"brad\", \"brads\", \"brae\", \"braes\", \"brag\", \"braggy\", \"brags\", \"brahma\", \"braid\", \"braids\", \"brail\", \"brails\", \"brain\", \"brains\", \"brainy\", \"braise\", \"braize\", \"brake\", \"braked\", \"brakes\", \"braky\", \"bran\", \"branch\", \"brand\", \"brands\", \"brandy\", \"brank\", \"branks\", \"branny\", \"brans\", \"brant\", \"brants\", \"bras\", \"brash\", \"brashy\", \"brasil\", \"brass\", \"brassy\", \"brat\", \"brats\", \"bratty\", \"brava\", \"bravas\", \"brave\", \"braved\", \"braver\", \"braves\", \"bravi\", \"bravo\", \"bravos\", \"braw\", \"brawer\", \"brawl\", \"brawls\", \"brawly\", \"brawn\", \"brawns\", \"brawny\", \"braws\", \"braxy\", \"bray\", \"brayed\", \"brayer\", \"brays\", \"braza\", \"brazas\", \"braze\", \"brazed\", \"brazen\", \"brazer\", \"brazes\", \"brazil\", \"breach\", \"bread\", \"breads\", \"bready\", \"break\", \"breaks\", \"bream\", \"breams\", \"breast\", \"breath\", \"bred\", \"brede\", \"bredes\", \"bree\", \"breech\", \"breed\", \"breeds\", \"breeks\", \"brees\", \"breeze\", \"breezy\", \"bregma\", \"bren\", \"brens\", \"brent\", \"brents\", \"breve\", \"breves\", \"brevet\", \"brew\", \"brewed\", \"brewer\", \"brewis\", \"brews\", \"briar\", \"briard\", \"briars\", \"briary\", \"bribe\", \"bribed\", \"bribee\", \"briber\", \"bribes\", \"brick\", \"bricks\", \"bricky\", \"bridal\", \"bride\", \"brides\", \"bridge\", \"bridle\", \"brie\", \"brief\", \"briefs\", \"brier\", \"briers\", \"briery\", \"bries\", \"brig\", \"bright\", \"brigs\", \"brill\", \"brills\", \"brim\", \"brims\", \"brin\", \"brine\", \"brined\", \"briner\", \"brines\", \"bring\", \"brings\", \"brink\", \"brinks\", \"brins\", \"briny\", \"brio\", \"briony\", \"brios\", \"bris\", \"brisk\", \"brisks\", \"brit\", \"brits\", \"britt\", \"britts\", \"bro\", \"broach\", \"broad\", \"broads\", \"broche\", \"brock\", \"brocks\", \"brogan\", \"brogue\", \"broil\", \"broils\", \"broke\", \"broken\", \"broker\", \"brolly\", \"bromal\", \"brome\", \"bromes\", \"bromic\", \"bromid\", \"bromin\", \"bromo\", \"bromos\", \"bronc\", \"bronco\", \"broncs\", \"bronze\", \"bronzy\", \"broo\", \"brooch\", \"brood\", \"broods\", \"broody\", \"brook\", \"brooks\", \"broom\", \"brooms\", \"broomy\", \"broos\", \"bros\", \"brose\", \"broses\", \"brosy\", \"broth\", \"broths\", \"brothy\", \"brow\", \"browed\", \"brown\", \"browns\", \"browny\", \"brows\", \"browse\", \"brr\", \"brrr\", \"brucin\", \"brugh\", \"brughs\", \"bruin\", \"bruins\", \"bruise\", \"bruit\", \"bruits\", \"brulot\", \"brumal\", \"brumby\", \"brume\", \"brumes\", \"brunch\", \"brunet\", \"brunt\", \"brunts\", \"brush\", \"brushy\", \"brusk\", \"brut\", \"brutal\", \"brute\", \"bruted\", \"brutes\", \"bryony\", \"bub\", \"bubal\", \"bubale\", \"bubals\", \"bubble\", \"bubbly\", \"bubby\", \"bubo\", \"buboed\", \"buboes\", \"bubs\", \"buccal\", \"buck\", \"bucked\", \"bucker\", \"bucket\", \"buckle\", \"bucko\", \"buckra\", \"bucks\", \"bud\", \"budded\", \"budder\", \"buddle\", \"buddy\", \"budge\", \"budged\", \"budger\", \"budges\", \"budget\", \"budgie\", \"buds\", \"buff\", \"buffed\", \"buffer\", \"buffet\", \"buffi\", \"buffo\", \"buffos\", \"buffs\", \"buffy\", \"bug\", \"bugeye\", \"bugged\", \"bugger\", \"buggy\", \"bugle\", \"bugled\", \"bugler\", \"bugles\", \"bugs\", \"bugsha\", \"buhl\", \"buhls\", \"buhr\", \"buhrs\", \"build\", \"builds\", \"built\", \"bulb\", \"bulbar\", \"bulbed\", \"bulbel\", \"bulbil\", \"bulbs\", \"bulbul\", \"bulge\", \"bulged\", \"bulger\", \"bulges\", \"bulgur\", \"bulgy\", \"bulk\", \"bulked\", \"bulks\", \"bulky\", \"bull\", \"bulla\", \"bullae\", \"bulled\", \"bullet\", \"bulls\", \"bully\", \"bum\", \"bumble\", \"bumf\", \"bumfs\", \"bumkin\", \"bummed\", \"bummer\", \"bump\", \"bumped\", \"bumper\", \"bumph\", \"bumphs\", \"bumps\", \"bumpy\", \"bums\", \"bun\", \"bunch\", \"bunchy\", \"bunco\", \"buncos\", \"bund\", \"bundle\", \"bunds\", \"bundt\", \"bundts\", \"bung\", \"bunged\", \"bungee\", \"bungle\", \"bungs\", \"bunion\", \"bunk\", \"bunked\", \"bunker\", \"bunko\", \"bunkos\", \"bunks\", \"bunkum\", \"bunn\", \"bunns\", \"bunny\", \"buns\", \"bunt\", \"bunted\", \"bunter\", \"bunts\", \"bunya\", \"bunyas\", \"buoy\", \"buoyed\", \"buoys\", \"buppie\", \"buqsha\", \"bur\", \"bura\", \"buran\", \"burans\", \"buras\", \"burble\", \"burbly\", \"burbot\", \"burbs\", \"burd\", \"burden\", \"burdie\", \"burds\", \"bureau\", \"buret\", \"burets\", \"burg\", \"burgee\", \"burger\", \"burgh\", \"burghs\", \"burgle\", \"burgoo\", \"burgs\", \"burial\", \"buried\", \"burier\", \"buries\", \"burin\", \"burins\", \"burke\", \"burked\", \"burker\", \"burkes\", \"burl\", \"burlap\", \"burled\", \"burler\", \"burley\", \"burls\", \"burly\", \"burn\", \"burned\", \"burner\", \"burnet\", \"burnie\", \"burns\", \"burnt\", \"burp\", \"burped\", \"burps\", \"burr\", \"burred\", \"burrer\", \"burro\", \"burros\", \"burrow\", \"burrs\", \"burry\", \"burs\", \"bursa\", \"bursae\", \"bursal\", \"bursar\", \"bursas\", \"burse\", \"burses\", \"burst\", \"bursts\", \"burton\", \"bury\", \"bus\", \"busbar\", \"busboy\", \"busby\", \"bused\", \"buses\", \"bush\", \"bushed\", \"bushel\", \"busher\", \"bushes\", \"bushwa\", \"bushy\", \"busied\", \"busier\", \"busies\", \"busily\", \"busing\", \"busk\", \"busked\", \"busker\", \"buskin\", \"busks\", \"busman\", \"busmen\", \"buss\", \"bussed\", \"busses\", \"bust\", \"busted\", \"buster\", \"bustic\", \"bustle\", \"busts\", \"busty\", \"busy\", \"but\", \"butane\", \"butch\", \"bute\", \"butene\", \"buteo\", \"buteos\", \"butle\", \"butled\", \"butler\", \"butles\", \"buts\", \"butt\", \"butte\", \"butted\", \"butter\", \"buttes\", \"button\", \"butts\", \"butty\", \"butut\", \"bututs\", \"butyl\", \"butyls\", \"buxom\", \"buy\", \"buyer\", \"buyers\", \"buying\", \"buyout\", \"buys\", \"buzuki\", \"buzz\", \"buzzed\", \"buzzer\", \"buzzes\", \"bwana\", \"bwanas\", \"bye\", \"byelaw\", \"byes\", \"bygone\", \"bylaw\", \"bylaws\", \"byline\", \"byname\", \"bypass\", \"bypast\", \"bypath\", \"byplay\", \"byre\", \"byres\", \"byrl\", \"byrled\", \"byrls\", \"byrnie\", \"byroad\", \"bys\", \"byssi\", \"byssus\", \"bytalk\", \"byte\", \"bytes\", \"byway\", \"byways\", \"byword\", \"bywork\", \"byzant\", \"cab\", \"cabal\", \"cabala\", \"cabals\", \"cabana\", \"cabbed\", \"cabbie\", \"cabby\", \"caber\", \"cabers\", \"cabin\", \"cabins\", \"cable\", \"cabled\", \"cables\", \"cablet\", \"cabman\", \"cabmen\", \"cabob\", \"cabobs\", \"cabs\", \"caca\", \"cacao\", \"cacaos\", \"cacas\", \"cache\", \"cached\", \"caches\", \"cachet\", \"cachou\", \"cackle\", \"cacti\", \"cactus\", \"cad\", \"caddie\", \"caddis\", \"caddy\", \"cade\", \"cadent\", \"cades\", \"cadet\", \"cadets\", \"cadge\", \"cadged\", \"cadger\", \"cadges\", \"cadgy\", \"cadi\", \"cadis\", \"cadmic\", \"cadre\", \"cadres\", \"cads\", \"caeca\", \"caecal\", \"caecum\", \"caeoma\", \"caesar\", \"cafe\", \"cafes\", \"caff\", \"caffs\", \"caftan\", \"cage\", \"caged\", \"cager\", \"cagers\", \"cages\", \"cagey\", \"cagier\", \"cagily\", \"caging\", \"cagy\", \"cahier\", \"cahoot\", \"cahow\", \"cahows\", \"caid\", \"caids\", \"caiman\", \"cain\", \"cains\", \"caique\", \"caird\", \"cairds\", \"cairn\", \"cairns\", \"cairny\", \"cajole\", \"cajon\", \"cake\", \"caked\", \"cakes\", \"cakey\", \"cakier\", \"caking\", \"caky\", \"calami\", \"calash\", \"calcar\", \"calces\", \"calcic\", \"calesa\", \"calf\", \"calfs\", \"calico\", \"calif\", \"califs\", \"caliph\", \"calix\", \"calk\", \"calked\", \"calker\", \"calkin\", \"calks\", \"call\", \"calla\", \"callan\", \"callas\", \"called\", \"caller\", \"callet\", \"callow\", \"calls\", \"callus\", \"calm\", \"calmed\", \"calmer\", \"calmly\", \"calms\", \"calo\", \"calory\", \"calpac\", \"calque\", \"calve\", \"calved\", \"calves\", \"calx\", \"calxes\", \"calyx\", \"cam\", \"camail\", \"camas\", \"camass\", \"camber\", \"cambia\", \"came\", \"camel\", \"camels\", \"cameo\", \"cameos\", \"camera\", \"cames\", \"camion\", \"camisa\", \"camise\", \"camlet\", \"camp\", \"camped\", \"camper\", \"campi\", \"campo\", \"campos\", \"camps\", \"campus\", \"campy\", \"cams\", \"can\", \"canal\", \"canals\", \"canape\", \"canard\", \"canary\", \"cancan\", \"cancel\", \"cancer\", \"cancha\", \"candid\", \"candle\", \"candor\", \"candy\", \"cane\", \"caned\", \"caner\", \"caners\", \"canes\", \"canful\", \"cangue\", \"canid\", \"canids\", \"canine\", \"caning\", \"canker\", \"canna\", \"cannas\", \"canned\", \"cannel\", \"canner\", \"cannie\", \"cannon\", \"cannot\", \"canny\", \"canoe\", \"canoed\", \"canoes\", \"canola\", \"canon\", \"canons\", \"canopy\", \"cans\", \"canso\", \"cansos\", \"canst\", \"cant\", \"canted\", \"canter\", \"canthi\", \"cantic\", \"cantle\", \"canto\", \"canton\", \"cantor\", \"cantos\", \"cants\", \"cantus\", \"canty\", \"canula\", \"canvas\", \"canyon\", \"cap\", \"cape\", \"caped\", \"caper\", \"capers\", \"capes\", \"capful\", \"caph\", \"caphs\", \"capias\", \"capita\", \"caplet\", \"caplin\", \"capo\", \"capon\", \"capons\", \"capos\", \"capote\", \"capped\", \"capper\", \"capric\", \"capris\", \"caps\", \"capsid\", \"captan\", \"captor\", \"caput\", \"car\", \"carack\", \"carafe\", \"carat\", \"carate\", \"carats\", \"carb\", \"carbo\", \"carbon\", \"carbos\", \"carboy\", \"carbs\", \"carcel\", \"card\", \"carded\", \"carder\", \"cardia\", \"cards\", \"care\", \"cared\", \"careen\", \"career\", \"carer\", \"carers\", \"cares\", \"caress\", \"caret\", \"carets\", \"carex\", \"carful\", \"cargo\", \"cargos\", \"carhop\", \"caribe\", \"caried\", \"caries\", \"carina\", \"caring\", \"cark\", \"carked\", \"carks\", \"carl\", \"carle\", \"carles\", \"carlin\", \"carls\", \"carman\", \"carmen\", \"carn\", \"carnal\", \"carnet\", \"carney\", \"carnie\", \"carns\", \"carny\", \"carob\", \"carobs\", \"caroch\", \"carol\", \"caroli\", \"carols\", \"carom\", \"caroms\", \"carp\", \"carpal\", \"carped\", \"carpel\", \"carper\", \"carpet\", \"carpi\", \"carps\", \"carpus\", \"carr\", \"carrel\", \"carrom\", \"carrot\", \"carrs\", \"carry\", \"cars\", \"carse\", \"carses\", \"cart\", \"carte\", \"carted\", \"cartel\", \"carter\", \"cartes\", \"carton\", \"cartop\", \"carts\", \"carve\", \"carved\", \"carvel\", \"carven\", \"carver\", \"carves\", \"casa\", \"casaba\", \"casas\", \"casava\", \"casbah\", \"case\", \"cased\", \"casefy\", \"caseic\", \"casein\", \"casern\", \"cases\", \"cash\", \"cashaw\", \"cashed\", \"cashes\", \"cashew\", \"cashoo\", \"casing\", \"casini\", \"casino\", \"casita\", \"cask\", \"casked\", \"casket\", \"casks\", \"casky\", \"casque\", \"cassia\", \"cassis\", \"cast\", \"caste\", \"caster\", \"castes\", \"castle\", \"castor\", \"casts\", \"casual\", \"casus\", \"cat\", \"catalo\", \"catch\", \"catchy\", \"cate\", \"catena\", \"cater\", \"caters\", \"cates\", \"catgut\", \"cation\", \"catkin\", \"catlin\", \"catnap\", \"catnip\", \"cats\", \"catsup\", \"catted\", \"cattie\", \"cattle\", \"catty\", \"caucus\", \"caudad\", \"caudal\", \"caudex\", \"caudle\", \"caught\", \"caul\", \"cauld\", \"caulds\", \"caules\", \"caulis\", \"caulk\", \"caulks\", \"cauls\", \"causal\", \"cause\", \"caused\", \"causer\", \"causes\", \"causey\", \"cave\", \"caveat\", \"caved\", \"caver\", \"cavern\", \"cavers\", \"caves\", \"caviar\", \"cavie\", \"cavies\", \"cavil\", \"cavils\", \"caving\", \"cavity\", \"cavort\", \"cavy\", \"caw\", \"cawed\", \"cawing\", \"caws\", \"cay\", \"cayman\", \"cays\", \"cayuse\", \"cease\", \"ceased\", \"ceases\", \"cebid\", \"cebids\", \"ceboid\", \"ceca\", \"cecal\", \"cecum\", \"cedar\", \"cedarn\", \"cedars\", \"cede\", \"ceded\", \"ceder\", \"ceders\", \"cedes\", \"cedi\", \"ceding\", \"cedis\", \"cedula\", \"cee\", \"cees\", \"ceiba\", \"ceibas\", \"ceil\", \"ceiled\", \"ceiler\", \"ceils\", \"cel\", \"celeb\", \"celebs\", \"celery\", \"celiac\", \"cell\", \"cella\", \"cellae\", \"cellar\", \"celled\", \"celli\", \"cello\", \"cellos\", \"cells\", \"celom\", \"celoms\", \"cels\", \"celt\", \"celts\", \"cement\", \"cenote\", \"cense\", \"censed\", \"censer\", \"censes\", \"censor\", \"census\", \"cent\", \"cental\", \"center\", \"cento\", \"centos\", \"centra\", \"centre\", \"cents\", \"centum\", \"ceorl\", \"ceorls\", \"cep\", \"cepe\", \"cepes\", \"ceps\", \"cerate\", \"cerci\", \"cercis\", \"cercus\", \"cere\", \"cereal\", \"cered\", \"ceres\", \"cereus\", \"ceria\", \"cerias\", \"ceric\", \"cering\", \"ceriph\", \"cerise\", \"cerite\", \"cerium\", \"cermet\", \"cero\", \"ceros\", \"cerous\", \"certes\", \"ceruse\", \"cervid\", \"cervix\", \"cesium\", \"cess\", \"cessed\", \"cesses\", \"cesta\", \"cestas\", \"cesti\", \"cestoi\", \"cestos\", \"cestus\", \"cesura\", \"cetane\", \"cete\", \"cetes\", \"chabuk\", \"chacma\", \"chad\", \"chadar\", \"chador\", \"chadri\", \"chads\", \"chaeta\", \"chafe\", \"chafed\", \"chafer\", \"chafes\", \"chaff\", \"chaffs\", \"chaffy\", \"chain\", \"chaine\", \"chains\", \"chair\", \"chairs\", \"chaise\", \"chakra\", \"chalah\", \"chaleh\", \"chalet\", \"chalk\", \"chalks\", \"chalky\", \"challa\", \"chally\", \"chalot\", \"cham\", \"chammy\", \"champ\", \"champs\", \"champy\", \"chams\", \"chance\", \"chancy\", \"chang\", \"change\", \"changs\", \"chant\", \"chants\", \"chanty\", \"chao\", \"chaos\", \"chap\", \"chape\", \"chapel\", \"chapes\", \"chaps\", \"chapt\", \"char\", \"charas\", \"chard\", \"chards\", \"chare\", \"chared\", \"chares\", \"charge\", \"chark\", \"charka\", \"charks\", \"charm\", \"charms\", \"charr\", \"charro\", \"charrs\", \"charry\", \"chars\", \"chart\", \"charts\", \"chary\", \"chase\", \"chased\", \"chaser\", \"chases\", \"chasm\", \"chasms\", \"chasmy\", \"chasse\", \"chaste\", \"chat\", \"chats\", \"chatty\", \"chaunt\", \"chaw\", \"chawed\", \"chawer\", \"chaws\", \"chay\", \"chays\", \"chazan\", \"cheap\", \"cheapo\", \"cheaps\", \"cheat\", \"cheats\", \"chebec\", \"check\", \"checks\", \"cheder\", \"cheek\", \"cheeks\", \"cheeky\", \"cheep\", \"cheeps\", \"cheer\", \"cheero\", \"cheers\", \"cheery\", \"cheese\", \"cheesy\", \"chef\", \"chefs\", \"chegoe\", \"chela\", \"chelae\", \"chelas\", \"chemic\", \"chemo\", \"chemos\", \"cheque\", \"cherry\", \"chert\", \"cherts\", \"cherty\", \"cherub\", \"chess\", \"chest\", \"chests\", \"chesty\", \"chetah\", \"cheth\", \"cheths\", \"chevre\", \"chevy\", \"chew\", \"chewed\", \"chewer\", \"chews\", \"chewy\", \"chez\", \"chi\", \"chia\", \"chiao\", \"chias\", \"chiasm\", \"chiaus\", \"chic\", \"chicer\", \"chichi\", \"chick\", \"chicks\", \"chicle\", \"chicly\", \"chico\", \"chicos\", \"chics\", \"chid\", \"chide\", \"chided\", \"chider\", \"chides\", \"chief\", \"chiefs\", \"chiel\", \"chield\", \"chiels\", \"chigoe\", \"child\", \"childe\", \"chile\", \"chiles\", \"chili\", \"chill\", \"chilli\", \"chills\", \"chilly\", \"chimar\", \"chimb\", \"chimbs\", \"chime\", \"chimed\", \"chimer\", \"chimes\", \"chimla\", \"chimp\", \"chimps\", \"chin\", \"china\", \"chinas\", \"chinch\", \"chine\", \"chined\", \"chines\", \"chink\", \"chinks\", \"chinky\", \"chino\", \"chinos\", \"chins\", \"chints\", \"chintz\", \"chip\", \"chippy\", \"chips\", \"chiral\", \"chirk\", \"chirks\", \"chirm\", \"chirms\", \"chiro\", \"chiros\", \"chirp\", \"chirps\", \"chirpy\", \"chirr\", \"chirre\", \"chirrs\", \"chis\", \"chisel\", \"chit\", \"chital\", \"chitin\", \"chiton\", \"chits\", \"chitty\", \"chive\", \"chives\", \"chivvy\", \"chivy\", \"choana\", \"chock\", \"chocks\", \"choice\", \"choir\", \"choirs\", \"choke\", \"choked\", \"choker\", \"chokes\", \"chokey\", \"choky\", \"choler\", \"cholla\", \"cholo\", \"cholos\", \"chomp\", \"chomps\", \"chon\", \"chook\", \"chooks\", \"choose\", \"choosy\", \"chop\", \"chopin\", \"choppy\", \"chops\", \"choral\", \"chord\", \"chords\", \"chore\", \"chorea\", \"chored\", \"chores\", \"choric\", \"chorus\", \"chose\", \"chosen\", \"choses\", \"chott\", \"chotts\", \"chough\", \"chouse\", \"choush\", \"chow\", \"chowed\", \"chows\", \"chowse\", \"chrism\", \"chroma\", \"chrome\", \"chromo\", \"chub\", \"chubby\", \"chubs\", \"chuck\", \"chucks\", \"chucky\", \"chufa\", \"chufas\", \"chuff\", \"chuffs\", \"chuffy\", \"chug\", \"chugs\", \"chukar\", \"chukka\", \"chum\", \"chummy\", \"chump\", \"chumps\", \"chums\", \"chunk\", \"chunks\", \"chunky\", \"church\", \"churl\", \"churls\", \"churn\", \"churns\", \"churr\", \"churrs\", \"chute\", \"chuted\", \"chutes\", \"chyle\", \"chyles\", \"chyme\", \"chymes\", \"chymic\", \"ciao\", \"cibol\", \"cibols\", \"cicada\", \"cicala\", \"cicale\", \"cicely\", \"cicero\", \"cider\", \"ciders\", \"cigar\", \"cigars\", \"cilia\", \"cilice\", \"cilium\", \"cimex\", \"cinch\", \"cinder\", \"cine\", \"cinema\", \"cineol\", \"cines\", \"cinque\", \"cion\", \"cions\", \"cipher\", \"circa\", \"circle\", \"circus\", \"cire\", \"cires\", \"cirque\", \"cirri\", \"cirrus\", \"cis\", \"cisco\", \"ciscos\", \"cissy\", \"cist\", \"cists\", \"cistus\", \"cite\", \"cited\", \"citer\", \"citers\", \"cites\", \"cither\", \"citied\", \"cities\", \"citify\", \"citing\", \"citola\", \"citole\", \"citral\", \"citric\", \"citrin\", \"citron\", \"citrus\", \"city\", \"civet\", \"civets\", \"civic\", \"civics\", \"civie\", \"civies\", \"civil\", \"civism\", \"civvy\", \"clach\", \"clachs\", \"clack\", \"clacks\", \"clad\", \"clade\", \"clades\", \"clads\", \"clag\", \"clags\", \"claim\", \"claims\", \"clam\", \"clammy\", \"clamor\", \"clamp\", \"clamps\", \"clams\", \"clan\", \"clang\", \"clangs\", \"clank\", \"clanks\", \"clans\", \"clap\", \"claps\", \"clapt\", \"claque\", \"claret\", \"claro\", \"claros\", \"clary\", \"clash\", \"clasp\", \"clasps\", \"claspt\", \"class\", \"classy\", \"clast\", \"clasts\", \"clause\", \"clave\", \"claver\", \"claves\", \"clavi\", \"clavus\", \"claw\", \"clawed\", \"clawer\", \"claws\", \"claxon\", \"clay\", \"clayed\", \"clayey\", \"clays\", \"clean\", \"cleans\", \"clear\", \"clears\", \"cleat\", \"cleats\", \"cleave\", \"cleek\", \"cleeks\", \"clef\", \"clefs\", \"cleft\", \"clefts\", \"clench\", \"cleome\", \"clepe\", \"cleped\", \"clepes\", \"clept\", \"clergy\", \"cleric\", \"clerid\", \"clerk\", \"clerks\", \"clever\", \"clevis\", \"clew\", \"clewed\", \"clews\", \"cliche\", \"click\", \"clicks\", \"client\", \"cliff\", \"cliffs\", \"cliffy\", \"clift\", \"clifts\", \"climax\", \"climb\", \"climbs\", \"clime\", \"climes\", \"clinal\", \"clinch\", \"cline\", \"clines\", \"cling\", \"clings\", \"clingy\", \"clinic\", \"clink\", \"clinks\", \"clip\", \"clips\", \"clipt\", \"clique\", \"cliquy\", \"clitic\", \"clivia\", \"cloaca\", \"cloak\", \"cloaks\", \"cloche\", \"clock\", \"clocks\", \"clod\", \"cloddy\", \"clods\", \"clog\", \"cloggy\", \"clogs\", \"clomb\", \"clomp\", \"clomps\", \"clon\", \"clonal\", \"clone\", \"cloned\", \"cloner\", \"clones\", \"clonic\", \"clonk\", \"clonks\", \"clons\", \"clonus\", \"cloot\", \"cloots\", \"clop\", \"clops\", \"cloque\", \"close\", \"closed\", \"closer\", \"closes\", \"closet\", \"clot\", \"cloth\", \"clothe\", \"cloths\", \"clots\", \"clotty\", \"cloud\", \"clouds\", \"cloudy\", \"clough\", \"clour\", \"clours\", \"clout\", \"clouts\", \"clove\", \"cloven\", \"clover\", \"cloves\", \"clown\", \"clowns\", \"cloy\", \"cloyed\", \"cloys\", \"cloze\", \"clozes\", \"club\", \"clubby\", \"clubs\", \"cluck\", \"clucks\", \"clue\", \"clued\", \"clues\", \"cluing\", \"clump\", \"clumps\", \"clumpy\", \"clumsy\", \"clung\", \"clunk\", \"clunks\", \"clunky\", \"clutch\", \"clypei\", \"coach\", \"coact\", \"coacts\", \"coal\", \"coala\", \"coalas\", \"coaled\", \"coaler\", \"coals\", \"coaly\", \"coapt\", \"coapts\", \"coarse\", \"coast\", \"coasts\", \"coat\", \"coated\", \"coatee\", \"coater\", \"coati\", \"coatis\", \"coats\", \"coax\", \"coaxal\", \"coaxed\", \"coaxer\", \"coaxes\", \"cob\", \"cobalt\", \"cobb\", \"cobber\", \"cobble\", \"cobbs\", \"cobby\", \"cobia\", \"cobias\", \"coble\", \"cobles\", \"cobnut\", \"cobra\", \"cobras\", \"cobs\", \"cobweb\", \"coca\", \"cocain\", \"cocas\", \"coccal\", \"cocci\", \"coccic\", \"coccid\", \"coccus\", \"coccyx\", \"cochin\", \"cock\", \"cocked\", \"cocker\", \"cockle\", \"cocks\", \"cockup\", \"cocky\", \"coco\", \"cocoa\", \"cocoas\", \"cocoon\", \"cocos\", \"cod\", \"coda\", \"codas\", \"codded\", \"codder\", \"coddle\", \"code\", \"codec\", \"codecs\", \"coded\", \"codeia\", \"codein\", \"coden\", \"codens\", \"coder\", \"coders\", \"codes\", \"codex\", \"codger\", \"codify\", \"coding\", \"codlin\", \"codon\", \"codons\", \"cods\", \"coed\", \"coedit\", \"coeds\", \"coelom\", \"coempt\", \"coerce\", \"coeval\", \"coff\", \"coffee\", \"coffer\", \"coffin\", \"coffle\", \"coffs\", \"coft\", \"cog\", \"cogent\", \"cogged\", \"cogito\", \"cognac\", \"cogon\", \"cogons\", \"cogs\", \"cogway\", \"cohead\", \"coheir\", \"cohere\", \"coho\", \"cohog\", \"cohogs\", \"cohort\", \"cohos\", \"cohosh\", \"cohost\", \"cohune\", \"coif\", \"coifed\", \"coiffe\", \"coifs\", \"coign\", \"coigne\", \"coigns\", \"coil\", \"coiled\", \"coiler\", \"coils\", \"coin\", \"coined\", \"coiner\", \"coins\", \"coir\", \"coirs\", \"coital\", \"coitus\", \"cojoin\", \"coke\", \"coked\", \"cokes\", \"coking\", \"col\", \"cola\", \"colas\", \"cold\", \"colder\", \"coldly\", \"colds\", \"cole\", \"colead\", \"coled\", \"coles\", \"coleus\", \"colic\", \"colics\", \"colies\", \"colin\", \"colins\", \"collar\", \"collet\", \"collie\", \"collop\", \"colly\", \"colobi\", \"colog\", \"cologs\", \"colon\", \"colone\", \"coloni\", \"colons\", \"colony\", \"color\", \"colors\", \"colour\", \"cols\", \"colt\", \"colter\", \"colts\", \"colugo\", \"column\", \"colure\", \"coly\", \"colza\", \"colzas\", \"coma\", \"comade\", \"comae\", \"comake\", \"comal\", \"comas\", \"comate\", \"comb\", \"combat\", \"combe\", \"combed\", \"comber\", \"combes\", \"combo\", \"combos\", \"combs\", \"come\", \"comedo\", \"comedy\", \"comely\", \"comer\", \"comers\", \"comes\", \"comet\", \"cometh\", \"comets\", \"comfit\", \"comfy\", \"comic\", \"comics\", \"coming\", \"comity\", \"comix\", \"comma\", \"commas\", \"commie\", \"commit\", \"commix\", \"common\", \"commy\", \"comose\", \"comous\", \"comp\", \"comped\", \"compel\", \"comply\", \"compo\", \"compos\", \"comps\", \"compt\", \"compts\", \"comte\", \"comtes\", \"con\", \"conch\", \"concha\", \"conchs\", \"conchy\", \"concur\", \"condo\", \"condom\", \"condor\", \"condos\", \"cone\", \"coned\", \"cones\", \"coney\", \"coneys\", \"confab\", \"confer\", \"confit\", \"conga\", \"congas\", \"conge\", \"congee\", \"conger\", \"conges\", \"congii\", \"congo\", \"congos\", \"congou\", \"coni\", \"conic\", \"conics\", \"conies\", \"conin\", \"conine\", \"coning\", \"conins\", \"conium\", \"conk\", \"conked\", \"conker\", \"conks\", \"conky\", \"conn\", \"conned\", \"conner\", \"conns\", \"conoid\", \"cons\", \"consol\", \"consul\", \"conte\", \"contes\", \"conto\", \"contos\", \"contra\", \"conus\", \"convex\", \"convey\", \"convoy\", \"cony\", \"coo\", \"cooch\", \"coocoo\", \"cooed\", \"cooee\", \"cooeed\", \"cooees\", \"cooer\", \"cooers\", \"cooey\", \"cooeys\", \"coof\", \"coofs\", \"cooing\", \"cook\", \"cooked\", \"cooker\", \"cookey\", \"cookie\", \"cooks\", \"cooky\", \"cool\", \"cooled\", \"cooler\", \"coolie\", \"coolly\", \"cools\", \"coolth\", \"cooly\", \"coomb\", \"coombe\", \"coombs\", \"coon\", \"coons\", \"coop\", \"cooped\", \"cooper\", \"coops\", \"coopt\", \"coopts\", \"coos\", \"coot\", \"cooter\", \"cootie\", \"coots\", \"cop\", \"copal\", \"copalm\", \"copals\", \"cope\", \"copeck\", \"coped\", \"copen\", \"copens\", \"coper\", \"copers\", \"copes\", \"copied\", \"copier\", \"copies\", \"coping\", \"coplot\", \"copped\", \"copper\", \"coppra\", \"copra\", \"coprah\", \"copras\", \"cops\", \"copse\", \"copses\", \"copter\", \"copula\", \"copy\", \"coquet\", \"cor\", \"coral\", \"corals\", \"corban\", \"corbel\", \"corbie\", \"corby\", \"cord\", \"corded\", \"corder\", \"cordon\", \"cords\", \"core\", \"cored\", \"corer\", \"corers\", \"cores\", \"corf\", \"corgi\", \"corgis\", \"coria\", \"coring\", \"corium\", \"cork\", \"corked\", \"corker\", \"corks\", \"corky\", \"corm\", \"cormel\", \"corms\", \"corn\", \"cornea\", \"corned\", \"cornel\", \"corner\", \"cornet\", \"corns\", \"cornu\", \"cornua\", \"cornus\", \"corny\", \"corody\", \"corona\", \"corps\", \"corpse\", \"corpus\", \"corral\", \"corrie\", \"corsac\", \"corse\", \"corses\", \"corset\", \"cortex\", \"cortin\", \"corvee\", \"corves\", \"corvet\", \"cory\", \"corymb\", \"coryza\", \"cos\", \"cosec\", \"cosecs\", \"coses\", \"coset\", \"cosets\", \"cosey\", \"coseys\", \"cosh\", \"coshed\", \"cosher\", \"coshes\", \"cosie\", \"cosied\", \"cosier\", \"cosies\", \"cosign\", \"cosily\", \"cosine\", \"cosmic\", \"cosmos\", \"coss\", \"cosset\", \"cost\", \"costa\", \"costae\", \"costal\", \"costar\", \"costed\", \"coster\", \"costly\", \"costs\", \"cosy\", \"cot\", \"cotan\", \"cotans\", \"cote\", \"coteau\", \"coted\", \"cotes\", \"coting\", \"cots\", \"cotta\", \"cottae\", \"cottar\", \"cottas\", \"cotter\", \"cotton\", \"cotype\", \"couch\", \"coude\", \"cougar\", \"cough\", \"coughs\", \"could\", \"coulee\", \"coulis\", \"count\", \"counts\", \"county\", \"coup\", \"coupe\", \"couped\", \"coupes\", \"couple\", \"coupon\", \"coups\", \"course\", \"court\", \"courts\", \"cousin\", \"couter\", \"couth\", \"couths\", \"cove\", \"coved\", \"coven\", \"covens\", \"cover\", \"covers\", \"covert\", \"coves\", \"covet\", \"covets\", \"covey\", \"coveys\", \"covin\", \"coving\", \"covins\", \"cow\", \"cowage\", \"coward\", \"cowboy\", \"cowed\", \"cower\", \"cowers\", \"cowier\", \"cowing\", \"cowl\", \"cowled\", \"cowls\", \"cowman\", \"cowmen\", \"cowpat\", \"cowpea\", \"cowpie\", \"cowpox\", \"cowrie\", \"cowry\", \"cows\", \"cowy\", \"cox\", \"coxa\", \"coxae\", \"coxal\", \"coxed\", \"coxes\", \"coxing\", \"coy\", \"coydog\", \"coyed\", \"coyer\", \"coyest\", \"coying\", \"coyish\", \"coyly\", \"coyote\", \"coypou\", \"coypu\", \"coypus\", \"coys\", \"coz\", \"cozen\", \"cozens\", \"cozes\", \"cozey\", \"cozeys\", \"cozie\", \"cozied\", \"cozier\", \"cozies\", \"cozily\", \"cozy\", \"cozzes\", \"craal\", \"craals\", \"crab\", \"crabby\", \"crabs\", \"crack\", \"cracks\", \"cracky\", \"cradle\", \"craft\", \"crafts\", \"crafty\", \"crag\", \"craggy\", \"crags\", \"crake\", \"crakes\", \"cram\", \"crambe\", \"crambo\", \"cramp\", \"cramps\", \"crams\", \"cranch\", \"crane\", \"craned\", \"cranes\", \"crania\", \"crank\", \"cranks\", \"cranky\", \"cranny\", \"crap\", \"crape\", \"craped\", \"crapes\", \"crappy\", \"craps\", \"crases\", \"crash\", \"crasis\", \"crass\", \"cratch\", \"crate\", \"crated\", \"crater\", \"crates\", \"craton\", \"cravat\", \"crave\", \"craved\", \"craven\", \"craver\", \"craves\", \"craw\", \"crawl\", \"crawls\", \"crawly\", \"craws\", \"crayon\", \"craze\", \"crazed\", \"crazes\", \"crazy\", \"creak\", \"creaks\", \"creaky\", \"cream\", \"creams\", \"creamy\", \"crease\", \"creasy\", \"create\", \"creche\", \"credal\", \"credit\", \"credo\", \"credos\", \"creed\", \"creeds\", \"creek\", \"creeks\", \"creel\", \"creels\", \"creep\", \"creeps\", \"creepy\", \"creese\", \"creesh\", \"creme\", \"cremes\", \"crenel\", \"creole\", \"crepe\", \"creped\", \"crepes\", \"crepey\", \"crepon\", \"crept\", \"crepy\", \"cresol\", \"cress\", \"crest\", \"crests\", \"cresyl\", \"cretic\", \"cretin\", \"crew\", \"crewed\", \"crewel\", \"crews\", \"crib\", \"cribs\", \"crick\", \"cricks\", \"cried\", \"crier\", \"criers\", \"cries\", \"crikey\", \"crime\", \"crimes\", \"crimp\", \"crimps\", \"crimpy\", \"cringe\", \"crinum\", \"cripe\", \"cripes\", \"cris\", \"crises\", \"crisic\", \"crisis\", \"crisp\", \"crisps\", \"crispy\", \"crissa\", \"crista\", \"critic\", \"croak\", \"croaks\", \"croaky\", \"croc\", \"croci\", \"crock\", \"crocks\", \"crocs\", \"crocus\", \"croft\", \"crofts\", \"crojik\", \"crone\", \"crones\", \"crony\", \"crook\", \"crooks\", \"croon\", \"croons\", \"crop\", \"crops\", \"crore\", \"crores\", \"cross\", \"crosse\", \"crotch\", \"croton\", \"crouch\", \"croup\", \"croupe\", \"croups\", \"croupy\", \"crouse\", \"crow\", \"crowd\", \"crowds\", \"crowdy\", \"crowed\", \"crower\", \"crown\", \"crowns\", \"crows\", \"croze\", \"crozer\", \"crozes\", \"cruces\", \"cruck\", \"crucks\", \"crud\", \"cruddy\", \"crude\", \"cruder\", \"crudes\", \"cruds\", \"cruel\", \"cruet\", \"cruets\", \"cruise\", \"crumb\", \"crumbs\", \"crumby\", \"crummy\", \"crump\", \"crumps\", \"crunch\", \"cruor\", \"cruors\", \"crura\", \"crural\", \"crus\", \"cruse\", \"cruses\", \"cruset\", \"crush\", \"crust\", \"crusts\", \"crusty\", \"crutch\", \"crux\", \"cruxes\", \"crwth\", \"crwths\", \"cry\", \"crying\", \"crypt\", \"crypto\", \"crypts\", \"cub\", \"cubage\", \"cubby\", \"cube\", \"cubeb\", \"cubebs\", \"cubed\", \"cuber\", \"cubers\", \"cubes\", \"cubic\", \"cubics\", \"cubing\", \"cubism\", \"cubist\", \"cubit\", \"cubits\", \"cuboid\", \"cubs\", \"cuckoo\", \"cud\", \"cuddie\", \"cuddle\", \"cuddly\", \"cuddy\", \"cudgel\", \"cuds\", \"cue\", \"cued\", \"cueing\", \"cues\", \"cuesta\", \"cuff\", \"cuffed\", \"cuffs\", \"cuif\", \"cuifs\", \"cuing\", \"cuish\", \"cuisse\", \"cuke\", \"cukes\", \"culch\", \"culet\", \"culets\", \"culex\", \"cull\", \"cullay\", \"culled\", \"culler\", \"cullet\", \"cullis\", \"culls\", \"cully\", \"culm\", \"culmed\", \"culms\", \"culpa\", \"culpae\", \"cult\", \"cultch\", \"culti\", \"cultic\", \"cults\", \"cultus\", \"culver\", \"cum\", \"cumber\", \"cumin\", \"cumins\", \"cummer\", \"cummin\", \"cumuli\", \"cundum\", \"cuneal\", \"cunner\", \"cup\", \"cupel\", \"cupels\", \"cupful\", \"cupid\", \"cupids\", \"cupola\", \"cuppa\", \"cuppas\", \"cupped\", \"cupper\", \"cuppy\", \"cupric\", \"cuprum\", \"cups\", \"cupula\", \"cupule\", \"cur\", \"curacy\", \"curagh\", \"curara\", \"curare\", \"curari\", \"curate\", \"curb\", \"curbed\", \"curber\", \"curbs\", \"curch\", \"curd\", \"curded\", \"curdle\", \"curds\", \"curdy\", \"cure\", \"cured\", \"curer\", \"curers\", \"cures\", \"curet\", \"curets\", \"curf\", \"curfew\", \"curfs\", \"curia\", \"curiae\", \"curial\", \"curie\", \"curies\", \"curing\", \"curio\", \"curios\", \"curite\", \"curium\", \"curl\", \"curled\", \"curler\", \"curlew\", \"curls\", \"curly\", \"curn\", \"curns\", \"curr\", \"curran\", \"curred\", \"currie\", \"currs\", \"curry\", \"curs\", \"curse\", \"cursed\", \"curser\", \"curses\", \"cursor\", \"curst\", \"curt\", \"curtal\", \"curter\", \"curtly\", \"curtsy\", \"curule\", \"curve\", \"curved\", \"curves\", \"curvet\", \"curvey\", \"curvy\", \"cuscus\", \"cusec\", \"cusecs\", \"cushat\", \"cushaw\", \"cushy\", \"cusk\", \"cusks\", \"cusp\", \"cusped\", \"cuspid\", \"cuspis\", \"cusps\", \"cuss\", \"cussed\", \"cusser\", \"cusses\", \"cusso\", \"cussos\", \"custom\", \"custos\", \"cut\", \"cutch\", \"cute\", \"cutely\", \"cuter\", \"cutes\", \"cutest\", \"cutesy\", \"cutey\", \"cuteys\", \"cutie\", \"cuties\", \"cutin\", \"cutins\", \"cutis\", \"cutlas\", \"cutler\", \"cutlet\", \"cutoff\", \"cutout\", \"cuts\", \"cutter\", \"cuttle\", \"cutty\", \"cutup\", \"cutups\", \"cwm\", \"cwms\", \"cyan\", \"cyanic\", \"cyanid\", \"cyanin\", \"cyano\", \"cyans\", \"cyborg\", \"cycad\", \"cycads\", \"cycas\", \"cycle\", \"cycled\", \"cycler\", \"cycles\", \"cyclic\", \"cyclo\", \"cyclos\", \"cyder\", \"cyders\", \"cyeses\", \"cyesis\", \"cygnet\", \"cylix\", \"cyma\", \"cymae\", \"cymar\", \"cymars\", \"cymas\", \"cymbal\", \"cyme\", \"cymene\", \"cymes\", \"cymlin\", \"cymoid\", \"cymol\", \"cymols\", \"cymose\", \"cymous\", \"cynic\", \"cynics\", \"cypher\", \"cypres\", \"cyprus\", \"cyst\", \"cystic\", \"cysts\", \"cyton\", \"cytons\", \"czar\", \"czars\", \"dab\", \"dabbed\", \"dabber\", \"dabble\", \"dabs\", \"dace\", \"daces\", \"dacha\", \"dachas\", \"dacker\", \"dacoit\", \"dactyl\", \"dad\", \"dada\", \"dadas\", \"daddle\", \"daddy\", \"dado\", \"dadoed\", \"dadoes\", \"dados\", \"dads\", \"daedal\", \"daemon\", \"daff\", \"daffed\", \"daffs\", \"daffy\", \"daft\", \"dafter\", \"daftly\", \"dag\", \"dagga\", \"daggas\", \"dagger\", \"daggle\", \"dago\", \"dagoba\", \"dagoes\", \"dagos\", \"dags\", \"dah\", \"dahl\", \"dahlia\", \"dahls\", \"dahoon\", \"dahs\", \"daiker\", \"daikon\", \"daily\", \"daimen\", \"daimio\", \"daimon\", \"daimyo\", \"dainty\", \"dairy\", \"dais\", \"daises\", \"daisy\", \"dak\", \"dakoit\", \"daks\", \"dal\", \"dalasi\", \"dale\", \"daledh\", \"dales\", \"daleth\", \"dalles\", \"dally\", \"dals\", \"dalton\", \"dam\", \"damage\", \"daman\", \"damans\", \"damar\", \"damars\", \"damask\", \"dame\", \"dames\", \"dammar\", \"dammed\", \"dammer\", \"damn\", \"damned\", \"damner\", \"damns\", \"damp\", \"damped\", \"dampen\", \"damper\", \"damply\", \"damps\", \"dams\", \"damsel\", \"damson\", \"dance\", \"danced\", \"dancer\", \"dances\", \"dander\", \"dandle\", \"dandy\", \"dang\", \"danged\", \"danger\", \"dangle\", \"dangs\", \"danio\", \"danios\", \"danish\", \"dank\", \"danker\", \"dankly\", \"dap\", \"daphne\", \"dapped\", \"dapper\", \"dapple\", \"daps\", \"darb\", \"darbs\", \"dare\", \"dared\", \"darer\", \"darers\", \"dares\", \"daric\", \"darics\", \"daring\", \"dark\", \"darked\", \"darken\", \"darker\", \"darkey\", \"darkie\", \"darkle\", \"darkly\", \"darks\", \"darky\", \"darn\", \"darned\", \"darnel\", \"darner\", \"darns\", \"dart\", \"darted\", \"darter\", \"dartle\", \"darts\", \"dash\", \"dashed\", \"dasher\", \"dashes\", \"dashi\", \"dashis\", \"dashy\", \"dassie\", \"data\", \"datary\", \"datcha\", \"date\", \"dated\", \"dater\", \"daters\", \"dates\", \"dating\", \"dative\", \"dato\", \"datos\", \"datto\", \"dattos\", \"datum\", \"datums\", \"datura\", \"daub\", \"daube\", \"daubed\", \"dauber\", \"daubes\", \"daubry\", \"daubs\", \"dauby\", \"daunt\", \"daunts\", \"daut\", \"dauted\", \"dautie\", \"dauts\", \"daven\", \"davens\", \"davies\", \"davit\", \"davits\", \"davy\", \"daw\", \"dawdle\", \"dawed\", \"dawen\", \"dawing\", \"dawk\", \"dawks\", \"dawn\", \"dawned\", \"dawns\", \"daws\", \"dawt\", \"dawted\", \"dawtie\", \"dawts\", \"day\", \"daybed\", \"dayfly\", \"daylit\", \"days\", \"daze\", \"dazed\", \"dazes\", \"dazing\", \"dazzle\", \"deacon\", \"dead\", \"deaden\", \"deader\", \"deadly\", \"deads\", \"deaf\", \"deafen\", \"deafer\", \"deafly\", \"deair\", \"deairs\", \"deal\", \"dealer\", \"deals\", \"dealt\", \"dean\", \"deaned\", \"deans\", \"dear\", \"dearer\", \"dearie\", \"dearly\", \"dears\", \"dearth\", \"deary\", \"deash\", \"deasil\", \"death\", \"deaths\", \"deathy\", \"deave\", \"deaved\", \"deaves\", \"deb\", \"debar\", \"debark\", \"debars\", \"debase\", \"debate\", \"debeak\", \"debit\", \"debits\", \"debone\", \"debris\", \"debs\", \"debt\", \"debtor\", \"debts\", \"debug\", \"debugs\", \"debunk\", \"debut\", \"debuts\", \"debye\", \"debyes\", \"decade\", \"decaf\", \"decafs\", \"decal\", \"decals\", \"decamp\", \"decane\", \"decant\", \"decare\", \"decay\", \"decays\", \"deceit\", \"decent\", \"decern\", \"decide\", \"decile\", \"deck\", \"decked\", \"deckel\", \"decker\", \"deckle\", \"decks\", \"declaw\", \"deco\", \"decoct\", \"decode\", \"decor\", \"decors\", \"decos\", \"decoy\", \"decoys\", \"decree\", \"decry\", \"decury\", \"dedal\", \"dedans\", \"deduce\", \"deduct\", \"dee\", \"deed\", \"deeded\", \"deeds\", \"deedy\", \"deejay\", \"deem\", \"deemed\", \"deems\", \"deep\", \"deepen\", \"deeper\", \"deeply\", \"deeps\", \"deer\", \"deers\", \"dees\", \"deet\", \"deets\", \"deewan\", \"deface\", \"defame\", \"defang\", \"defat\", \"defats\", \"defeat\", \"defect\", \"defend\", \"defer\", \"defers\", \"defi\", \"defied\", \"defier\", \"defies\", \"defile\", \"define\", \"defis\", \"deflea\", \"defoam\", \"defog\", \"defogs\", \"deform\", \"defray\", \"deft\", \"defter\", \"deftly\", \"defund\", \"defuse\", \"defuze\", \"defy\", \"degage\", \"degame\", \"degami\", \"degas\", \"degerm\", \"degree\", \"degum\", \"degums\", \"degust\", \"dehorn\", \"dehort\", \"deice\", \"deiced\", \"deicer\", \"deices\", \"deific\", \"deify\", \"deign\", \"deigns\", \"deil\", \"deils\", \"deism\", \"deisms\", \"deist\", \"deists\", \"deity\", \"deixis\", \"deject\", \"dekare\", \"deke\", \"deked\", \"dekes\", \"deking\", \"dekko\", \"dekkos\", \"del\", \"delate\", \"delay\", \"delays\", \"dele\", \"delead\", \"deled\", \"deles\", \"delete\", \"delf\", \"delfs\", \"delft\", \"delfts\", \"deli\", \"delict\", \"delime\", \"delis\", \"delist\", \"dell\", \"dells\", \"delly\", \"dels\", \"delta\", \"deltas\", \"deltic\", \"delude\", \"deluge\", \"deluxe\", \"delve\", \"delved\", \"delver\", \"delves\", \"demand\", \"demark\", \"demast\", \"deme\", \"demean\", \"dement\", \"demes\", \"demies\", \"demise\", \"demit\", \"demits\", \"demo\", \"demob\", \"demobs\", \"demode\", \"demon\", \"demons\", \"demos\", \"demote\", \"demur\", \"demure\", \"demurs\", \"demy\", \"den\", \"denary\", \"dene\", \"denes\", \"dengue\", \"denial\", \"denied\", \"denier\", \"denies\", \"denim\", \"denims\", \"denned\", \"denote\", \"dens\", \"dense\", \"denser\", \"dent\", \"dental\", \"dented\", \"dentil\", \"dentin\", \"dents\", \"denude\", \"deny\", \"deodar\", \"deoxy\", \"depart\", \"depend\", \"deperm\", \"depict\", \"deploy\", \"depone\", \"deport\", \"depose\", \"depot\", \"depots\", \"depth\", \"depths\", \"depute\", \"deputy\", \"derail\", \"derat\", \"derate\", \"derats\", \"deray\", \"derays\", \"derby\", \"dere\", \"deride\", \"derive\", \"derm\", \"derma\", \"dermal\", \"dermas\", \"dermic\", \"dermis\", \"derms\", \"derris\", \"derry\", \"desalt\", \"desand\", \"descry\", \"desert\", \"desex\", \"design\", \"desire\", \"desist\", \"desk\", \"desks\", \"desman\", \"desmid\", \"desorb\", \"desoxy\", \"despot\", \"detach\", \"detail\", \"detain\", \"detect\", \"detent\", \"deter\", \"deters\", \"detest\", \"detick\", \"detour\", \"detox\", \"deuce\", \"deuced\", \"deuces\", \"dev\", \"deva\", \"devas\", \"devein\", \"devel\", \"devels\", \"devest\", \"device\", \"devil\", \"devils\", \"devise\", \"devoid\", \"devoir\", \"devon\", \"devons\", \"devote\", \"devour\", \"devout\", \"devs\", \"dew\", \"dewan\", \"dewans\", \"dewar\", \"dewars\", \"dewax\", \"dewed\", \"dewier\", \"dewily\", \"dewing\", \"dewlap\", \"dewool\", \"deworm\", \"dews\", \"dewy\", \"dex\", \"dexes\", \"dexie\", \"dexies\", \"dexter\", \"dextro\", \"dexy\", \"dey\", \"deys\", \"dezinc\", \"dhak\", \"dhaks\", \"dhal\", \"dhals\", \"dharma\", \"dharna\", \"dhobi\", \"dhobis\", \"dhole\", \"dholes\", \"dhooly\", \"dhoora\", \"dhooti\", \"dhoti\", \"dhotis\", \"dhow\", \"dhows\", \"dhurna\", \"dhuti\", \"dhutis\", \"diacid\", \"diadem\", \"dial\", \"dialed\", \"dialer\", \"dialog\", \"dials\", \"diamin\", \"diaper\", \"diapir\", \"diary\", \"diatom\", \"diazin\", \"diazo\", \"dib\", \"dibbed\", \"dibber\", \"dibble\", \"dibbuk\", \"dibs\", \"dicast\", \"dice\", \"diced\", \"dicer\", \"dicers\", \"dices\", \"dicey\", \"dicier\", \"dicing\", \"dick\", \"dicked\", \"dicker\", \"dickey\", \"dickie\", \"dicks\", \"dicky\", \"dicot\", \"dicots\", \"dicta\", \"dictum\", \"dicty\", \"did\", \"didact\", \"diddle\", \"diddly\", \"didie\", \"didies\", \"dido\", \"didoes\", \"didos\", \"didst\", \"didy\", \"die\", \"died\", \"dieing\", \"diel\", \"diene\", \"dienes\", \"dies\", \"diesel\", \"dieses\", \"diesis\", \"diet\", \"dieted\", \"dieter\", \"diets\", \"differ\", \"dig\", \"digamy\", \"digest\", \"digged\", \"digger\", \"dight\", \"dights\", \"digit\", \"digits\", \"diglot\", \"digs\", \"dikdik\", \"dike\", \"diked\", \"diker\", \"dikers\", \"dikes\", \"dikey\", \"diking\", \"diktat\", \"dilate\", \"dildo\", \"dildoe\", \"dildos\", \"dill\", \"dilled\", \"dills\", \"dilly\", \"dilute\", \"dim\", \"dime\", \"dimer\", \"dimers\", \"dimes\", \"dimity\", \"dimly\", \"dimmed\", \"dimmer\", \"dimout\", \"dimple\", \"dimply\", \"dims\", \"dimwit\", \"din\", \"dinar\", \"dinars\", \"dindle\", \"dine\", \"dined\", \"diner\", \"dinero\", \"diners\", \"dines\", \"ding\", \"dinge\", \"dinged\", \"dinger\", \"dinges\", \"dingey\", \"dinghy\", \"dingle\", \"dingo\", \"dings\", \"dingus\", \"dingy\", \"dining\", \"dink\", \"dinked\", \"dinkey\", \"dinkly\", \"dinks\", \"dinkum\", \"dinky\", \"dinned\", \"dinner\", \"dins\", \"dint\", \"dinted\", \"dints\", \"diobol\", \"diode\", \"diodes\", \"dioecy\", \"diol\", \"diols\", \"dioxan\", \"dioxid\", \"dioxin\", \"dip\", \"diplex\", \"diploe\", \"dipnet\", \"dipody\", \"dipole\", \"dipped\", \"dipper\", \"dippy\", \"dips\", \"dipsas\", \"dipso\", \"dipsos\", \"dipt\", \"diquat\", \"dirdum\", \"dire\", \"direct\", \"direly\", \"direr\", \"direst\", \"dirge\", \"dirges\", \"dirham\", \"dirk\", \"dirked\", \"dirks\", \"dirl\", \"dirled\", \"dirls\", \"dirndl\", \"dirt\", \"dirts\", \"dirty\", \"dis\", \"disarm\", \"disbar\", \"disbud\", \"disc\", \"disced\", \"disci\", \"disco\", \"discos\", \"discs\", \"discus\", \"dish\", \"dished\", \"dishes\", \"dishy\", \"disk\", \"disked\", \"disks\", \"dismal\", \"dismay\", \"disme\", \"dismes\", \"disown\", \"dispel\", \"diss\", \"dissed\", \"disses\", \"distal\", \"distil\", \"disuse\", \"dit\", \"dita\", \"ditas\", \"ditch\", \"dite\", \"dites\", \"dither\", \"dits\", \"ditsy\", \"ditto\", \"dittos\", \"ditty\", \"ditz\", \"ditzes\", \"ditzy\", \"diuron\", \"diva\", \"divan\", \"divans\", \"divas\", \"dive\", \"dived\", \"diver\", \"divers\", \"divert\", \"dives\", \"divest\", \"divide\", \"divine\", \"diving\", \"divot\", \"divots\", \"divvy\", \"diwan\", \"diwans\", \"dixit\", \"dixits\", \"dizen\", \"dizens\", \"dizzy\", \"djebel\", \"djin\", \"djinn\", \"djinni\", \"djinns\", \"djinny\", \"djins\", \"doable\", \"doat\", \"doated\", \"doats\", \"dobber\", \"dobbin\", \"dobby\", \"dobie\", \"dobies\", \"dobla\", \"doblas\", \"doblon\", \"dobra\", \"dobras\", \"dobson\", \"doby\", \"doc\", \"docent\", \"docile\", \"dock\", \"docked\", \"docker\", \"docket\", \"docks\", \"docs\", \"doctor\", \"dodder\", \"dodge\", \"dodged\", \"dodgem\", \"dodger\", \"dodges\", \"dodgy\", \"dodo\", \"dodoes\", \"dodos\", \"doe\", \"doer\", \"doers\", \"does\", \"doest\", \"doeth\", \"doff\", \"doffed\", \"doffer\", \"doffs\", \"dog\", \"dogdom\", \"doge\", \"dogear\", \"doges\", \"dogey\", \"dogeys\", \"dogged\", \"dogger\", \"doggie\", \"doggo\", \"doggy\", \"dogie\", \"dogies\", \"dogleg\", \"dogma\", \"dogmas\", \"dognap\", \"dogs\", \"dogy\", \"doiled\", \"doily\", \"doing\", \"doings\", \"doit\", \"doited\", \"doits\", \"dojo\", \"dojos\", \"dol\", \"dolce\", \"dolci\", \"dole\", \"doled\", \"doles\", \"doling\", \"doll\", \"dollar\", \"dolled\", \"dollop\", \"dolls\", \"dolly\", \"dolma\", \"dolman\", \"dolmas\", \"dolmen\", \"dolor\", \"dolors\", \"dolour\", \"dols\", \"dolt\", \"dolts\", \"dom\", \"domain\", \"domal\", \"dome\", \"domed\", \"domes\", \"domic\", \"domine\", \"doming\", \"domino\", \"doms\", \"don\", \"dona\", \"donas\", \"donate\", \"done\", \"donee\", \"donees\", \"dong\", \"donga\", \"dongas\", \"dongs\", \"donjon\", \"donkey\", \"donna\", \"donnas\", \"donne\", \"donned\", \"donnee\", \"donor\", \"donors\", \"dons\", \"donsie\", \"donsy\", \"donut\", \"donuts\", \"donzel\", \"doodad\", \"doodle\", \"doofus\", \"doolee\", \"doolie\", \"dooly\", \"doom\", \"doomed\", \"dooms\", \"doomy\", \"door\", \"doors\", \"doozer\", \"doozie\", \"doozy\", \"dopa\", \"dopant\", \"dopas\", \"dope\", \"doped\", \"doper\", \"dopers\", \"dopes\", \"dopey\", \"dopier\", \"doping\", \"dopy\", \"dor\", \"dorado\", \"dorbug\", \"dore\", \"dories\", \"dork\", \"dorks\", \"dorky\", \"dorm\", \"dormer\", \"dormie\", \"dormin\", \"dorms\", \"dormy\", \"dorp\", \"dorper\", \"dorps\", \"dorr\", \"dorrs\", \"dors\", \"dorsa\", \"dorsad\", \"dorsal\", \"dorsel\", \"dorser\", \"dorsum\", \"dorty\", \"dory\", \"dos\", \"dosage\", \"dose\", \"dosed\", \"doser\", \"dosers\", \"doses\", \"dosing\", \"doss\", \"dossal\", \"dossed\", \"dossel\", \"dosser\", \"dosses\", \"dossil\", \"dost\", \"dot\", \"dotage\", \"dotal\", \"dotard\", \"dote\", \"doted\", \"doter\", \"doters\", \"dotes\", \"doth\", \"dotier\", \"doting\", \"dots\", \"dotted\", \"dottel\", \"dotter\", \"dottle\", \"dotty\", \"doty\", \"double\", \"doubly\", \"doubt\", \"doubts\", \"douce\", \"douche\", \"dough\", \"doughs\", \"dought\", \"doughy\", \"doum\", \"douma\", \"doumas\", \"doums\", \"dour\", \"doura\", \"dourah\", \"douras\", \"dourer\", \"dourly\", \"douse\", \"doused\", \"douser\", \"douses\", \"doux\", \"dove\", \"doven\", \"dovens\", \"doves\", \"dovish\", \"dow\", \"dowdy\", \"dowed\", \"dowel\", \"dowels\", \"dower\", \"dowers\", \"dowery\", \"dowie\", \"dowing\", \"down\", \"downed\", \"downer\", \"downs\", \"downy\", \"dowry\", \"dows\", \"dowse\", \"dowsed\", \"dowser\", \"dowses\", \"doxie\", \"doxies\", \"doxy\", \"doyen\", \"doyens\", \"doyley\", \"doyly\", \"doze\", \"dozed\", \"dozen\", \"dozens\", \"dozer\", \"dozers\", \"dozes\", \"dozier\", \"dozily\", \"dozing\", \"dozy\", \"drab\", \"drably\", \"drabs\", \"drachm\", \"draff\", \"draffs\", \"draffy\", \"draft\", \"drafts\", \"drafty\", \"drag\", \"dragee\", \"draggy\", \"dragon\", \"drags\", \"drail\", \"drails\", \"drain\", \"drains\", \"drake\", \"drakes\", \"dram\", \"drama\", \"dramas\", \"drams\", \"drank\", \"drape\", \"draped\", \"draper\", \"drapes\", \"drapey\", \"drat\", \"drats\", \"drave\", \"draw\", \"drawee\", \"drawer\", \"drawl\", \"drawls\", \"drawly\", \"drawn\", \"draws\", \"dray\", \"drayed\", \"drays\", \"dread\", \"dreads\", \"dream\", \"dreams\", \"dreamt\", \"dreamy\", \"drear\", \"drears\", \"dreary\", \"dreck\", \"drecks\", \"drecky\", \"dredge\", \"dree\", \"dreed\", \"drees\", \"dreg\", \"dreggy\", \"dregs\", \"dreich\", \"dreidl\", \"dreigh\", \"drek\", \"dreks\", \"drench\", \"dress\", \"dressy\", \"drest\", \"drew\", \"drib\", \"dribs\", \"dried\", \"driegh\", \"drier\", \"driers\", \"dries\", \"driest\", \"drift\", \"drifts\", \"drifty\", \"drill\", \"drills\", \"drily\", \"drink\", \"drinks\", \"drip\", \"drippy\", \"drips\", \"dript\", \"drive\", \"drivel\", \"driven\", \"driver\", \"drives\", \"drogue\", \"droit\", \"droits\", \"droll\", \"drolls\", \"drolly\", \"dromon\", \"drone\", \"droned\", \"droner\", \"drones\", \"drongo\", \"drool\", \"drools\", \"droop\", \"droops\", \"droopy\", \"drop\", \"drops\", \"dropsy\", \"dropt\", \"drosky\", \"dross\", \"drossy\", \"drouk\", \"drouks\", \"drouth\", \"drove\", \"droved\", \"drover\", \"droves\", \"drown\", \"drownd\", \"drowns\", \"drowse\", \"drowsy\", \"drub\", \"drubs\", \"drudge\", \"drug\", \"druggy\", \"drugs\", \"druid\", \"druids\", \"drum\", \"drumly\", \"drums\", \"drunk\", \"drunks\", \"drupe\", \"drupes\", \"druse\", \"druses\", \"dry\", \"dryad\", \"dryads\", \"dryer\", \"dryers\", \"dryest\", \"drying\", \"dryish\", \"drylot\", \"dryly\", \"drys\", \"duad\", \"duads\", \"dual\", \"dually\", \"duals\", \"dub\", \"dubbed\", \"dubber\", \"dubbin\", \"dubs\", \"ducal\", \"ducat\", \"ducats\", \"duce\", \"duces\", \"duchy\", \"duci\", \"duck\", \"ducked\", \"ducker\", \"duckie\", \"ducks\", \"ducky\", \"duct\", \"ductal\", \"ducted\", \"ducts\", \"dud\", \"duddie\", \"duddy\", \"dude\", \"duded\", \"dudeen\", \"dudes\", \"duding\", \"dudish\", \"duds\", \"due\", \"duel\", \"dueled\", \"dueler\", \"duelli\", \"duello\", \"duels\", \"duende\", \"duenna\", \"dues\", \"duet\", \"duets\", \"duff\", \"duffel\", \"duffer\", \"duffle\", \"duffs\", \"dug\", \"dugong\", \"dugout\", \"dugs\", \"dui\", \"duiker\", \"duit\", \"duits\", \"duke\", \"duked\", \"dukes\", \"duking\", \"dulcet\", \"dulia\", \"dulias\", \"dull\", \"dulled\", \"duller\", \"dulls\", \"dully\", \"dulse\", \"dulses\", \"duly\", \"duma\", \"dumas\", \"dumb\", \"dumbed\", \"dumber\", \"dumbly\", \"dumbs\", \"dumdum\", \"dumka\", \"dumky\", \"dummy\", \"dump\", \"dumped\", \"dumper\", \"dumps\", \"dumpy\", \"dun\", \"dunam\", \"dunams\", \"dunce\", \"dunces\", \"dunch\", \"dune\", \"dunes\", \"dung\", \"dunged\", \"dungs\", \"dungy\", \"dunite\", \"dunk\", \"dunked\", \"dunker\", \"dunks\", \"dunlin\", \"dunned\", \"dunner\", \"duns\", \"dunt\", \"dunted\", \"dunts\", \"duo\", \"duolog\", \"duomi\", \"duomo\", \"duomos\", \"duos\", \"dup\", \"dupe\", \"duped\", \"duper\", \"dupers\", \"dupery\", \"dupes\", \"duping\", \"duple\", \"duplex\", \"dupped\", \"dups\", \"dura\", \"dural\", \"duras\", \"durbar\", \"dure\", \"dured\", \"dures\", \"duress\", \"durian\", \"during\", \"durion\", \"durn\", \"durned\", \"durns\", \"duro\", \"duroc\", \"durocs\", \"duros\", \"durr\", \"durra\", \"durras\", \"durrie\", \"durrs\", \"durst\", \"durum\", \"durums\", \"dusk\", \"dusked\", \"dusks\", \"dusky\", \"dust\", \"dusted\", \"duster\", \"dusts\", \"dustup\", \"dusty\", \"dutch\", \"duties\", \"duty\", \"duvet\", \"duvets\", \"dwarf\", \"dwarfs\", \"dweeb\", \"dweebs\", \"dwell\", \"dwells\", \"dwelt\", \"dwine\", \"dwined\", \"dwines\", \"dyable\", \"dyad\", \"dyadic\", \"dyads\", \"dybbuk\", \"dye\", \"dyed\", \"dyeing\", \"dyer\", \"dyers\", \"dyes\", \"dying\", \"dyings\", \"dyke\", \"dyked\", \"dykes\", \"dykey\", \"dyking\", \"dynamo\", \"dynast\", \"dyne\", \"dynein\", \"dynel\", \"dynels\", \"dynes\", \"dynode\", \"dyvour\", \"each\", \"eager\", \"eagers\", \"eagle\", \"eagles\", \"eaglet\", \"eagre\", \"eagres\", \"ear\", \"eared\", \"earful\", \"earing\", \"earl\", \"earlap\", \"earls\", \"early\", \"earn\", \"earned\", \"earner\", \"earns\", \"ears\", \"earth\", \"earths\", \"earthy\", \"earwax\", \"earwig\", \"ease\", \"eased\", \"easel\", \"easels\", \"eases\", \"easier\", \"easies\", \"easily\", \"easing\", \"east\", \"easter\", \"easts\", \"easy\", \"eat\", \"eaten\", \"eater\", \"eaters\", \"eatery\", \"eath\", \"eating\", \"eats\", \"eau\", \"eaux\", \"eave\", \"eaved\", \"eaves\", \"ebb\", \"ebbed\", \"ebbet\", \"ebbets\", \"ebbing\", \"ebbs\", \"ebon\", \"ebons\", \"ebony\", \"ecarte\", \"ecesis\", \"echard\", \"eche\", \"eched\", \"eches\", \"eching\", \"echini\", \"echo\", \"echoed\", \"echoer\", \"echoes\", \"echoey\", \"echoic\", \"echos\", \"eclair\", \"eclat\", \"eclats\", \"ecru\", \"ecrus\", \"ectype\", \"ecu\", \"ecus\", \"eczema\", \"eddied\", \"eddies\", \"eddo\", \"eddoes\", \"eddy\", \"edema\", \"edemas\", \"edenic\", \"edge\", \"edged\", \"edger\", \"edgers\", \"edges\", \"edgier\", \"edgily\", \"edging\", \"edgy\", \"edh\", \"edhs\", \"edible\", \"edict\", \"edicts\", \"edify\", \"edile\", \"ediles\", \"edit\", \"edited\", \"editor\", \"edits\", \"educe\", \"educed\", \"educes\", \"educt\", \"educts\", \"eel\", \"eelier\", \"eels\", \"eely\", \"eerie\", \"eerier\", \"eerily\", \"eery\", \"eff\", \"efface\", \"effect\", \"effete\", \"effigy\", \"efflux\", \"effort\", \"effs\", \"effuse\", \"efs\", \"eft\", \"efts\", \"egad\", \"egads\", \"egal\", \"eger\", \"egers\", \"egest\", \"egesta\", \"egests\", \"egg\", \"eggar\", \"eggars\", \"eggcup\", \"egged\", \"egger\", \"eggers\", \"egging\", \"eggnog\", \"eggs\", \"eggy\", \"egis\", \"egises\", \"ego\", \"egoism\", \"egoist\", \"egos\", \"egress\", \"egret\", \"egrets\", \"eide\", \"eider\", \"eiders\", \"eidola\", \"eidos\", \"eight\", \"eighth\", \"eights\", \"eighty\", \"eikon\", \"eikons\", \"either\", \"eject\", \"ejecta\", \"ejects\", \"eke\", \"eked\", \"ekes\", \"eking\", \"ekuele\", \"elain\", \"elains\", \"elan\", \"eland\", \"elands\", \"elans\", \"elapid\", \"elapse\", \"elate\", \"elated\", \"elater\", \"elates\", \"elbow\", \"elbows\", \"eld\", \"elder\", \"elders\", \"eldest\", \"elds\", \"elect\", \"elects\", \"elegit\", \"elegy\", \"elemi\", \"elemis\", \"eleven\", \"elevon\", \"elf\", \"elfin\", \"elfins\", \"elfish\", \"elhi\", \"elicit\", \"elide\", \"elided\", \"elides\", \"elint\", \"elints\", \"elite\", \"elites\", \"elixir\", \"elk\", \"elks\", \"ell\", \"ells\", \"elm\", \"elmier\", \"elms\", \"elmy\", \"elodea\", \"eloign\", \"eloin\", \"eloins\", \"elope\", \"eloped\", \"eloper\", \"elopes\", \"els\", \"else\", \"eluant\", \"eluate\", \"elude\", \"eluded\", \"eluder\", \"eludes\", \"eluent\", \"elute\", \"eluted\", \"elutes\", \"eluvia\", \"elver\", \"elvers\", \"elves\", \"elvish\", \"elytra\", \"embalm\", \"embank\", \"embar\", \"embark\", \"embars\", \"embay\", \"embays\", \"embed\", \"embeds\", \"ember\", \"embers\", \"emblem\", \"embody\", \"emboli\", \"emboly\", \"embosk\", \"emboss\", \"embow\", \"embows\", \"embrue\", \"embryo\", \"emcee\", \"emceed\", \"emcees\", \"eme\", \"emeer\", \"emeers\", \"emend\", \"emends\", \"emerge\", \"emerod\", \"emery\", \"emes\", \"emeses\", \"emesis\", \"emetic\", \"emetin\", \"emeu\", \"emeus\", \"emeute\", \"emf\", \"emfs\", \"emic\", \"emigre\", \"emir\", \"emirs\", \"emit\", \"emits\", \"emmer\", \"emmers\", \"emmet\", \"emmets\", \"emodin\", \"emote\", \"emoted\", \"emoter\", \"emotes\", \"empale\", \"empery\", \"empire\", \"employ\", \"empty\", \"ems\", \"emu\", \"emus\", \"emyd\", \"emyde\", \"emydes\", \"emyds\", \"enable\", \"enact\", \"enacts\", \"enamel\", \"enamor\", \"enate\", \"enates\", \"enatic\", \"encage\", \"encamp\", \"encase\", \"encash\", \"encina\", \"encode\", \"encore\", \"encyst\", \"end\", \"endear\", \"ended\", \"ender\", \"enders\", \"ending\", \"endite\", \"endive\", \"endow\", \"endows\", \"endrin\", \"ends\", \"endue\", \"endued\", \"endues\", \"endure\", \"enduro\", \"enema\", \"enemas\", \"enemy\", \"energy\", \"enface\", \"enfold\", \"eng\", \"engage\", \"engild\", \"engine\", \"engird\", \"engirt\", \"englut\", \"engram\", \"engs\", \"engulf\", \"enhalo\", \"enigma\", \"enisle\", \"enjoin\", \"enjoy\", \"enjoys\", \"enlace\", \"enlist\", \"enmesh\", \"enmity\", \"ennead\", \"ennui\", \"ennuis\", \"ennuye\", \"enoki\", \"enokis\", \"enol\", \"enolic\", \"enols\", \"enorm\", \"enosis\", \"enough\", \"enow\", \"enows\", \"enrage\", \"enrapt\", \"enrich\", \"enrobe\", \"enrol\", \"enroll\", \"enrols\", \"enroot\", \"ens\", \"enserf\", \"ensign\", \"ensile\", \"ensky\", \"ensoul\", \"ensue\", \"ensued\", \"ensues\", \"ensure\", \"entail\", \"enter\", \"entera\", \"enters\", \"entia\", \"entice\", \"entire\", \"entity\", \"entoil\", \"entomb\", \"entrap\", \"entree\", \"entry\", \"enure\", \"enured\", \"enures\", \"envied\", \"envier\", \"envies\", \"envoi\", \"envois\", \"envoy\", \"envoys\", \"envy\", \"enwind\", \"enwomb\", \"enwrap\", \"enzym\", \"enzyme\", \"enzyms\", \"eolian\", \"eolith\", \"eon\", \"eonian\", \"eonism\", \"eons\", \"eosin\", \"eosine\", \"eosins\", \"epact\", \"epacts\", \"eparch\", \"epee\", \"epees\", \"epha\", \"ephah\", \"ephahs\", \"ephas\", \"ephebe\", \"ephebi\", \"ephod\", \"ephods\", \"ephor\", \"ephori\", \"ephors\", \"epic\", \"epical\", \"epics\", \"epigon\", \"epilog\", \"epimer\", \"epizoa\", \"epoch\", \"epochs\", \"epode\", \"epodes\", \"eponym\", \"epopee\", \"epos\", \"eposes\", \"epoxy\", \"equal\", \"equals\", \"equate\", \"equid\", \"equids\", \"equine\", \"equip\", \"equips\", \"equity\", \"era\", \"eras\", \"erase\", \"erased\", \"eraser\", \"erases\", \"erbium\", \"ere\", \"erect\", \"erects\", \"erenow\", \"erg\", \"ergate\", \"ergo\", \"ergot\", \"ergots\", \"ergs\", \"erica\", \"ericas\", \"eringo\", \"ermine\", \"ern\", \"erne\", \"ernes\", \"erns\", \"erode\", \"eroded\", \"erodes\", \"eros\", \"erose\", \"eroses\", \"erotic\", \"err\", \"errand\", \"errant\", \"errata\", \"erred\", \"erring\", \"error\", \"errors\", \"errs\", \"ers\", \"ersatz\", \"erses\", \"erst\", \"eruct\", \"eructs\", \"erugo\", \"erugos\", \"erupt\", \"erupts\", \"ervil\", \"ervils\", \"eryngo\", \"escape\", \"escar\", \"escarp\", \"escars\", \"eschar\", \"eschew\", \"escort\", \"escot\", \"escots\", \"escrow\", \"escudo\", \"eses\", \"eskar\", \"eskars\", \"esker\", \"eskers\", \"espial\", \"espied\", \"espies\", \"esprit\", \"espy\", \"ess\", \"essay\", \"essays\", \"esses\", \"essoin\", \"estate\", \"esteem\", \"ester\", \"esters\", \"estop\", \"estops\", \"estral\", \"estray\", \"estrin\", \"estrum\", \"estrus\", \"eta\", \"etalon\", \"etamin\", \"etape\", \"etapes\", \"etas\", \"etch\", \"etched\", \"etcher\", \"etches\", \"eterne\", \"eth\", \"ethane\", \"ethene\", \"ether\", \"ethers\", \"ethic\", \"ethics\", \"ethion\", \"ethnic\", \"ethnos\", \"ethos\", \"ethoxy\", \"eths\", \"ethyl\", \"ethyls\", \"ethyne\", \"etic\", \"etna\", \"etnas\", \"etoile\", \"etude\", \"etudes\", \"etui\", \"etuis\", \"etwee\", \"etwees\", \"etyma\", \"etymon\", \"euchre\", \"eulogy\", \"eunuch\", \"eupnea\", \"eureka\", \"euripi\", \"euro\", \"euroky\", \"euros\", \"eutaxy\", \"evade\", \"evaded\", \"evader\", \"evades\", \"eve\", \"even\", \"evened\", \"evener\", \"evenly\", \"evens\", \"event\", \"events\", \"ever\", \"evert\", \"everts\", \"every\", \"eves\", \"evict\", \"evicts\", \"evil\", \"eviler\", \"evilly\", \"evils\", \"evince\", \"evite\", \"evited\", \"evites\", \"evoke\", \"evoked\", \"evoker\", \"evokes\", \"evolve\", \"evzone\", \"ewe\", \"ewer\", \"ewers\", \"ewes\", \"exact\", \"exacta\", \"exacts\", \"exalt\", \"exalts\", \"exam\", \"examen\", \"exams\", \"exarch\", \"exceed\", \"excel\", \"excels\", \"except\", \"excess\", \"excide\", \"excise\", \"excite\", \"excuse\", \"exec\", \"execs\", \"exedra\", \"exempt\", \"exequy\", \"exert\", \"exerts\", \"exes\", \"exeunt\", \"exhale\", \"exhort\", \"exhume\", \"exile\", \"exiled\", \"exiles\", \"exilic\", \"exine\", \"exines\", \"exist\", \"exists\", \"exit\", \"exited\", \"exits\", \"exodoi\", \"exodos\", \"exodus\", \"exogen\", \"exon\", \"exonic\", \"exons\", \"exotic\", \"expand\", \"expat\", \"expats\", \"expect\", \"expel\", \"expels\", \"expend\", \"expert\", \"expire\", \"expiry\", \"expo\", \"export\", \"expos\", \"expose\", \"exsect\", \"exsert\", \"extant\", \"extend\", \"extent\", \"extern\", \"extol\", \"extoll\", \"extols\", \"extort\", \"extra\", \"extras\", \"exude\", \"exuded\", \"exudes\", \"exult\", \"exults\", \"exurb\", \"exurbs\", \"exuvia\", \"eyas\", \"eyases\", \"eye\", \"eyebar\", \"eyecup\", \"eyed\", \"eyeful\", \"eyeing\", \"eyelet\", \"eyelid\", \"eyen\", \"eyer\", \"eyers\", \"eyes\", \"eying\", \"eyne\", \"eyra\", \"eyras\", \"eyre\", \"eyres\", \"eyrie\", \"eyries\", \"eyrir\", \"eyry\", \"fable\", \"fabled\", \"fabler\", \"fables\", \"fabric\", \"facade\", \"face\", \"faced\", \"facer\", \"facers\", \"faces\", \"facet\", \"facete\", \"facets\", \"faceup\", \"facia\", \"facial\", \"facias\", \"facies\", \"facile\", \"facing\", \"fact\", \"factor\", \"facts\", \"facula\", \"fad\", \"faddy\", \"fade\", \"faded\", \"fader\", \"faders\", \"fades\", \"fadge\", \"fadged\", \"fadges\", \"fading\", \"fado\", \"fados\", \"fads\", \"faecal\", \"faeces\", \"faena\", \"faenas\", \"faerie\", \"faery\", \"fail\", \"failed\", \"faille\", \"fails\", \"fain\", \"fainer\", \"faint\", \"faints\", \"fair\", \"faired\", \"fairer\", \"fairly\", \"fairs\", \"fairy\", \"faith\", \"faiths\", \"fajita\", \"fake\", \"faked\", \"fakeer\", \"faker\", \"fakers\", \"fakery\", \"fakes\", \"fakey\", \"faking\", \"fakir\", \"fakirs\", \"falces\", \"falcon\", \"fall\", \"fallal\", \"fallen\", \"faller\", \"fallow\", \"falls\", \"false\", \"falser\", \"falsie\", \"falter\", \"falx\", \"fame\", \"famed\", \"fames\", \"family\", \"famine\", \"faming\", \"famish\", \"famous\", \"famuli\", \"fan\", \"fancy\", \"fandom\", \"fane\", \"fanega\", \"fanes\", \"fang\", \"fanga\", \"fangas\", \"fanged\", \"fangs\", \"fanion\", \"fanjet\", \"fanned\", \"fanner\", \"fanny\", \"fano\", \"fanon\", \"fanons\", \"fanos\", \"fans\", \"fantod\", \"fantom\", \"fanum\", \"fanums\", \"faqir\", \"faqirs\", \"faquir\", \"far\", \"farad\", \"farads\", \"farce\", \"farced\", \"farcer\", \"farces\", \"farci\", \"farcie\", \"farcy\", \"fard\", \"farded\", \"fardel\", \"fards\", \"fare\", \"fared\", \"farer\", \"farers\", \"fares\", \"farfal\", \"farfel\", \"farina\", \"faring\", \"farl\", \"farle\", \"farles\", \"farls\", \"farm\", \"farmed\", \"farmer\", \"farms\", \"faro\", \"faros\", \"farrow\", \"fart\", \"farted\", \"farts\", \"fas\", \"fasces\", \"fascia\", \"fash\", \"fashed\", \"fashes\", \"fast\", \"fasted\", \"fasten\", \"faster\", \"fasts\", \"fat\", \"fatal\", \"fate\", \"fated\", \"fates\", \"father\", \"fathom\", \"fating\", \"fatly\", \"fats\", \"fatso\", \"fatsos\", \"fatted\", \"fatten\", \"fatter\", \"fatty\", \"fatwa\", \"fatwas\", \"faucal\", \"fauces\", \"faucet\", \"faugh\", \"fauld\", \"faulds\", \"fault\", \"faults\", \"faulty\", \"faun\", \"fauna\", \"faunae\", \"faunal\", \"faunas\", \"fauns\", \"fauve\", \"fauves\", \"faux\", \"fava\", \"favas\", \"fave\", \"favela\", \"faves\", \"favism\", \"favor\", \"favors\", \"favour\", \"favus\", \"fawn\", \"fawned\", \"fawner\", \"fawns\", \"fawny\", \"fax\", \"faxed\", \"faxes\", \"faxing\", \"fay\", \"fayed\", \"faying\", \"fays\", \"faze\", \"fazed\", \"fazes\", \"fazing\", \"feal\", \"fealty\", \"fear\", \"feared\", \"fearer\", \"fears\", \"fease\", \"feased\", \"feases\", \"feast\", \"feasts\", \"feat\", \"feater\", \"featly\", \"feats\", \"feaze\", \"feazed\", \"feazes\", \"fecal\", \"feces\", \"fecial\", \"feck\", \"feckly\", \"fecks\", \"fecula\", \"fecund\", \"fed\", \"fedora\", \"feds\", \"fee\", \"feeble\", \"feebly\", \"feed\", \"feeder\", \"feeds\", \"feeing\", \"feel\", \"feeler\", \"feels\", \"fees\", \"feet\", \"feeze\", \"feezed\", \"feezes\", \"feh\", \"fehs\", \"feign\", \"feigns\", \"feijoa\", \"feint\", \"feints\", \"feirie\", \"feist\", \"feists\", \"feisty\", \"felid\", \"felids\", \"feline\", \"fell\", \"fella\", \"fellah\", \"fellas\", \"felled\", \"feller\", \"felloe\", \"fellow\", \"fells\", \"felly\", \"felon\", \"felons\", \"felony\", \"felt\", \"felted\", \"felts\", \"fem\", \"female\", \"feme\", \"femes\", \"femme\", \"femmes\", \"femora\", \"fems\", \"femur\", \"femurs\", \"fen\", \"fence\", \"fenced\", \"fencer\", \"fences\", \"fend\", \"fended\", \"fender\", \"fends\", \"fennec\", \"fennel\", \"fenny\", \"fens\", \"feod\", \"feods\", \"feoff\", \"feoffs\", \"fer\", \"feral\", \"ferbam\", \"fere\", \"feres\", \"feria\", \"feriae\", \"ferial\", \"ferias\", \"ferine\", \"ferity\", \"ferlie\", \"ferly\", \"fermi\", \"fermis\", \"fern\", \"ferns\", \"ferny\", \"ferrel\", \"ferret\", \"ferric\", \"ferrum\", \"ferry\", \"ferula\", \"ferule\", \"fervid\", \"fervor\", \"fescue\", \"fess\", \"fesse\", \"fessed\", \"fesses\", \"festal\", \"fester\", \"fet\", \"feta\", \"fetal\", \"fetas\", \"fetch\", \"fete\", \"feted\", \"fetes\", \"fetial\", \"fetich\", \"fetid\", \"feting\", \"fetish\", \"fetor\", \"fetors\", \"fets\", \"fetted\", \"fetter\", \"fettle\", \"fetus\", \"feu\", \"feuar\", \"feuars\", \"feud\", \"feudal\", \"feuded\", \"feuds\", \"feued\", \"feuing\", \"feus\", \"fever\", \"fevers\", \"few\", \"fewer\", \"fewest\", \"fey\", \"feyer\", \"feyest\", \"feyly\", \"fez\", \"fezes\", \"fezzed\", \"fezzes\", \"fiacre\", \"fiance\", \"fiar\", \"fiars\", \"fiasco\", \"fiat\", \"fiats\", \"fib\", \"fibbed\", \"fibber\", \"fiber\", \"fibers\", \"fibre\", \"fibres\", \"fibril\", \"fibrin\", \"fibs\", \"fibula\", \"fice\", \"fices\", \"fiche\", \"fiches\", \"fichu\", \"fichus\", \"ficin\", \"ficins\", \"fickle\", \"fickly\", \"fico\", \"ficoes\", \"ficus\", \"fid\", \"fiddle\", \"fiddly\", \"fidge\", \"fidged\", \"fidges\", \"fidget\", \"fido\", \"fidos\", \"fids\", \"fie\", \"fief\", \"fiefs\", \"field\", \"fields\", \"fiend\", \"fiends\", \"fierce\", \"fiery\", \"fiesta\", \"fife\", \"fifed\", \"fifer\", \"fifers\", \"fifes\", \"fifing\", \"fifth\", \"fifths\", \"fifty\", \"fig\", \"figged\", \"fight\", \"fights\", \"figs\", \"figure\", \"fil\", \"fila\", \"filar\", \"filch\", \"file\", \"filed\", \"filer\", \"filers\", \"files\", \"filet\", \"filets\", \"filial\", \"filing\", \"fill\", \"fille\", \"filled\", \"filler\", \"filles\", \"fillet\", \"fillip\", \"fillo\", \"fillos\", \"fills\", \"filly\", \"film\", \"filmed\", \"filmer\", \"filmic\", \"films\", \"filmy\", \"filo\", \"filos\", \"filose\", \"fils\", \"filter\", \"filth\", \"filths\", \"filthy\", \"filum\", \"fimble\", \"fin\", \"final\", \"finale\", \"finals\", \"finch\", \"find\", \"finder\", \"finds\", \"fine\", \"fined\", \"finely\", \"finer\", \"finery\", \"fines\", \"finest\", \"finger\", \"finial\", \"fining\", \"finis\", \"finish\", \"finite\", \"fink\", \"finked\", \"finks\", \"finned\", \"finny\", \"fino\", \"finos\", \"fins\", \"fiord\", \"fiords\", \"fipple\", \"fique\", \"fiques\", \"fir\", \"fire\", \"fired\", \"firer\", \"firers\", \"fires\", \"firing\", \"firkin\", \"firm\", \"firman\", \"firmed\", \"firmer\", \"firmly\", \"firms\", \"firn\", \"firns\", \"firry\", \"firs\", \"first\", \"firsts\", \"firth\", \"firths\", \"fisc\", \"fiscal\", \"fiscs\", \"fish\", \"fished\", \"fisher\", \"fishes\", \"fishy\", \"fist\", \"fisted\", \"fistic\", \"fists\", \"fit\", \"fitch\", \"fitchy\", \"fitful\", \"fitly\", \"fits\", \"fitted\", \"fitter\", \"five\", \"fiver\", \"fivers\", \"fives\", \"fix\", \"fixate\", \"fixed\", \"fixer\", \"fixers\", \"fixes\", \"fixing\", \"fixit\", \"fixity\", \"fixt\", \"fixure\", \"fiz\", \"fizgig\", \"fizz\", \"fizzed\", \"fizzer\", \"fizzes\", \"fizzle\", \"fizzy\", \"fjeld\", \"fjelds\", \"fjord\", \"fjords\", \"flab\", \"flabby\", \"flabs\", \"flack\", \"flacks\", \"flacon\", \"flag\", \"flaggy\", \"flagon\", \"flags\", \"flail\", \"flails\", \"flair\", \"flairs\", \"flak\", \"flake\", \"flaked\", \"flaker\", \"flakes\", \"flakey\", \"flaky\", \"flam\", \"flambe\", \"flame\", \"flamed\", \"flamen\", \"flamer\", \"flames\", \"flams\", \"flamy\", \"flan\", \"flanes\", \"flange\", \"flank\", \"flanks\", \"flans\", \"flap\", \"flappy\", \"flaps\", \"flare\", \"flared\", \"flares\", \"flash\", \"flashy\", \"flask\", \"flasks\", \"flat\", \"flatly\", \"flats\", \"flatus\", \"flaunt\", \"flavin\", \"flavor\", \"flaw\", \"flawed\", \"flaws\", \"flawy\", \"flax\", \"flaxen\", \"flaxes\", \"flaxy\", \"flay\", \"flayed\", \"flayer\", \"flays\", \"flea\", \"fleam\", \"fleams\", \"fleas\", \"fleche\", \"fleck\", \"flecks\", \"flecky\", \"fled\", \"fledge\", \"fledgy\", \"flee\", \"fleece\", \"fleech\", \"fleecy\", \"fleer\", \"fleers\", \"flees\", \"fleet\", \"fleets\", \"flench\", \"flense\", \"flesh\", \"fleshy\", \"fletch\", \"fleury\", \"flew\", \"flews\", \"flex\", \"flexed\", \"flexes\", \"flexor\", \"fley\", \"fleyed\", \"fleys\", \"flic\", \"flick\", \"flicks\", \"flics\", \"flied\", \"flier\", \"fliers\", \"flies\", \"fliest\", \"flight\", \"flimsy\", \"flinch\", \"fling\", \"flings\", \"flint\", \"flints\", \"flinty\", \"flip\", \"flippy\", \"flips\", \"flirt\", \"flirts\", \"flirty\", \"flit\", \"flitch\", \"flite\", \"flited\", \"flites\", \"flits\", \"float\", \"floats\", \"floaty\", \"floc\", \"flocci\", \"flock\", \"flocks\", \"flocky\", \"flocs\", \"floe\", \"floes\", \"flog\", \"flogs\", \"flong\", \"flongs\", \"flood\", \"floods\", \"flooey\", \"flooie\", \"floor\", \"floors\", \"floosy\", \"floozy\", \"flop\", \"floppy\", \"flops\", \"flora\", \"florae\", \"floral\", \"floras\", \"floret\", \"florid\", \"florin\", \"floss\", \"flossy\", \"flota\", \"flotas\", \"flour\", \"flours\", \"floury\", \"flout\", \"flouts\", \"flow\", \"flowed\", \"flower\", \"flown\", \"flows\", \"flu\", \"flub\", \"flubs\", \"flue\", \"flued\", \"fluent\", \"flues\", \"fluff\", \"fluffs\", \"fluffy\", \"fluid\", \"fluids\", \"fluke\", \"fluked\", \"flukes\", \"flukey\", \"fluky\", \"flume\", \"flumed\", \"flumes\", \"flump\", \"flumps\", \"flung\", \"flunk\", \"flunks\", \"flunky\", \"fluor\", \"fluors\", \"flurry\", \"flus\", \"flush\", \"flute\", \"fluted\", \"fluter\", \"flutes\", \"flutey\", \"fluty\", \"flux\", \"fluxed\", \"fluxes\", \"fluyt\", \"fluyts\", \"fly\", \"flyboy\", \"flyby\", \"flybys\", \"flyer\", \"flyers\", \"flying\", \"flyman\", \"flymen\", \"flyoff\", \"flysch\", \"flyte\", \"flyted\", \"flytes\", \"flyway\", \"foal\", \"foaled\", \"foals\", \"foam\", \"foamed\", \"foamer\", \"foams\", \"foamy\", \"fob\", \"fobbed\", \"fobs\", \"focal\", \"foci\", \"focus\", \"fodder\", \"fodgel\", \"foe\", \"foehn\", \"foehns\", \"foeman\", \"foemen\", \"foes\", \"foetal\", \"foetid\", \"foetor\", \"foetus\", \"fog\", \"fogbow\", \"fogdog\", \"fogey\", \"fogeys\", \"fogged\", \"fogger\", \"foggy\", \"fogie\", \"fogies\", \"fogs\", \"fogy\", \"foh\", \"fohn\", \"fohns\", \"foible\", \"foil\", \"foiled\", \"foils\", \"foin\", \"foined\", \"foins\", \"foison\", \"foist\", \"foists\", \"folate\", \"fold\", \"folded\", \"folder\", \"folds\", \"folia\", \"foliar\", \"folio\", \"folios\", \"folium\", \"folk\", \"folkie\", \"folks\", \"folksy\", \"folky\", \"folles\", \"follis\", \"follow\", \"folly\", \"foment\", \"fomite\", \"fon\", \"fond\", \"fonded\", \"fonder\", \"fondle\", \"fondly\", \"fonds\", \"fondu\", \"fondue\", \"fondus\", \"fons\", \"font\", \"fontal\", \"fonts\", \"food\", \"foodie\", \"foods\", \"fool\", \"fooled\", \"fools\", \"foot\", \"footed\", \"footer\", \"footie\", \"footle\", \"foots\", \"footsy\", \"footy\", \"foozle\", \"fop\", \"fopped\", \"fops\", \"for\", \"fora\", \"forage\", \"foram\", \"forams\", \"foray\", \"forays\", \"forb\", \"forbad\", \"forbid\", \"forbs\", \"forby\", \"forbye\", \"force\", \"forced\", \"forcer\", \"forces\", \"ford\", \"forded\", \"fordid\", \"fordo\", \"fords\", \"fore\", \"foreby\", \"foredo\", \"forego\", \"fores\", \"forest\", \"forgat\", \"forge\", \"forged\", \"forger\", \"forges\", \"forget\", \"forgo\", \"forgot\", \"forint\", \"fork\", \"forked\", \"forker\", \"forks\", \"forky\", \"form\", \"formal\", \"format\", \"forme\", \"formed\", \"formee\", \"former\", \"formes\", \"formic\", \"formol\", \"forms\", \"formyl\", \"fornix\", \"forrit\", \"fort\", \"forte\", \"fortes\", \"forth\", \"fortis\", \"forts\", \"forty\", \"forum\", \"forums\", \"forwhy\", \"foss\", \"fossa\", \"fossae\", \"fossas\", \"fosse\", \"fosses\", \"fossil\", \"foster\", \"fou\", \"fought\", \"foul\", \"fouled\", \"fouler\", \"foully\", \"fouls\", \"found\", \"founds\", \"fount\", \"founts\", \"four\", \"fours\", \"fourth\", \"fovea\", \"foveae\", \"foveal\", \"foveas\", \"fowl\", \"fowled\", \"fowler\", \"fowls\", \"fox\", \"foxed\", \"foxes\", \"foxier\", \"foxily\", \"foxing\", \"foxy\", \"foy\", \"foyer\", \"foyers\", \"foys\", \"fozier\", \"fozy\", \"fracas\", \"fracti\", \"frae\", \"fraena\", \"frag\", \"frags\", \"frail\", \"frails\", \"fraise\", \"frame\", \"framed\", \"framer\", \"frames\", \"franc\", \"francs\", \"frank\", \"franks\", \"frap\", \"frappe\", \"fraps\", \"frass\", \"frat\", \"frater\", \"frats\", \"fraud\", \"frauds\", \"fray\", \"frayed\", \"frays\", \"frazil\", \"freak\", \"freaks\", \"freaky\", \"free\", \"freed\", \"freely\", \"freer\", \"freers\", \"frees\", \"freest\", \"freeze\", \"fremd\", \"frena\", \"french\", \"frenum\", \"frenzy\", \"frere\", \"freres\", \"fresco\", \"fresh\", \"fret\", \"frets\", \"fretty\", \"friar\", \"friars\", \"friary\", \"fridge\", \"fried\", \"friend\", \"frier\", \"friers\", \"fries\", \"frieze\", \"frig\", \"fright\", \"frigid\", \"frigs\", \"frijol\", \"frill\", \"frills\", \"frilly\", \"fringe\", \"fringy\", \"frise\", \"frises\", \"frisk\", \"frisks\", \"frisky\", \"frit\", \"frith\", \"friths\", \"frits\", \"fritt\", \"fritts\", \"fritz\", \"frivol\", \"friz\", \"frized\", \"frizer\", \"frizes\", \"frizz\", \"frizzy\", \"fro\", \"frock\", \"frocks\", \"froe\", \"froes\", \"frog\", \"froggy\", \"frogs\", \"frolic\", \"from\", \"frond\", \"fronds\", \"frons\", \"front\", \"fronts\", \"frore\", \"frosh\", \"frost\", \"frosts\", \"frosty\", \"froth\", \"froths\", \"frothy\", \"frouzy\", \"frow\", \"frown\", \"frowns\", \"frows\", \"frowst\", \"frowsy\", \"frowzy\", \"froze\", \"frozen\", \"frug\", \"frugal\", \"frugs\", \"fruit\", \"fruits\", \"fruity\", \"frump\", \"frumps\", \"frumpy\", \"frusta\", \"fry\", \"fryer\", \"fryers\", \"frying\", \"frypan\", \"fub\", \"fubbed\", \"fubs\", \"fubsy\", \"fuci\", \"fucoid\", \"fucose\", \"fucous\", \"fucus\", \"fud\", \"fuddle\", \"fudge\", \"fudged\", \"fudges\", \"fuds\", \"fuel\", \"fueled\", \"fueler\", \"fuels\", \"fug\", \"fugal\", \"fugato\", \"fugged\", \"fuggy\", \"fugio\", \"fugios\", \"fugle\", \"fugled\", \"fugles\", \"fugs\", \"fugu\", \"fugue\", \"fugued\", \"fugues\", \"fugus\", \"fuhrer\", \"fuji\", \"fujis\", \"fulcra\", \"fulfil\", \"fulgid\", \"fulham\", \"full\", \"fullam\", \"fulled\", \"fuller\", \"fulls\", \"fully\", \"fulmar\", \"fumble\", \"fume\", \"fumed\", \"fumer\", \"fumers\", \"fumes\", \"fumet\", \"fumets\", \"fumier\", \"fuming\", \"fumuli\", \"fumy\", \"fun\", \"fund\", \"funded\", \"fundi\", \"fundic\", \"funds\", \"fundus\", \"funest\", \"fungal\", \"fungi\", \"fungic\", \"fungo\", \"fungus\", \"funk\", \"funked\", \"funker\", \"funkia\", \"funks\", \"funky\", \"funned\", \"funnel\", \"funner\", \"funny\", \"funs\", \"fur\", \"furan\", \"furane\", \"furans\", \"furfur\", \"furies\", \"furl\", \"furled\", \"furler\", \"furls\", \"furor\", \"furore\", \"furors\", \"furred\", \"furrow\", \"furry\", \"furs\", \"fury\", \"furze\", \"furzes\", \"furzy\", \"fusain\", \"fuse\", \"fused\", \"fusee\", \"fusees\", \"fusel\", \"fusels\", \"fuses\", \"fusil\", \"fusile\", \"fusils\", \"fusing\", \"fusion\", \"fuss\", \"fussed\", \"fusser\", \"fusses\", \"fussy\", \"fustic\", \"fusty\", \"futile\", \"futon\", \"futons\", \"future\", \"futz\", \"futzed\", \"futzes\", \"fuze\", \"fuzed\", \"fuzee\", \"fuzees\", \"fuzes\", \"fuzil\", \"fuzils\", \"fuzing\", \"fuzz\", \"fuzzed\", \"fuzzes\", \"fuzzy\", \"fyce\", \"fyces\", \"fyke\", \"fykes\", \"fylfot\", \"fytte\", \"fyttes\", \"gab\", \"gabbed\", \"gabber\", \"gabble\", \"gabbro\", \"gabby\", \"gabies\", \"gabion\", \"gable\", \"gabled\", \"gables\", \"gaboon\", \"gabs\", \"gaby\", \"gad\", \"gadded\", \"gadder\", \"gaddi\", \"gaddis\", \"gadfly\", \"gadget\", \"gadi\", \"gadid\", \"gadids\", \"gadis\", \"gadoid\", \"gads\", \"gae\", \"gaed\", \"gaeing\", \"gaen\", \"gaes\", \"gaff\", \"gaffe\", \"gaffed\", \"gaffer\", \"gaffes\", \"gaffs\", \"gag\", \"gaga\", \"gagaku\", \"gage\", \"gaged\", \"gager\", \"gagers\", \"gages\", \"gagged\", \"gagger\", \"gaggle\", \"gaging\", \"gagman\", \"gagmen\", \"gags\", \"gaiety\", \"gaijin\", \"gaily\", \"gain\", \"gained\", \"gainer\", \"gainly\", \"gains\", \"gainst\", \"gait\", \"gaited\", \"gaiter\", \"gaits\", \"gal\", \"gala\", \"galago\", \"galah\", \"galahs\", \"galas\", \"galax\", \"galaxy\", \"gale\", \"galea\", \"galeae\", \"galeas\", \"galena\", \"galere\", \"gales\", \"galiot\", \"gall\", \"galled\", \"gallet\", \"galley\", \"gallic\", \"gallon\", \"gallop\", \"galls\", \"gallus\", \"gally\", \"galoot\", \"galop\", \"galops\", \"galore\", \"galosh\", \"gals\", \"galyac\", \"galyak\", \"gam\", \"gama\", \"gamas\", \"gamay\", \"gamays\", \"gamb\", \"gamba\", \"gambas\", \"gambe\", \"gambes\", \"gambia\", \"gambir\", \"gambit\", \"gamble\", \"gambol\", \"gambs\", \"game\", \"gamed\", \"gamely\", \"gamer\", \"gamers\", \"games\", \"gamest\", \"gamete\", \"gamey\", \"gamic\", \"gamier\", \"gamily\", \"gamin\", \"gamine\", \"gaming\", \"gamins\", \"gamma\", \"gammas\", \"gammed\", \"gammer\", \"gammon\", \"gammy\", \"gamp\", \"gamps\", \"gams\", \"gamut\", \"gamuts\", \"gamy\", \"gan\", \"gander\", \"gane\", \"ganef\", \"ganefs\", \"ganev\", \"ganevs\", \"gang\", \"ganged\", \"ganger\", \"gangly\", \"gangs\", \"gangue\", \"ganja\", \"ganjah\", \"ganjas\", \"gannet\", \"ganof\", \"ganofs\", \"ganoid\", \"gantry\", \"gaol\", \"gaoled\", \"gaoler\", \"gaols\", \"gap\", \"gape\", \"gaped\", \"gaper\", \"gapers\", \"gapes\", \"gaping\", \"gapped\", \"gappy\", \"gaps\", \"gapy\", \"gar\", \"garage\", \"garb\", \"garbed\", \"garble\", \"garbs\", \"garcon\", \"garden\", \"garget\", \"gargle\", \"garish\", \"garlic\", \"garner\", \"garnet\", \"garni\", \"garote\", \"garred\", \"garret\", \"garron\", \"gars\", \"garter\", \"garth\", \"garths\", \"garvey\", \"gas\", \"gasbag\", \"gascon\", \"gases\", \"gash\", \"gashed\", \"gasher\", \"gashes\", \"gasify\", \"gasket\", \"gaskin\", \"gaslit\", \"gasman\", \"gasmen\", \"gasp\", \"gasped\", \"gasper\", \"gasps\", \"gassed\", \"gasser\", \"gasses\", \"gassy\", \"gast\", \"gasted\", \"gaster\", \"gasts\", \"gat\", \"gate\", \"gateau\", \"gated\", \"gates\", \"gather\", \"gating\", \"gator\", \"gators\", \"gats\", \"gauche\", \"gaucho\", \"gaud\", \"gauds\", \"gaudy\", \"gauge\", \"gauged\", \"gauger\", \"gauges\", \"gault\", \"gaults\", \"gaum\", \"gaumed\", \"gaums\", \"gaun\", \"gaunt\", \"gaur\", \"gaurs\", \"gauss\", \"gauze\", \"gauzes\", \"gauzy\", \"gavage\", \"gave\", \"gavel\", \"gavels\", \"gavial\", \"gavot\", \"gavots\", \"gawk\", \"gawked\", \"gawker\", \"gawks\", \"gawky\", \"gawp\", \"gawped\", \"gawper\", \"gawps\", \"gawsie\", \"gawsy\", \"gay\", \"gayal\", \"gayals\", \"gayer\", \"gayest\", \"gayety\", \"gayly\", \"gays\", \"gazabo\", \"gazar\", \"gazars\", \"gaze\", \"gazebo\", \"gazed\", \"gazer\", \"gazers\", \"gazes\", \"gazing\", \"gazump\", \"gear\", \"geared\", \"gears\", \"geck\", \"gecked\", \"gecko\", \"geckos\", \"gecks\", \"ged\", \"geds\", \"gee\", \"geed\", \"geegaw\", \"geeing\", \"geek\", \"geeks\", \"geeky\", \"gees\", \"geese\", \"geest\", \"geests\", \"geez\", \"geezer\", \"geisha\", \"gel\", \"gelada\", \"gelant\", \"gelate\", \"gelati\", \"gelato\", \"geld\", \"gelded\", \"gelder\", \"gelds\", \"gelee\", \"gelees\", \"gelid\", \"gelled\", \"gels\", \"gelt\", \"gelts\", \"gem\", \"gemma\", \"gemmae\", \"gemmed\", \"gemmy\", \"gemot\", \"gemote\", \"gemots\", \"gems\", \"gen\", \"gender\", \"gene\", \"genera\", \"genes\", \"genet\", \"genets\", \"geneva\", \"genial\", \"genic\", \"genie\", \"genies\", \"genii\", \"genip\", \"genips\", \"genius\", \"genoa\", \"genoas\", \"genom\", \"genome\", \"genoms\", \"genre\", \"genres\", \"genro\", \"genros\", \"gens\", \"gent\", \"gentes\", \"gentil\", \"gentle\", \"gently\", \"gentoo\", \"gentry\", \"gents\", \"genu\", \"genua\", \"genus\", \"geode\", \"geodes\", \"geodic\", \"geoid\", \"geoids\", \"gerah\", \"gerahs\", \"gerbil\", \"gerent\", \"germ\", \"german\", \"germen\", \"germs\", \"germy\", \"gerund\", \"gesso\", \"gest\", \"geste\", \"gestes\", \"gestic\", \"gests\", \"get\", \"geta\", \"getas\", \"gets\", \"getter\", \"getup\", \"getups\", \"geum\", \"geums\", \"gewgaw\", \"gey\", \"geyser\", \"gharri\", \"gharry\", \"ghast\", \"ghat\", \"ghats\", \"ghaut\", \"ghauts\", \"ghazi\", \"ghazis\", \"ghee\", \"ghees\", \"gherao\", \"ghetto\", \"ghi\", \"ghibli\", \"ghis\", \"ghost\", \"ghosts\", \"ghosty\", \"ghoul\", \"ghouls\", \"ghyll\", \"ghylls\", \"giant\", \"giants\", \"giaour\", \"gib\", \"gibbed\", \"gibber\", \"gibbet\", \"gibbon\", \"gibe\", \"gibed\", \"giber\", \"gibers\", \"gibes\", \"gibing\", \"giblet\", \"gibs\", \"gibson\", \"gid\", \"giddap\", \"giddy\", \"gids\", \"gie\", \"gied\", \"gieing\", \"gien\", \"gies\", \"gift\", \"gifted\", \"gifts\", \"gig\", \"giga\", \"gigas\", \"gigged\", \"giggle\", \"giggly\", \"gighe\", \"giglet\", \"giglot\", \"gigolo\", \"gigot\", \"gigots\", \"gigs\", \"gigue\", \"gigues\", \"gild\", \"gilded\", \"gilder\", \"gilds\", \"gill\", \"gilled\", \"giller\", \"gillie\", \"gills\", \"gilly\", \"gilt\", \"gilts\", \"gimbal\", \"gimel\", \"gimels\", \"gimlet\", \"gimmal\", \"gimme\", \"gimmes\", \"gimmie\", \"gimp\", \"gimped\", \"gimps\", \"gimpy\", \"gin\", \"gingal\", \"ginger\", \"gingko\", \"gink\", \"ginkgo\", \"ginks\", \"ginned\", \"ginner\", \"ginny\", \"gins\", \"gip\", \"gipon\", \"gipons\", \"gipped\", \"gipper\", \"gips\", \"gipsy\", \"gird\", \"girded\", \"girder\", \"girdle\", \"girds\", \"girl\", \"girlie\", \"girls\", \"girly\", \"girn\", \"girned\", \"girns\", \"giro\", \"giron\", \"girons\", \"giros\", \"girsh\", \"girt\", \"girted\", \"girth\", \"girths\", \"girts\", \"gismo\", \"gismos\", \"gist\", \"gists\", \"git\", \"gitano\", \"gits\", \"gittin\", \"give\", \"given\", \"givens\", \"giver\", \"givers\", \"gives\", \"giving\", \"gizmo\", \"gizmos\", \"glace\", \"glaces\", \"glacis\", \"glad\", \"glade\", \"glades\", \"gladly\", \"glads\", \"glady\", \"glair\", \"glaire\", \"glairs\", \"glairy\", \"glaive\", \"glamor\", \"glance\", \"gland\", \"glands\", \"glans\", \"glare\", \"glared\", \"glares\", \"glary\", \"glass\", \"glassy\", \"glaze\", \"glazed\", \"glazer\", \"glazes\", \"glazy\", \"gleam\", \"gleams\", \"gleamy\", \"glean\", \"gleans\", \"gleba\", \"glebae\", \"glebe\", \"glebes\", \"gled\", \"glede\", \"gledes\", \"gleds\", \"glee\", \"gleed\", \"gleeds\", \"gleek\", \"gleeks\", \"glees\", \"gleet\", \"gleets\", \"gleety\", \"gleg\", \"glegly\", \"glen\", \"glens\", \"gley\", \"gleyed\", \"gleys\", \"glia\", \"glial\", \"glias\", \"glib\", \"glibly\", \"glide\", \"glided\", \"glider\", \"glides\", \"gliff\", \"gliffs\", \"glim\", \"glime\", \"glimed\", \"glimes\", \"glims\", \"glint\", \"glints\", \"glioma\", \"glitch\", \"glitz\", \"glitzy\", \"gloam\", \"gloams\", \"gloat\", \"gloats\", \"glob\", \"global\", \"globby\", \"globe\", \"globed\", \"globes\", \"globin\", \"globs\", \"glogg\", \"gloggs\", \"glom\", \"gloms\", \"glomus\", \"gloom\", \"glooms\", \"gloomy\", \"glop\", \"gloppy\", \"glops\", \"gloria\", \"glory\", \"gloss\", \"glossa\", \"glossy\", \"glost\", \"glosts\", \"glout\", \"glouts\", \"glove\", \"gloved\", \"glover\", \"gloves\", \"glow\", \"glowed\", \"glower\", \"glows\", \"gloze\", \"glozed\", \"glozes\", \"glucan\", \"glue\", \"glued\", \"gluer\", \"gluers\", \"glues\", \"gluey\", \"glug\", \"glugs\", \"gluier\", \"gluily\", \"gluing\", \"glum\", \"glume\", \"glumes\", \"glumly\", \"glumpy\", \"glunch\", \"gluon\", \"gluons\", \"glut\", \"glutei\", \"gluten\", \"gluts\", \"glycan\", \"glycin\", \"glycol\", \"glycyl\", \"glyph\", \"glyphs\", \"gnar\", \"gnarl\", \"gnarls\", \"gnarly\", \"gnarr\", \"gnarrs\", \"gnars\", \"gnash\", \"gnat\", \"gnats\", \"gnatty\", \"gnaw\", \"gnawed\", \"gnawer\", \"gnawn\", \"gnaws\", \"gneiss\", \"gnome\", \"gnomes\", \"gnomic\", \"gnomon\", \"gnoses\", \"gnosis\", \"gnu\", \"gnus\", \"goa\", \"goad\", \"goaded\", \"goads\", \"goal\", \"goaled\", \"goalie\", \"goals\", \"goanna\", \"goas\", \"goat\", \"goatee\", \"goats\", \"gob\", \"goban\", \"gobang\", \"gobans\", \"gobbed\", \"gobbet\", \"gobble\", \"gobies\", \"goblet\", \"goblin\", \"gobo\", \"goboes\", \"gobony\", \"gobos\", \"gobs\", \"goby\", \"god\", \"goddam\", \"godded\", \"godet\", \"godets\", \"godly\", \"godown\", \"gods\", \"godson\", \"godwit\", \"goer\", \"goers\", \"goes\", \"gofer\", \"gofers\", \"goffer\", \"goggle\", \"goggly\", \"goglet\", \"gogo\", \"gogos\", \"going\", \"goings\", \"goiter\", \"goitre\", \"gold\", \"golden\", \"golder\", \"golds\", \"golem\", \"golems\", \"golf\", \"golfed\", \"golfer\", \"golfs\", \"golly\", \"golosh\", \"gombo\", \"gombos\", \"gomuti\", \"gonad\", \"gonads\", \"gone\", \"gonef\", \"gonefs\", \"goner\", \"goners\", \"gong\", \"gonged\", \"gongs\", \"gonia\", \"gonif\", \"goniff\", \"gonifs\", \"gonion\", \"gonium\", \"gonof\", \"gonofs\", \"gonoph\", \"gonzo\", \"goo\", \"goober\", \"good\", \"goodby\", \"goodie\", \"goodly\", \"goods\", \"goody\", \"gooey\", \"goof\", \"goofed\", \"goofs\", \"goofy\", \"googly\", \"googol\", \"gooier\", \"gook\", \"gooks\", \"gooky\", \"goon\", \"gooney\", \"goonie\", \"goons\", \"goony\", \"goop\", \"goops\", \"goopy\", \"gooral\", \"goos\", \"goose\", \"goosed\", \"gooses\", \"goosey\", \"goosy\", \"gopher\", \"gor\", \"goral\", \"gorals\", \"gore\", \"gored\", \"gores\", \"gorge\", \"gorged\", \"gorger\", \"gorges\", \"gorget\", \"gorgon\", \"gorhen\", \"gorier\", \"gorily\", \"goring\", \"gorp\", \"gorps\", \"gorse\", \"gorses\", \"gorsy\", \"gory\", \"gosh\", \"gospel\", \"gossan\", \"gossip\", \"got\", \"gothic\", \"gotten\", \"gouge\", \"gouged\", \"gouger\", \"gouges\", \"gourd\", \"gourde\", \"gourds\", \"gout\", \"gouts\", \"gouty\", \"govern\", \"gowan\", \"gowans\", \"gowany\", \"gowd\", \"gowds\", \"gowk\", \"gowks\", \"gown\", \"gowned\", \"gowns\", \"gox\", \"goxes\", \"goy\", \"goyim\", \"goyish\", \"goys\", \"graal\", \"graals\", \"grab\", \"grabby\", \"graben\", \"grabs\", \"grace\", \"graced\", \"graces\", \"grad\", \"grade\", \"graded\", \"grader\", \"grades\", \"gradin\", \"grads\", \"gradus\", \"graft\", \"grafts\", \"graham\", \"grail\", \"grails\", \"grain\", \"grains\", \"grainy\", \"gram\", \"grama\", \"gramas\", \"gramme\", \"gramp\", \"gramps\", \"grams\", \"gran\", \"grana\", \"grand\", \"grands\", \"grange\", \"granny\", \"grans\", \"grant\", \"grants\", \"granum\", \"grape\", \"grapes\", \"grapey\", \"graph\", \"graphs\", \"grappa\", \"grapy\", \"grasp\", \"grasps\", \"grass\", \"grassy\", \"grat\", \"grate\", \"grated\", \"grater\", \"grates\", \"gratin\", \"gratis\", \"grave\", \"graved\", \"gravel\", \"graven\", \"graver\", \"graves\", \"gravid\", \"gravy\", \"gray\", \"grayed\", \"grayer\", \"grayly\", \"grays\", \"graze\", \"grazed\", \"grazer\", \"grazes\", \"grease\", \"greasy\", \"great\", \"greats\", \"greave\", \"grebe\", \"grebes\", \"gree\", \"greed\", \"greeds\", \"greedy\", \"greek\", \"green\", \"greens\", \"greeny\", \"grees\", \"greet\", \"greets\", \"grego\", \"gregos\", \"greige\", \"gremmy\", \"grew\", \"grey\", \"greyed\", \"greyer\", \"greyly\", \"greys\", \"grid\", \"gride\", \"grided\", \"grides\", \"grids\", \"grief\", \"griefs\", \"grieve\", \"griff\", \"griffe\", \"griffs\", \"grift\", \"grifts\", \"grig\", \"grigri\", \"grigs\", \"grill\", \"grille\", \"grills\", \"grilse\", \"grim\", \"grime\", \"grimed\", \"grimes\", \"grimly\", \"grimy\", \"grin\", \"grinch\", \"grind\", \"grinds\", \"gringo\", \"grins\", \"griot\", \"griots\", \"grip\", \"gripe\", \"griped\", \"griper\", \"gripes\", \"gripey\", \"grippe\", \"grippy\", \"grips\", \"gript\", \"gripy\", \"grisly\", \"grison\", \"grist\", \"grists\", \"grit\", \"grith\", \"griths\", \"grits\", \"gritty\", \"grivet\", \"groan\", \"groans\", \"groat\", \"groats\", \"grocer\", \"grog\", \"groggy\", \"grogs\", \"groin\", \"groins\", \"groom\", \"grooms\", \"groove\", \"groovy\", \"grope\", \"groped\", \"groper\", \"gropes\", \"gross\", \"grosz\", \"grosze\", \"groszy\", \"grot\", \"grots\", \"grotto\", \"grotty\", \"grouch\", \"ground\", \"group\", \"groups\", \"grouse\", \"grout\", \"grouts\", \"grouty\", \"grove\", \"groved\", \"grovel\", \"groves\", \"grow\", \"grower\", \"growl\", \"growls\", \"growly\", \"grown\", \"grows\", \"growth\", \"groyne\", \"grub\", \"grubby\", \"grubs\", \"grudge\", \"grue\", \"gruel\", \"gruels\", \"grues\", \"gruff\", \"gruffs\", \"gruffy\", \"grugru\", \"grum\", \"grume\", \"grumes\", \"grump\", \"grumps\", \"grumpy\", \"grunge\", \"grungy\", \"grunt\", \"grunts\", \"grutch\", \"guaco\", \"guacos\", \"guaiac\", \"guan\", \"guanay\", \"guanin\", \"guano\", \"guanos\", \"guans\", \"guar\", \"guard\", \"guards\", \"guars\", \"guava\", \"guavas\", \"guck\", \"gucks\", \"gude\", \"gudes\", \"guenon\", \"guess\", \"guest\", \"guests\", \"guff\", \"guffaw\", \"guffs\", \"guggle\", \"guglet\", \"guid\", \"guide\", \"guided\", \"guider\", \"guides\", \"guidon\", \"guids\", \"guild\", \"guilds\", \"guile\", \"guiled\", \"guiles\", \"guilt\", \"guilts\", \"guilty\", \"guimpe\", \"guinea\", \"guiro\", \"guiros\", \"guise\", \"guised\", \"guises\", \"guitar\", \"gul\", \"gulag\", \"gulags\", \"gular\", \"gulch\", \"gulden\", \"gules\", \"gulf\", \"gulfed\", \"gulfs\", \"gulfy\", \"gull\", \"gulled\", \"gullet\", \"gulley\", \"gulls\", \"gully\", \"gulp\", \"gulped\", \"gulper\", \"gulps\", \"gulpy\", \"guls\", \"gum\", \"gumbo\", \"gumbos\", \"gumma\", \"gummas\", \"gummed\", \"gummer\", \"gummy\", \"gums\", \"gun\", \"gundog\", \"gunite\", \"gunk\", \"gunks\", \"gunky\", \"gunman\", \"gunmen\", \"gunned\", \"gunnel\", \"gunnen\", \"gunner\", \"gunny\", \"guns\", \"gunsel\", \"guppy\", \"gurge\", \"gurged\", \"gurges\", \"gurgle\", \"gurnet\", \"gurney\", \"gurry\", \"gursh\", \"guru\", \"gurus\", \"gush\", \"gushed\", \"gusher\", \"gushes\", \"gushy\", \"gusset\", \"gussie\", \"gussy\", \"gust\", \"gusted\", \"gusto\", \"gusts\", \"gusty\", \"gut\", \"guts\", \"gutsy\", \"gutta\", \"guttae\", \"gutted\", \"gutter\", \"guttle\", \"gutty\", \"guv\", \"guvs\", \"guy\", \"guyed\", \"guying\", \"guyot\", \"guyots\", \"guys\", \"guzzle\", \"gweduc\", \"gybe\", \"gybed\", \"gybes\", \"gybing\", \"gym\", \"gyms\", \"gyp\", \"gypped\", \"gypper\", \"gyps\", \"gypsum\", \"gypsy\", \"gyral\", \"gyrase\", \"gyrate\", \"gyre\", \"gyred\", \"gyrene\", \"gyres\", \"gyri\", \"gyring\", \"gyro\", \"gyron\", \"gyrons\", \"gyros\", \"gyrose\", \"gyrus\", \"gyve\", \"gyved\", \"gyves\", \"gyving\", \"haaf\", \"haafs\", \"haar\", \"haars\", \"habile\", \"habit\", \"habits\", \"haboob\", \"habu\", \"habus\", \"hacek\", \"haceks\", \"hack\", \"hacked\", \"hackee\", \"hacker\", \"hackie\", \"hackle\", \"hackly\", \"hacks\", \"had\", \"hadal\", \"hade\", \"haded\", \"hades\", \"hading\", \"hadith\", \"hadj\", \"hadjee\", \"hadjes\", \"hadji\", \"hadjis\", \"hadron\", \"hadst\", \"hae\", \"haed\", \"haeing\", \"haem\", \"haemal\", \"haemic\", \"haemin\", \"haems\", \"haen\", \"haeres\", \"haes\", \"haet\", \"haets\", \"haffet\", \"haffit\", \"hafis\", \"hafiz\", \"haft\", \"hafted\", \"hafter\", \"hafts\", \"hag\", \"hagbut\", \"hagdon\", \"hagged\", \"haggis\", \"haggle\", \"hags\", \"hah\", \"haha\", \"hahas\", \"hahs\", \"haik\", \"haika\", \"haiks\", \"haiku\", \"hail\", \"hailed\", \"hailer\", \"hails\", \"hair\", \"hairdo\", \"haired\", \"hairs\", \"hairy\", \"haj\", \"hajes\", \"haji\", \"hajis\", \"hajj\", \"hajjes\", \"hajji\", \"hajjis\", \"hake\", \"hakeem\", \"hakes\", \"hakim\", \"hakims\", \"halala\", \"hale\", \"haled\", \"haler\", \"halers\", \"haleru\", \"hales\", \"halest\", \"half\", \"halid\", \"halide\", \"halids\", \"haling\", \"halite\", \"hall\", \"hallah\", \"hallel\", \"hallo\", \"halloa\", \"halloo\", \"hallos\", \"hallot\", \"hallow\", \"halls\", \"hallux\", \"halm\", \"halma\", \"halmas\", \"halms\", \"halo\", \"haloed\", \"haloes\", \"haloid\", \"halos\", \"halt\", \"halted\", \"halter\", \"halts\", \"halutz\", \"halva\", \"halvah\", \"halvas\", \"halve\", \"halved\", \"halves\", \"ham\", \"hamada\", \"hamal\", \"hamals\", \"hamate\", \"hamaul\", \"hame\", \"hames\", \"hamlet\", \"hammal\", \"hammed\", \"hammer\", \"hammy\", \"hamper\", \"hams\", \"hamuli\", \"hamza\", \"hamzah\", \"hamzas\", \"hance\", \"hances\", \"hand\", \"handed\", \"handle\", \"hands\", \"handy\", \"hang\", \"hangar\", \"hanged\", \"hanger\", \"hangs\", \"hangul\", \"hangup\", \"haniwa\", \"hank\", \"hanked\", \"hanker\", \"hankie\", \"hanks\", \"hanky\", \"hansa\", \"hansas\", \"hanse\", \"hansel\", \"hanses\", \"hansom\", \"hant\", \"hanted\", \"hantle\", \"hants\", \"hao\", \"haole\", \"haoles\", \"hap\", \"hapax\", \"haply\", \"happed\", \"happen\", \"happy\", \"haps\", \"hapten\", \"haptic\", \"harass\", \"harbor\", \"hard\", \"harden\", \"harder\", \"hardly\", \"hards\", \"hardy\", \"hare\", \"hared\", \"hareem\", \"harem\", \"harems\", \"hares\", \"haring\", \"hark\", \"harked\", \"harken\", \"harks\", \"harl\", \"harlot\", \"harls\", \"harm\", \"harmed\", \"harmer\", \"harmin\", \"harms\", \"harp\", \"harped\", \"harper\", \"harpin\", \"harps\", \"harpy\", \"harrow\", \"harry\", \"harsh\", \"hart\", \"hartal\", \"harts\", \"has\", \"hash\", \"hashed\", \"hashes\", \"haslet\", \"hasp\", \"hasped\", \"hasps\", \"hassel\", \"hassle\", \"hast\", \"haste\", \"hasted\", \"hasten\", \"hastes\", \"hasty\", \"hat\", \"hatbox\", \"hatch\", \"hate\", \"hated\", \"hater\", \"haters\", \"hates\", \"hatful\", \"hath\", \"hating\", \"hatpin\", \"hatred\", \"hats\", \"hatted\", \"hatter\", \"haugh\", \"haughs\", \"haul\", \"hauled\", \"hauler\", \"haulm\", \"haulms\", \"haulmy\", \"hauls\", \"haunch\", \"haunt\", \"haunts\", \"hausen\", \"haut\", \"haute\", \"have\", \"haven\", \"havens\", \"haver\", \"havers\", \"haves\", \"having\", \"havior\", \"havoc\", \"havocs\", \"haw\", \"hawed\", \"hawing\", \"hawk\", \"hawked\", \"hawker\", \"hawkey\", \"hawkie\", \"hawks\", \"haws\", \"hawse\", \"hawser\", \"hawses\", \"hay\", \"hayed\", \"hayer\", \"hayers\", \"haying\", \"haymow\", \"hays\", \"hazan\", \"hazans\", \"hazard\", \"haze\", \"hazed\", \"hazel\", \"hazels\", \"hazer\", \"hazers\", \"hazes\", \"hazier\", \"hazily\", \"hazing\", \"hazy\", \"hazzan\", \"head\", \"headed\", \"header\", \"heads\", \"heady\", \"heal\", \"healed\", \"healer\", \"heals\", \"health\", \"heap\", \"heaped\", \"heaps\", \"hear\", \"heard\", \"hearer\", \"hears\", \"hearse\", \"heart\", \"hearth\", \"hearts\", \"hearty\", \"heat\", \"heated\", \"heater\", \"heath\", \"heaths\", \"heathy\", \"heats\", \"heaume\", \"heave\", \"heaved\", \"heaven\", \"heaver\", \"heaves\", \"heavy\", \"hebe\", \"hebes\", \"heck\", \"heckle\", \"hecks\", \"hectic\", \"hector\", \"heddle\", \"heder\", \"heders\", \"hedge\", \"hedged\", \"hedger\", \"hedges\", \"hedgy\", \"heed\", \"heeded\", \"heeder\", \"heeds\", \"heehaw\", \"heel\", \"heeled\", \"heeler\", \"heels\", \"heeze\", \"heezed\", \"heezes\", \"heft\", \"hefted\", \"hefter\", \"hefts\", \"hefty\", \"hegari\", \"hegira\", \"heh\", \"hehs\", \"heifer\", \"heigh\", \"height\", \"heil\", \"heiled\", \"heils\", \"heinie\", \"heir\", \"heired\", \"heirs\", \"heishi\", \"heist\", \"heists\", \"hejira\", \"held\", \"heliac\", \"helio\", \"helios\", \"helium\", \"helix\", \"hell\", \"helled\", \"heller\", \"hello\", \"hellos\", \"hells\", \"helm\", \"helmed\", \"helmet\", \"helms\", \"helo\", \"helos\", \"helot\", \"helots\", \"help\", \"helped\", \"helper\", \"helps\", \"helve\", \"helved\", \"helves\", \"hem\", \"hemal\", \"heme\", \"hemes\", \"hemic\", \"hemin\", \"hemins\", \"hemmed\", \"hemmer\", \"hemoid\", \"hemp\", \"hempen\", \"hempie\", \"hemps\", \"hempy\", \"hems\", \"hen\", \"henbit\", \"hence\", \"henna\", \"hennas\", \"henry\", \"henrys\", \"hens\", \"hent\", \"hented\", \"hents\", \"hep\", \"hepcat\", \"heptad\", \"her\", \"herald\", \"herb\", \"herbal\", \"herbed\", \"herbs\", \"herby\", \"herd\", \"herded\", \"herder\", \"herdic\", \"herds\", \"here\", \"hereat\", \"hereby\", \"herein\", \"hereof\", \"hereon\", \"heres\", \"heresy\", \"hereto\", \"heriot\", \"herl\", \"herls\", \"herm\", \"herma\", \"hermae\", \"hermai\", \"hermit\", \"herms\", \"hern\", \"hernia\", \"herns\", \"hero\", \"heroes\", \"heroic\", \"heroin\", \"heron\", \"herons\", \"heros\", \"herpes\", \"herry\", \"hers\", \"hertz\", \"hes\", \"hest\", \"hests\", \"het\", \"hetero\", \"heth\", \"heths\", \"hetman\", \"hets\", \"heuch\", \"heuchs\", \"heugh\", \"heughs\", \"hew\", \"hewed\", \"hewer\", \"hewers\", \"hewing\", \"hewn\", \"hews\", \"hex\", \"hexad\", \"hexade\", \"hexads\", \"hexane\", \"hexed\", \"hexer\", \"hexers\", \"hexes\", \"hexing\", \"hexone\", \"hexose\", \"hexyl\", \"hexyls\", \"hey\", \"heyday\", \"heydey\", \"hiatal\", \"hiatus\", \"hic\", \"hiccup\", \"hick\", \"hickey\", \"hicks\", \"hid\", \"hidden\", \"hide\", \"hided\", \"hider\", \"hiders\", \"hides\", \"hiding\", \"hie\", \"hied\", \"hieing\", \"hiemal\", \"hies\", \"higgle\", \"high\", \"higher\", \"highly\", \"highs\", \"hight\", \"highth\", \"hights\", \"hijack\", \"hike\", \"hiked\", \"hiker\", \"hikers\", \"hikes\", \"hiking\", \"hila\", \"hilar\", \"hili\", \"hill\", \"hilled\", \"hiller\", \"hillo\", \"hilloa\", \"hillos\", \"hills\", \"hilly\", \"hilt\", \"hilted\", \"hilts\", \"hilum\", \"hilus\", \"him\", \"hin\", \"hind\", \"hinder\", \"hinds\", \"hinge\", \"hinged\", \"hinger\", \"hinges\", \"hinny\", \"hins\", \"hint\", \"hinted\", \"hinter\", \"hints\", \"hip\", \"hipped\", \"hipper\", \"hippie\", \"hippo\", \"hippos\", \"hippy\", \"hips\", \"hire\", \"hired\", \"hirer\", \"hirers\", \"hires\", \"hiring\", \"hirple\", \"hirsel\", \"hirsle\", \"his\", \"hisn\", \"hispid\", \"hiss\", \"hissed\", \"hisser\", \"hisses\", \"hissy\", \"hist\", \"histed\", \"hists\", \"hit\", \"hitch\", \"hither\", \"hits\", \"hitter\", \"hive\", \"hived\", \"hives\", \"hiving\", \"hmm\", \"hoagie\", \"hoagy\", \"hoar\", \"hoard\", \"hoards\", \"hoars\", \"hoarse\", \"hoary\", \"hoax\", \"hoaxed\", \"hoaxer\", \"hoaxes\", \"hob\", \"hobbed\", \"hobbit\", \"hobble\", \"hobby\", \"hobnob\", \"hobo\", \"hoboed\", \"hoboes\", \"hobos\", \"hobs\", \"hock\", \"hocked\", \"hocker\", \"hockey\", \"hocks\", \"hocus\", \"hod\", \"hodad\", \"hodads\", \"hodden\", \"hoddin\", \"hods\", \"hoe\", \"hoed\", \"hoeing\", \"hoer\", \"hoers\", \"hoes\", \"hog\", \"hogan\", \"hogans\", \"hogg\", \"hogged\", \"hogger\", \"hogget\", \"hoggs\", \"hognut\", \"hogs\", \"hogtie\", \"hoick\", \"hoicks\", \"hoiden\", \"hoise\", \"hoised\", \"hoises\", \"hoist\", \"hoists\", \"hoke\", \"hoked\", \"hokes\", \"hokey\", \"hokier\", \"hokily\", \"hoking\", \"hokku\", \"hokum\", \"hokums\", \"holard\", \"hold\", \"holden\", \"holder\", \"holds\", \"holdup\", \"hole\", \"holed\", \"holes\", \"holey\", \"holier\", \"holies\", \"holily\", \"holing\", \"holism\", \"holist\", \"holk\", \"holked\", \"holks\", \"holla\", \"hollas\", \"holler\", \"hollo\", \"holloa\", \"holloo\", \"hollos\", \"hollow\", \"holly\", \"holm\", \"holmic\", \"holms\", \"holp\", \"holpen\", \"hols\", \"holt\", \"holts\", \"holy\", \"homage\", \"hombre\", \"home\", \"homed\", \"homely\", \"homer\", \"homers\", \"homes\", \"homey\", \"homier\", \"homily\", \"homing\", \"hominy\", \"hommos\", \"homo\", \"homos\", \"homy\", \"hon\", \"honan\", \"honans\", \"honcho\", \"honda\", \"hondas\", \"hondle\", \"hone\", \"honed\", \"honer\", \"honers\", \"hones\", \"honest\", \"honey\", \"honeys\", \"hong\", \"hongs\", \"honied\", \"honing\", \"honk\", \"honked\", \"honker\", \"honkey\", \"honkie\", \"honks\", \"honky\", \"honor\", \"honors\", \"honour\", \"hons\", \"hooch\", \"hood\", \"hooded\", \"hoodie\", \"hoodoo\", \"hoods\", \"hoody\", \"hooey\", \"hooeys\", \"hoof\", \"hoofed\", \"hoofer\", \"hoofs\", \"hook\", \"hooka\", \"hookah\", \"hookas\", \"hooked\", \"hooker\", \"hookey\", \"hooks\", \"hookup\", \"hooky\", \"hoolie\", \"hooly\", \"hoop\", \"hooped\", \"hooper\", \"hoopla\", \"hoopoe\", \"hoopoo\", \"hoops\", \"hoorah\", \"hooray\", \"hoot\", \"hootch\", \"hooted\", \"hooter\", \"hoots\", \"hooty\", \"hooved\", \"hooves\", \"hop\", \"hope\", \"hoped\", \"hoper\", \"hopers\", \"hopes\", \"hoping\", \"hopped\", \"hopper\", \"hopple\", \"hoppy\", \"hops\", \"hora\", \"horah\", \"horahs\", \"horal\", \"horary\", \"horas\", \"horde\", \"horded\", \"hordes\", \"horn\", \"horned\", \"hornet\", \"horns\", \"horny\", \"horrid\", \"horror\", \"horse\", \"horsed\", \"horses\", \"horsey\", \"horst\", \"horste\", \"horsts\", \"horsy\", \"hose\", \"hosed\", \"hosel\", \"hosels\", \"hosen\", \"hoses\", \"hosier\", \"hosing\", \"host\", \"hosta\", \"hostas\", \"hosted\", \"hostel\", \"hostly\", \"hosts\", \"hot\", \"hotbed\", \"hotbox\", \"hotch\", \"hotdog\", \"hotel\", \"hotels\", \"hotly\", \"hotrod\", \"hots\", \"hotted\", \"hotter\", \"houdah\", \"hound\", \"hounds\", \"hour\", \"houri\", \"houris\", \"hourly\", \"hours\", \"house\", \"housed\", \"housel\", \"houser\", \"houses\", \"hove\", \"hovel\", \"hovels\", \"hover\", \"hovers\", \"how\", \"howdah\", \"howdie\", \"howdy\", \"howe\", \"howes\", \"howf\", \"howff\", \"howffs\", \"howfs\", \"howk\", \"howked\", \"howks\", \"howl\", \"howled\", \"howler\", \"howlet\", \"howls\", \"hows\", \"hoy\", \"hoya\", \"hoyas\", \"hoyden\", \"hoyle\", \"hoyles\", \"hoys\", \"hub\", \"hubbly\", \"hubbub\", \"hubby\", \"hubcap\", \"hubris\", \"hubs\", \"huck\", \"huckle\", \"hucks\", \"huddle\", \"hue\", \"hued\", \"hues\", \"huff\", \"huffed\", \"huffs\", \"huffy\", \"hug\", \"huge\", \"hugely\", \"huger\", \"hugest\", \"hugged\", \"hugger\", \"hugs\", \"huh\", \"huic\", \"huipil\", \"hula\", \"hulas\", \"hulk\", \"hulked\", \"hulks\", \"hulky\", \"hull\", \"hulled\", \"huller\", \"hullo\", \"hulloa\", \"hullos\", \"hulls\", \"hum\", \"human\", \"humane\", \"humans\", \"humate\", \"humble\", \"humbly\", \"humbug\", \"humeri\", \"humic\", \"humid\", \"hummed\", \"hummer\", \"hummus\", \"humor\", \"humors\", \"humour\", \"hump\", \"humped\", \"humph\", \"humphs\", \"humps\", \"humpy\", \"hums\", \"humus\", \"humvee\", \"hun\", \"hunch\", \"hung\", \"hunger\", \"hungry\", \"hunh\", \"hunk\", \"hunker\", \"hunks\", \"hunky\", \"huns\", \"hunt\", \"hunted\", \"hunter\", \"hunts\", \"hup\", \"hurdle\", \"hurds\", \"hurl\", \"hurled\", \"hurler\", \"hurley\", \"hurls\", \"hurly\", \"hurrah\", \"hurray\", \"hurry\", \"hurst\", \"hursts\", \"hurt\", \"hurter\", \"hurtle\", \"hurts\", \"hush\", \"hushed\", \"hushes\", \"husk\", \"husked\", \"husker\", \"husks\", \"husky\", \"hussar\", \"hussy\", \"hustle\", \"hut\", \"hutch\", \"huts\", \"hutted\", \"hutzpa\", \"huzza\", \"huzzah\", \"huzzas\", \"hwan\", \"hyaena\", \"hyalin\", \"hybrid\", \"hybris\", \"hydra\", \"hydrae\", \"hydras\", \"hydria\", \"hydric\", \"hydrid\", \"hydro\", \"hydros\", \"hyena\", \"hyenas\", \"hyenic\", \"hyetal\", \"hying\", \"hyla\", \"hylas\", \"hymen\", \"hymens\", \"hymn\", \"hymnal\", \"hymned\", \"hymns\", \"hyoid\", \"hyoids\", \"hyp\", \"hype\", \"hyped\", \"hyper\", \"hypes\", \"hypha\", \"hyphae\", \"hyphal\", \"hyphen\", \"hyping\", \"hypnic\", \"hypo\", \"hypoed\", \"hypos\", \"hyps\", \"hyrax\", \"hyson\", \"hysons\", \"hyssop\", \"hyte\", \"iamb\", \"iambi\", \"iambic\", \"iambs\", \"iambus\", \"iatric\", \"ibex\", \"ibexes\", \"ibices\", \"ibidem\", \"ibis\", \"ibises\", \"ice\", \"icebox\", \"icecap\", \"iced\", \"iceman\", \"icemen\", \"ices\", \"ich\", \"ichor\", \"ichors\", \"ichs\", \"icicle\", \"icier\", \"iciest\", \"icily\", \"icing\", \"icings\", \"ick\", \"icker\", \"ickers\", \"ickier\", \"ickily\", \"icky\", \"icon\", \"icones\", \"iconic\", \"icons\", \"ictic\", \"ictus\", \"icy\", \"idea\", \"ideal\", \"ideals\", \"ideas\", \"ideate\", \"idem\", \"ides\", \"idiocy\", \"idiom\", \"idioms\", \"idiot\", \"idiots\", \"idle\", \"idled\", \"idler\", \"idlers\", \"idles\", \"idlest\", \"idling\", \"idly\", \"idol\", \"idols\", \"ids\", \"idyl\", \"idyll\", \"idylls\", \"idyls\", \"iff\", \"iffier\", \"iffy\", \"ifs\", \"igloo\", \"igloos\", \"iglu\", \"iglus\", \"ignify\", \"ignite\", \"ignore\", \"iguana\", \"ihram\", \"ihrams\", \"ikat\", \"ikats\", \"ikon\", \"ikons\", \"ilea\", \"ileac\", \"ileal\", \"ileum\", \"ileus\", \"ilex\", \"ilexes\", \"ilia\", \"iliac\", \"iliad\", \"iliads\", \"ilial\", \"ilium\", \"ilk\", \"ilka\", \"ilks\", \"ill\", \"iller\", \"illest\", \"illite\", \"ills\", \"illume\", \"illy\", \"image\", \"imaged\", \"imager\", \"images\", \"imago\", \"imagos\", \"imam\", \"imams\", \"imaret\", \"imaum\", \"imaums\", \"imbalm\", \"imbark\", \"imbed\", \"imbeds\", \"imbibe\", \"imbody\", \"imbrue\", \"imbue\", \"imbued\", \"imbues\", \"imid\", \"imide\", \"imides\", \"imidic\", \"imido\", \"imids\", \"imine\", \"imines\", \"imino\", \"immane\", \"immesh\", \"immies\", \"immix\", \"immune\", \"immure\", \"immy\", \"imp\", \"impact\", \"impair\", \"impala\", \"impale\", \"impark\", \"impart\", \"impawn\", \"imped\", \"impede\", \"impel\", \"impels\", \"impend\", \"imphee\", \"impi\", \"imping\", \"impis\", \"impish\", \"imply\", \"impone\", \"import\", \"impose\", \"impost\", \"improv\", \"imps\", \"impugn\", \"impure\", \"impute\", \"inane\", \"inaner\", \"inanes\", \"inapt\", \"inarch\", \"inarm\", \"inarms\", \"inborn\", \"inbred\", \"inby\", \"inbye\", \"incage\", \"incant\", \"incase\", \"incept\", \"incest\", \"inch\", \"inched\", \"inches\", \"incise\", \"incite\", \"inclip\", \"incog\", \"incogs\", \"income\", \"incony\", \"incubi\", \"incult\", \"incur\", \"incurs\", \"incus\", \"incuse\", \"indaba\", \"indeed\", \"indene\", \"indent\", \"index\", \"indict\", \"indie\", \"indies\", \"indign\", \"indigo\", \"indite\", \"indium\", \"indol\", \"indole\", \"indols\", \"indoor\", \"indow\", \"indows\", \"indri\", \"indris\", \"induce\", \"induct\", \"indue\", \"indued\", \"indues\", \"indult\", \"inept\", \"inert\", \"inerts\", \"infall\", \"infamy\", \"infant\", \"infare\", \"infect\", \"infer\", \"infers\", \"infest\", \"infirm\", \"infix\", \"inflow\", \"influx\", \"info\", \"infold\", \"inform\", \"infos\", \"infra\", \"infuse\", \"ingate\", \"ingest\", \"ingle\", \"ingles\", \"ingot\", \"ingots\", \"ingulf\", \"inhale\", \"inhaul\", \"inhere\", \"inhume\", \"inia\", \"inion\", \"inject\", \"injure\", \"injury\", \"ink\", \"inked\", \"inker\", \"inkers\", \"inkier\", \"inking\", \"inkjet\", \"inkle\", \"inkles\", \"inkpot\", \"inks\", \"inky\", \"inlace\", \"inlaid\", \"inland\", \"inlay\", \"inlays\", \"inlet\", \"inlets\", \"inlier\", \"inly\", \"inmate\", \"inmesh\", \"inmost\", \"inn\", \"innate\", \"inned\", \"inner\", \"inners\", \"inning\", \"inns\", \"inpour\", \"input\", \"inputs\", \"inro\", \"inroad\", \"inrush\", \"ins\", \"insane\", \"inseam\", \"insect\", \"insert\", \"inset\", \"insets\", \"inside\", \"insist\", \"insole\", \"insoul\", \"inspan\", \"instal\", \"instar\", \"instep\", \"instil\", \"insult\", \"insure\", \"intact\", \"intake\", \"intend\", \"intent\", \"inter\", \"intern\", \"inters\", \"inti\", \"intima\", \"intime\", \"intine\", \"intis\", \"into\", \"intomb\", \"intone\", \"intort\", \"intown\", \"intro\", \"intron\", \"intros\", \"intuit\", \"inturn\", \"inulin\", \"inure\", \"inured\", \"inures\", \"inurn\", \"inurns\", \"invade\", \"invar\", \"invars\", \"invent\", \"invert\", \"invest\", \"invite\", \"invoke\", \"inwall\", \"inward\", \"inwind\", \"inwove\", \"inwrap\", \"iodate\", \"iodic\", \"iodid\", \"iodide\", \"iodids\", \"iodin\", \"iodine\", \"iodins\", \"iodise\", \"iodism\", \"iodize\", \"iodous\", \"iolite\", \"ion\", \"ionic\", \"ionics\", \"ionise\", \"ionium\", \"ionize\", \"ionone\", \"ions\", \"iota\", \"iotas\", \"ipecac\", \"irade\", \"irades\", \"irate\", \"irater\", \"ire\", \"ired\", \"ireful\", \"irenic\", \"ires\", \"irid\", \"irides\", \"iridic\", \"irids\", \"iring\", \"iris\", \"irised\", \"irises\", \"iritic\", \"iritis\", \"irk\", \"irked\", \"irking\", \"irks\", \"iroko\", \"irokos\", \"iron\", \"irone\", \"ironed\", \"ironer\", \"irones\", \"ironic\", \"irons\", \"irony\", \"irreal\", \"irrupt\", \"isatin\", \"isba\", \"isbas\", \"ischia\", \"island\", \"isle\", \"isled\", \"isles\", \"islet\", \"islets\", \"isling\", \"ism\", \"isms\", \"isobar\", \"isogon\", \"isohel\", \"isolog\", \"isomer\", \"isopod\", \"issei\", \"isseis\", \"issue\", \"issued\", \"issuer\", \"issues\", \"isthmi\", \"istle\", \"istles\", \"italic\", \"itch\", \"itched\", \"itches\", \"itchy\", \"item\", \"itemed\", \"items\", \"iterum\", \"ither\", \"its\", \"itself\", \"ivied\", \"ivies\", \"ivory\", \"ivy\", \"iwis\", \"ixia\", \"ixias\", \"ixodid\", \"ixora\", \"ixoras\", \"ixtle\", \"ixtles\", \"izar\", \"izars\", \"izzard\", \"jab\", \"jabbed\", \"jabber\", \"jabiru\", \"jabot\", \"jabots\", \"jabs\", \"jacal\", \"jacals\", \"jacana\", \"jack\", \"jackal\", \"jacked\", \"jacker\", \"jacket\", \"jacks\", \"jacky\", \"jade\", \"jaded\", \"jades\", \"jading\", \"jadish\", \"jaeger\", \"jag\", \"jager\", \"jagers\", \"jagg\", \"jagged\", \"jagger\", \"jaggs\", \"jaggy\", \"jagra\", \"jagras\", \"jags\", \"jaguar\", \"jail\", \"jailed\", \"jailer\", \"jailor\", \"jails\", \"jake\", \"jakes\", \"jalap\", \"jalaps\", \"jalop\", \"jalops\", \"jalopy\", \"jam\", \"jamb\", \"jambe\", \"jambed\", \"jambes\", \"jambs\", \"jammed\", \"jammer\", \"jammy\", \"jams\", \"jane\", \"janes\", \"jangle\", \"jangly\", \"janty\", \"japan\", \"japans\", \"jape\", \"japed\", \"japer\", \"japers\", \"japery\", \"japes\", \"japing\", \"jar\", \"jarful\", \"jargon\", \"jarina\", \"jarl\", \"jarls\", \"jarrah\", \"jarred\", \"jars\", \"jarvey\", \"jasmin\", \"jasper\", \"jassid\", \"jato\", \"jatos\", \"jauk\", \"jauked\", \"jauks\", \"jaunce\", \"jaunt\", \"jaunts\", \"jaunty\", \"jaup\", \"jauped\", \"jaups\", \"java\", \"javas\", \"jaw\", \"jawan\", \"jawans\", \"jawed\", \"jawing\", \"jaws\", \"jay\", \"jaygee\", \"jays\", \"jayvee\", \"jazz\", \"jazzed\", \"jazzer\", \"jazzes\", \"jazzy\", \"jean\", \"jeans\", \"jebel\", \"jebels\", \"jee\", \"jeed\", \"jeeing\", \"jeep\", \"jeeped\", \"jeeps\", \"jeer\", \"jeered\", \"jeerer\", \"jeers\", \"jees\", \"jeez\", \"jefe\", \"jefes\", \"jehad\", \"jehads\", \"jehu\", \"jehus\", \"jejuna\", \"jejune\", \"jell\", \"jelled\", \"jells\", \"jelly\", \"jemmy\", \"jennet\", \"jenny\", \"jeon\", \"jerboa\", \"jereed\", \"jerid\", \"jerids\", \"jerk\", \"jerked\", \"jerker\", \"jerkin\", \"jerks\", \"jerky\", \"jerrid\", \"jerry\", \"jersey\", \"jess\", \"jesse\", \"jessed\", \"jesses\", \"jest\", \"jested\", \"jester\", \"jests\", \"jesuit\", \"jet\", \"jete\", \"jetes\", \"jeton\", \"jetons\", \"jets\", \"jetsam\", \"jetsom\", \"jetted\", \"jetton\", \"jetty\", \"jeu\", \"jeux\", \"jew\", \"jewed\", \"jewel\", \"jewels\", \"jewing\", \"jews\", \"jezail\", \"jiao\", \"jib\", \"jibb\", \"jibbed\", \"jibber\", \"jibbs\", \"jibe\", \"jibed\", \"jiber\", \"jibers\", \"jibes\", \"jibing\", \"jibs\", \"jicama\", \"jiff\", \"jiffs\", \"jiffy\", \"jig\", \"jigged\", \"jigger\", \"jiggle\", \"jiggly\", \"jigs\", \"jigsaw\", \"jihad\", \"jihads\", \"jill\", \"jills\", \"jilt\", \"jilted\", \"jilter\", \"jilts\", \"jiminy\", \"jimmy\", \"jimp\", \"jimper\", \"jimply\", \"jimpy\", \"jin\", \"jingal\", \"jingko\", \"jingle\", \"jingly\", \"jingo\", \"jink\", \"jinked\", \"jinker\", \"jinks\", \"jinn\", \"jinnee\", \"jinni\", \"jinns\", \"jins\", \"jinx\", \"jinxed\", \"jinxes\", \"jism\", \"jisms\", \"jitney\", \"jitter\", \"jive\", \"jived\", \"jiver\", \"jivers\", \"jives\", \"jivey\", \"jivier\", \"jiving\", \"jnana\", \"jnanas\", \"job\", \"jobbed\", \"jobber\", \"jobs\", \"jock\", \"jockey\", \"jocko\", \"jockos\", \"jocks\", \"jocose\", \"jocund\", \"joe\", \"joes\", \"joey\", \"joeys\", \"jog\", \"jogged\", \"jogger\", \"joggle\", \"jogs\", \"john\", \"johnny\", \"johns\", \"join\", \"joined\", \"joiner\", \"joins\", \"joint\", \"joints\", \"joist\", \"joists\", \"jojoba\", \"joke\", \"joked\", \"joker\", \"jokers\", \"jokes\", \"jokey\", \"jokier\", \"jokily\", \"joking\", \"joky\", \"jole\", \"joles\", \"jolly\", \"jolt\", \"jolted\", \"jolter\", \"jolts\", \"jolty\", \"jones\", \"joram\", \"jorams\", \"jordan\", \"jorum\", \"jorums\", \"joseph\", \"josh\", \"joshed\", \"josher\", \"joshes\", \"joss\", \"josses\", \"jostle\", \"jot\", \"jota\", \"jotas\", \"jots\", \"jotted\", \"jotter\", \"jotty\", \"joual\", \"jouals\", \"jouk\", \"jouked\", \"jouks\", \"joule\", \"joules\", \"jounce\", \"jouncy\", \"joust\", \"jousts\", \"jovial\", \"jow\", \"jowar\", \"jowars\", \"jowed\", \"jowing\", \"jowl\", \"jowled\", \"jowls\", \"jowly\", \"jows\", \"joy\", \"joyed\", \"joyful\", \"joying\", \"joyous\", \"joypop\", \"joys\", \"juba\", \"jubas\", \"jubbah\", \"jube\", \"jubes\", \"jubhah\", \"jubile\", \"judas\", \"judder\", \"judge\", \"judged\", \"judger\", \"judges\", \"judo\", \"judoka\", \"judos\", \"jug\", \"juga\", \"jugal\", \"jugate\", \"jugful\", \"jugged\", \"juggle\", \"jugs\", \"jugula\", \"jugum\", \"jugums\", \"juice\", \"juiced\", \"juicer\", \"juices\", \"juicy\", \"juju\", \"jujube\", \"jujus\", \"juke\", \"juked\", \"jukes\", \"juking\", \"julep\", \"juleps\", \"jumbal\", \"jumble\", \"jumbo\", \"jumbos\", \"jump\", \"jumped\", \"jumper\", \"jumps\", \"jumpy\", \"jun\", \"junco\", \"juncos\", \"jungle\", \"jungly\", \"junior\", \"junk\", \"junked\", \"junker\", \"junket\", \"junkie\", \"junks\", \"junky\", \"junta\", \"juntas\", \"junto\", \"juntos\", \"jupe\", \"jupes\", \"jupon\", \"jupons\", \"jura\", \"jural\", \"jurant\", \"jurat\", \"jurats\", \"jurel\", \"jurels\", \"juried\", \"juries\", \"jurist\", \"juror\", \"jurors\", \"jury\", \"jus\", \"just\", \"justed\", \"juster\", \"justle\", \"justly\", \"justs\", \"jut\", \"jute\", \"jutes\", \"juts\", \"jutted\", \"jutty\", \"kaas\", \"kab\", \"kabab\", \"kababs\", \"kabaka\", \"kabala\", \"kabar\", \"kabars\", \"kabaya\", \"kabiki\", \"kabob\", \"kabobs\", \"kabs\", \"kabuki\", \"kadi\", \"kadis\", \"kae\", \"kaes\", \"kaf\", \"kaffir\", \"kafir\", \"kafirs\", \"kafs\", \"kaftan\", \"kagu\", \"kagus\", \"kahuna\", \"kaiak\", \"kaiaks\", \"kaif\", \"kaifs\", \"kail\", \"kails\", \"kain\", \"kainit\", \"kains\", \"kaiser\", \"kaka\", \"kakapo\", \"kakas\", \"kaki\", \"kakis\", \"kalam\", \"kalams\", \"kale\", \"kales\", \"kalian\", \"kalif\", \"kalifs\", \"kaliph\", \"kalium\", \"kalmia\", \"kalong\", \"kalpa\", \"kalpak\", \"kalpas\", \"kamala\", \"kame\", \"kames\", \"kami\", \"kamik\", \"kamiks\", \"kamsin\", \"kana\", \"kanas\", \"kanban\", \"kane\", \"kanes\", \"kanji\", \"kanjis\", \"kantar\", \"kaolin\", \"kaon\", \"kaons\", \"kapa\", \"kapas\", \"kaph\", \"kaphs\", \"kapok\", \"kapoks\", \"kappa\", \"kappas\", \"kaput\", \"kaputt\", \"karat\", \"karate\", \"karats\", \"karma\", \"karmas\", \"karmic\", \"karn\", \"karns\", \"karoo\", \"karoos\", \"kaross\", \"karroo\", \"karst\", \"karsts\", \"kart\", \"karts\", \"kas\", \"kasbah\", \"kasha\", \"kashas\", \"kasher\", \"kat\", \"kata\", \"katas\", \"kation\", \"kats\", \"kauri\", \"kauris\", \"kaury\", \"kava\", \"kavas\", \"kavass\", \"kay\", \"kayak\", \"kayaks\", \"kayles\", \"kayo\", \"kayoed\", \"kayoes\", \"kayos\", \"kays\", \"kazoo\", \"kazoos\", \"kbar\", \"kbars\", \"kea\", \"keas\", \"kebab\", \"kebabs\", \"kebar\", \"kebars\", \"kebbie\", \"keblah\", \"kebob\", \"kebobs\", \"keck\", \"kecked\", \"keckle\", \"kecks\", \"keddah\", \"kedge\", \"kedged\", \"kedges\", \"keef\", \"keefs\", \"keek\", \"keeked\", \"keeks\", \"keel\", \"keeled\", \"keels\", \"keen\", \"keened\", \"keener\", \"keenly\", \"keens\", \"keep\", \"keeper\", \"keeps\", \"keet\", \"keets\", \"keeve\", \"keeves\", \"kef\", \"kefir\", \"kefirs\", \"kefs\", \"keg\", \"kegler\", \"kegs\", \"keir\", \"keirs\", \"kelep\", \"keleps\", \"kelim\", \"kelims\", \"kelly\", \"keloid\", \"kelp\", \"kelped\", \"kelpie\", \"kelps\", \"kelpy\", \"kelson\", \"kelter\", \"kelvin\", \"kemp\", \"kemps\", \"kempt\", \"ken\", \"kenaf\", \"kenafs\", \"kench\", \"kendo\", \"kendos\", \"kenned\", \"kennel\", \"keno\", \"kenos\", \"kens\", \"kent\", \"kep\", \"kepi\", \"kepis\", \"kepped\", \"keppen\", \"keps\", \"kept\", \"kerb\", \"kerbed\", \"kerbs\", \"kerf\", \"kerfed\", \"kerfs\", \"kermes\", \"kermis\", \"kern\", \"kerne\", \"kerned\", \"kernel\", \"kernes\", \"kerns\", \"kerria\", \"kerry\", \"kersey\", \"ketch\", \"ketene\", \"keto\", \"ketol\", \"ketols\", \"ketone\", \"ketose\", \"kettle\", \"kevel\", \"kevels\", \"kevil\", \"kevils\", \"kex\", \"kexes\", \"key\", \"keyed\", \"keying\", \"keypad\", \"keys\", \"keyset\", \"keyway\", \"khadi\", \"khadis\", \"khaf\", \"khafs\", \"khaki\", \"khakis\", \"khalif\", \"khan\", \"khans\", \"khaph\", \"khaphs\", \"khat\", \"khats\", \"khazen\", \"kheda\", \"khedah\", \"khedas\", \"khet\", \"kheth\", \"kheths\", \"khets\", \"khi\", \"khis\", \"khoum\", \"khoums\", \"kiang\", \"kiangs\", \"kiaugh\", \"kibbe\", \"kibbeh\", \"kibbes\", \"kibbi\", \"kibbis\", \"kibble\", \"kibe\", \"kibei\", \"kibeis\", \"kibes\", \"kibitz\", \"kibla\", \"kiblah\", \"kiblas\", \"kibosh\", \"kick\", \"kicked\", \"kicker\", \"kicks\", \"kickup\", \"kicky\", \"kid\", \"kidded\", \"kidder\", \"kiddie\", \"kiddo\", \"kiddos\", \"kiddy\", \"kidnap\", \"kidney\", \"kids\", \"kidvid\", \"kief\", \"kiefs\", \"kier\", \"kiers\", \"kif\", \"kifs\", \"kike\", \"kikes\", \"kilim\", \"kilims\", \"kill\", \"killed\", \"killer\", \"killie\", \"kills\", \"kiln\", \"kilned\", \"kilns\", \"kilo\", \"kilos\", \"kilt\", \"kilted\", \"kilter\", \"kiltie\", \"kilts\", \"kilty\", \"kimchi\", \"kimono\", \"kin\", \"kina\", \"kinas\", \"kinase\", \"kind\", \"kinder\", \"kindle\", \"kindly\", \"kinds\", \"kine\", \"kinema\", \"kines\", \"king\", \"kinged\", \"kingly\", \"kings\", \"kinin\", \"kinins\", \"kink\", \"kinked\", \"kinks\", \"kinky\", \"kino\", \"kinos\", \"kins\", \"kiosk\", \"kiosks\", \"kip\", \"kipped\", \"kippen\", \"kipper\", \"kips\", \"kir\", \"kirk\", \"kirks\", \"kirn\", \"kirned\", \"kirns\", \"kirs\", \"kirsch\", \"kirtle\", \"kishka\", \"kishke\", \"kismat\", \"kismet\", \"kiss\", \"kissed\", \"kisser\", \"kisses\", \"kissy\", \"kist\", \"kists\", \"kit\", \"kite\", \"kited\", \"kiter\", \"kiters\", \"kites\", \"kith\", \"kithe\", \"kithed\", \"kithes\", \"kiths\", \"kiting\", \"kits\", \"kitsch\", \"kitted\", \"kittel\", \"kitten\", \"kittle\", \"kitty\", \"kiva\", \"kivas\", \"kiwi\", \"kiwis\", \"klatch\", \"klaxon\", \"klepht\", \"klong\", \"klongs\", \"kloof\", \"kloofs\", \"kludge\", \"kluge\", \"kluges\", \"klutz\", \"klutzy\", \"knack\", \"knacks\", \"knap\", \"knaps\", \"knar\", \"knarry\", \"knars\", \"knaur\", \"knaurs\", \"knave\", \"knaves\", \"knawel\", \"knead\", \"kneads\", \"knee\", \"kneed\", \"kneel\", \"kneels\", \"knees\", \"knell\", \"knells\", \"knelt\", \"knew\", \"knife\", \"knifed\", \"knifer\", \"knifes\", \"knight\", \"knish\", \"knit\", \"knits\", \"knives\", \"knob\", \"knobby\", \"knobs\", \"knock\", \"knocks\", \"knoll\", \"knolls\", \"knolly\", \"knop\", \"knops\", \"knosp\", \"knosps\", \"knot\", \"knots\", \"knotty\", \"knout\", \"knouts\", \"know\", \"knower\", \"known\", \"knowns\", \"knows\", \"knubby\", \"knur\", \"knurl\", \"knurls\", \"knurly\", \"knurs\", \"koa\", \"koala\", \"koalas\", \"koan\", \"koans\", \"koas\", \"kob\", \"kobo\", \"kobold\", \"kobs\", \"koel\", \"koels\", \"kohl\", \"kohls\", \"koi\", \"koine\", \"koines\", \"kola\", \"kolas\", \"kolhoz\", \"kolkoz\", \"kolo\", \"kolos\", \"konk\", \"konked\", \"konks\", \"koodoo\", \"kook\", \"kookie\", \"kooks\", \"kooky\", \"kop\", \"kopeck\", \"kopek\", \"kopeks\", \"koph\", \"kophs\", \"kopje\", \"kopjes\", \"koppa\", \"koppas\", \"koppie\", \"kops\", \"kor\", \"korai\", \"korat\", \"korats\", \"kore\", \"kors\", \"korun\", \"koruna\", \"koruny\", \"kos\", \"kosher\", \"koss\", \"koto\", \"kotos\", \"kotow\", \"kotows\", \"koumis\", \"koumys\", \"kouroi\", \"kouros\", \"kousso\", \"kowtow\", \"kraal\", \"kraals\", \"kraft\", \"krafts\", \"krait\", \"kraits\", \"kraken\", \"krater\", \"kraut\", \"krauts\", \"kreep\", \"kreeps\", \"krill\", \"krills\", \"kris\", \"krises\", \"krona\", \"krone\", \"kronen\", \"kroner\", \"kronor\", \"kronur\", \"kroon\", \"krooni\", \"kroons\", \"krubi\", \"krubis\", \"krubut\", \"kuchen\", \"kudo\", \"kudos\", \"kudu\", \"kudus\", \"kudzu\", \"kudzus\", \"kue\", \"kues\", \"kugel\", \"kugels\", \"kukri\", \"kukris\", \"kulak\", \"kulaki\", \"kulaks\", \"kultur\", \"kumiss\", \"kummel\", \"kumys\", \"kurgan\", \"kurta\", \"kurtas\", \"kuru\", \"kurus\", \"kusso\", \"kussos\", \"kuvasz\", \"kvas\", \"kvases\", \"kvass\", \"kvetch\", \"kwacha\", \"kwanza\", \"kyack\", \"kyacks\", \"kyak\", \"kyaks\", \"kyar\", \"kyars\", \"kyat\", \"kyats\", \"kybosh\", \"kylix\", \"kyrie\", \"kyries\", \"kyte\", \"kytes\", \"kythe\", \"kythed\", \"kythes\", \"laager\", \"laari\", \"lab\", \"labara\", \"label\", \"labels\", \"labia\", \"labial\", \"labile\", \"labium\", \"labor\", \"labors\", \"labour\", \"labra\", \"labret\", \"labrum\", \"labs\", \"lac\", \"lace\", \"laced\", \"lacer\", \"lacers\", \"laces\", \"lacey\", \"laches\", \"lacier\", \"lacily\", \"lacing\", \"lack\", \"lacked\", \"lacker\", \"lackey\", \"lacks\", \"lacs\", \"lactam\", \"lactic\", \"lacuna\", \"lacune\", \"lacy\", \"lad\", \"ladder\", \"laddie\", \"lade\", \"laded\", \"laden\", \"ladens\", \"lader\", \"laders\", \"lades\", \"ladies\", \"lading\", \"ladino\", \"ladle\", \"ladled\", \"ladler\", \"ladles\", \"ladron\", \"lads\", \"lady\", \"laevo\", \"lag\", \"lagan\", \"lagans\", \"lagend\", \"lager\", \"lagers\", \"lagged\", \"lagger\", \"lagoon\", \"lags\", \"laguna\", \"lagune\", \"lahar\", \"lahars\", \"laic\", \"laical\", \"laich\", \"laichs\", \"laics\", \"laid\", \"laigh\", \"laighs\", \"lain\", \"lair\", \"laird\", \"lairds\", \"laired\", \"lairs\", \"laith\", \"laity\", \"lake\", \"laked\", \"laker\", \"lakers\", \"lakes\", \"lakh\", \"lakhs\", \"lakier\", \"laking\", \"laky\", \"lall\", \"lallan\", \"lalled\", \"lalls\", \"lam\", \"lama\", \"lamas\", \"lamb\", \"lambda\", \"lambed\", \"lamber\", \"lambie\", \"lambs\", \"lamby\", \"lame\", \"lamed\", \"lamedh\", \"lameds\", \"lamely\", \"lament\", \"lamer\", \"lames\", \"lamest\", \"lamia\", \"lamiae\", \"lamias\", \"lamina\", \"laming\", \"lammed\", \"lamp\", \"lampad\", \"lampas\", \"lamped\", \"lamps\", \"lams\", \"lanai\", \"lanais\", \"lanate\", \"lance\", \"lanced\", \"lancer\", \"lances\", \"lancet\", \"land\", \"landau\", \"landed\", \"lander\", \"lands\", \"lane\", \"lanely\", \"lanes\", \"lang\", \"langue\", \"langur\", \"lank\", \"lanker\", \"lankly\", \"lanky\", \"lanner\", \"lanose\", \"lanugo\", \"lap\", \"lapdog\", \"lapel\", \"lapels\", \"lapful\", \"lapin\", \"lapins\", \"lapis\", \"lapped\", \"lapper\", \"lappet\", \"laps\", \"lapse\", \"lapsed\", \"lapser\", \"lapses\", \"lapsus\", \"laptop\", \"lar\", \"larch\", \"lard\", \"larded\", \"larder\", \"lardon\", \"lards\", \"lardy\", \"laree\", \"larees\", \"lares\", \"large\", \"larger\", \"larges\", \"largo\", \"largos\", \"lari\", \"lariat\", \"larine\", \"laris\", \"lark\", \"larked\", \"larker\", \"larks\", \"larky\", \"larrup\", \"lars\", \"larum\", \"larums\", \"larva\", \"larvae\", \"larval\", \"larvas\", \"larynx\", \"las\", \"lascar\", \"lase\", \"lased\", \"laser\", \"lasers\", \"lases\", \"lash\", \"lashed\", \"lasher\", \"lashes\", \"lasing\", \"lass\", \"lasses\", \"lassie\", \"lasso\", \"lassos\", \"last\", \"lasted\", \"laster\", \"lastly\", \"lasts\", \"lat\", \"latch\", \"late\", \"lated\", \"lateen\", \"lately\", \"laten\", \"latens\", \"latent\", \"later\", \"latest\", \"latex\", \"lath\", \"lathe\", \"lathed\", \"lather\", \"lathes\", \"lathi\", \"lathis\", \"laths\", \"lathy\", \"lati\", \"latigo\", \"latino\", \"latish\", \"latke\", \"latkes\", \"latria\", \"lats\", \"latte\", \"latten\", \"latter\", \"lattes\", \"lattin\", \"lauan\", \"lauans\", \"laud\", \"lauded\", \"lauder\", \"lauds\", \"laugh\", \"laughs\", \"launce\", \"launch\", \"laura\", \"laurae\", \"lauras\", \"laurel\", \"lav\", \"lava\", \"lavabo\", \"lavage\", \"lavas\", \"lave\", \"laved\", \"laveer\", \"laver\", \"lavers\", \"laves\", \"laving\", \"lavish\", \"lavs\", \"law\", \"lawed\", \"lawful\", \"lawine\", \"lawing\", \"lawman\", \"lawmen\", \"lawn\", \"lawns\", \"lawny\", \"laws\", \"lawyer\", \"lax\", \"laxer\", \"laxest\", \"laxity\", \"laxly\", \"lay\", \"layed\", \"layer\", \"layers\", \"laying\", \"layman\", \"laymen\", \"layoff\", \"layout\", \"lays\", \"layup\", \"layups\", \"lazar\", \"lazars\", \"laze\", \"lazed\", \"lazes\", \"lazied\", \"lazier\", \"lazies\", \"lazily\", \"lazing\", \"lazuli\", \"lazy\", \"lea\", \"leach\", \"leachy\", \"lead\", \"leaded\", \"leaden\", \"leader\", \"leads\", \"leady\", \"leaf\", \"leafed\", \"leafs\", \"leafy\", \"league\", \"leak\", \"leaked\", \"leaker\", \"leaks\", \"leaky\", \"leal\", \"leally\", \"lealty\", \"lean\", \"leaned\", \"leaner\", \"leanly\", \"leans\", \"leant\", \"leap\", \"leaped\", \"leaper\", \"leaps\", \"leapt\", \"lear\", \"learn\", \"learns\", \"learnt\", \"lears\", \"leary\", \"leas\", \"lease\", \"leased\", \"leaser\", \"leases\", \"leash\", \"least\", \"leasts\", \"leave\", \"leaved\", \"leaven\", \"leaver\", \"leaves\", \"leavy\", \"leben\", \"lebens\", \"lech\", \"leched\", \"lecher\", \"leches\", \"lechwe\", \"lectin\", \"lector\", \"led\", \"ledge\", \"ledger\", \"ledges\", \"ledgy\", \"lee\", \"leech\", \"leek\", \"leeks\", \"leer\", \"leered\", \"leers\", \"leery\", \"lees\", \"leet\", \"leets\", \"leeway\", \"left\", \"lefter\", \"lefts\", \"lefty\", \"leg\", \"legacy\", \"legal\", \"legals\", \"legate\", \"legato\", \"legend\", \"leger\", \"legers\", \"leges\", \"legged\", \"leggin\", \"leggy\", \"legion\", \"legist\", \"legit\", \"legits\", \"legman\", \"legmen\", \"legong\", \"legs\", \"legume\", \"lehr\", \"lehrs\", \"lehua\", \"lehuas\", \"lei\", \"leis\", \"lek\", \"leke\", \"leks\", \"leku\", \"lekvar\", \"leman\", \"lemans\", \"lemma\", \"lemmas\", \"lemon\", \"lemons\", \"lemony\", \"lemur\", \"lemurs\", \"lend\", \"lender\", \"lends\", \"lenes\", \"length\", \"lenis\", \"lenity\", \"leno\", \"lenos\", \"lens\", \"lense\", \"lensed\", \"lenses\", \"lent\", \"lenten\", \"lentic\", \"lentil\", \"lento\", \"lentos\", \"leone\", \"leones\", \"leper\", \"lepers\", \"lept\", \"lepta\", \"lepton\", \"lesion\", \"less\", \"lessee\", \"lessen\", \"lesser\", \"lesson\", \"lessor\", \"lest\", \"let\", \"letch\", \"lethal\", \"lethe\", \"lethes\", \"lets\", \"letted\", \"letter\", \"letup\", \"letups\", \"leu\", \"leucin\", \"leud\", \"leudes\", \"leuds\", \"leukon\", \"lev\", \"leva\", \"levant\", \"levee\", \"leveed\", \"levees\", \"level\", \"levels\", \"lever\", \"levers\", \"levied\", \"levier\", \"levies\", \"levin\", \"levins\", \"levity\", \"levo\", \"levy\", \"lewd\", \"lewder\", \"lewdly\", \"lewis\", \"lex\", \"lexeme\", \"lexes\", \"lexica\", \"lexis\", \"ley\", \"leys\", \"lez\", \"lezzes\", \"lezzie\", \"lezzy\", \"liable\", \"liaise\", \"liana\", \"lianas\", \"liane\", \"lianes\", \"liang\", \"liangs\", \"liar\", \"liard\", \"liards\", \"liars\", \"lib\", \"libber\", \"libel\", \"libels\", \"liber\", \"libers\", \"libido\", \"liblab\", \"libra\", \"librae\", \"libras\", \"libri\", \"libs\", \"lice\", \"lich\", \"lichee\", \"lichen\", \"liches\", \"lichi\", \"lichis\", \"licht\", \"lichts\", \"licit\", \"lick\", \"licked\", \"licker\", \"licks\", \"lictor\", \"lid\", \"lidar\", \"lidars\", \"lidded\", \"lido\", \"lidos\", \"lids\", \"lie\", \"lied\", \"lieder\", \"lief\", \"liefer\", \"liefly\", \"liege\", \"lieges\", \"lien\", \"lienal\", \"liens\", \"lier\", \"lierne\", \"liers\", \"lies\", \"lieu\", \"lieus\", \"lieve\", \"liever\", \"life\", \"lifer\", \"lifers\", \"lift\", \"lifted\", \"lifter\", \"lifts\", \"ligan\", \"ligand\", \"ligans\", \"ligase\", \"ligate\", \"liger\", \"ligers\", \"light\", \"lights\", \"lignin\", \"ligula\", \"ligule\", \"ligure\", \"like\", \"liked\", \"likely\", \"liken\", \"likens\", \"liker\", \"likers\", \"likes\", \"likest\", \"liking\", \"likuta\", \"lilac\", \"lilacs\", \"lilied\", \"lilies\", \"lilt\", \"lilted\", \"lilts\", \"lily\", \"lima\", \"liman\", \"limans\", \"limas\", \"limb\", \"limba\", \"limbas\", \"limbed\", \"limber\", \"limbi\", \"limbic\", \"limbo\", \"limbos\", \"limbs\", \"limbus\", \"limby\", \"lime\", \"limed\", \"limen\", \"limens\", \"limes\", \"limey\", \"limeys\", \"limier\", \"limina\", \"liming\", \"limit\", \"limits\", \"limmer\", \"limn\", \"limned\", \"limner\", \"limnic\", \"limns\", \"limo\", \"limos\", \"limp\", \"limpa\", \"limpas\", \"limped\", \"limper\", \"limpet\", \"limpid\", \"limply\", \"limps\", \"limpsy\", \"limuli\", \"limy\", \"lin\", \"linac\", \"linacs\", \"linage\", \"linden\", \"lindy\", \"line\", \"lineal\", \"linear\", \"lined\", \"linen\", \"linens\", \"lineny\", \"liner\", \"liners\", \"lines\", \"lineup\", \"liney\", \"ling\", \"linga\", \"lingam\", \"lingas\", \"linger\", \"lingo\", \"lings\", \"lingua\", \"lingy\", \"linier\", \"linin\", \"lining\", \"linins\", \"link\", \"linked\", \"linker\", \"links\", \"linkup\", \"linky\", \"linn\", \"linnet\", \"linns\", \"lino\", \"linos\", \"lins\", \"linsey\", \"lint\", \"lintel\", \"linter\", \"lintol\", \"lints\", \"linty\", \"linum\", \"linums\", \"liny\", \"lion\", \"lions\", \"lip\", \"lipase\", \"lipid\", \"lipide\", \"lipids\", \"lipin\", \"lipins\", \"lipoid\", \"lipoma\", \"lipped\", \"lippen\", \"lipper\", \"lippy\", \"lips\", \"liquid\", \"liquor\", \"lira\", \"liras\", \"lire\", \"liri\", \"lirot\", \"liroth\", \"lis\", \"lisle\", \"lisles\", \"lisp\", \"lisped\", \"lisper\", \"lisps\", \"lissom\", \"list\", \"listed\", \"listee\", \"listel\", \"listen\", \"lister\", \"lists\", \"lit\", \"litai\", \"litany\", \"litas\", \"litchi\", \"lite\", \"liter\", \"liters\", \"lithe\", \"lither\", \"lithia\", \"lithic\", \"litho\", \"lithos\", \"litmus\", \"litre\", \"litres\", \"lits\", \"litten\", \"litter\", \"little\", \"litu\", \"live\", \"lived\", \"lively\", \"liven\", \"livens\", \"liver\", \"livers\", \"livery\", \"lives\", \"livest\", \"livid\", \"livier\", \"living\", \"livre\", \"livres\", \"livyer\", \"lizard\", \"llama\", \"llamas\", \"llano\", \"llanos\", \"loach\", \"load\", \"loaded\", \"loader\", \"loads\", \"loaf\", \"loafed\", \"loafer\", \"loafs\", \"loam\", \"loamed\", \"loams\", \"loamy\", \"loan\", \"loaned\", \"loaner\", \"loans\", \"loath\", \"loathe\", \"loaves\", \"lob\", \"lobar\", \"lobate\", \"lobbed\", \"lobber\", \"lobby\", \"lobe\", \"lobed\", \"lobes\", \"lobo\", \"lobos\", \"lobs\", \"lobule\", \"loca\", \"local\", \"locale\", \"locals\", \"locate\", \"loch\", \"lochan\", \"lochia\", \"lochs\", \"loci\", \"lock\", \"locked\", \"locker\", \"locket\", \"locks\", \"lockup\", \"loco\", \"locoed\", \"locoes\", \"locos\", \"locule\", \"loculi\", \"locum\", \"locums\", \"locus\", \"locust\", \"lode\", \"loden\", \"lodens\", \"lodes\", \"lodge\", \"lodged\", \"lodger\", \"lodges\", \"loess\", \"loft\", \"lofted\", \"lofter\", \"lofts\", \"lofty\", \"log\", \"logan\", \"logans\", \"loge\", \"loges\", \"logged\", \"logger\", \"loggia\", \"loggie\", \"loggy\", \"logia\", \"logic\", \"logics\", \"logier\", \"logily\", \"logion\", \"logjam\", \"logo\", \"logoi\", \"logos\", \"logs\", \"logway\", \"logy\", \"loin\", \"loins\", \"loiter\", \"loll\", \"lolled\", \"loller\", \"lollop\", \"lolls\", \"lolly\", \"lomein\", \"loment\", \"lone\", \"lonely\", \"loner\", \"loners\", \"long\", \"longan\", \"longe\", \"longed\", \"longer\", \"longes\", \"longly\", \"longs\", \"loo\", \"looby\", \"looed\", \"looey\", \"looeys\", \"loof\", \"loofa\", \"loofah\", \"loofas\", \"loofs\", \"looie\", \"looies\", \"looing\", \"look\", \"looked\", \"looker\", \"looks\", \"lookup\", \"loom\", \"loomed\", \"looms\", \"loon\", \"looney\", \"loons\", \"loony\", \"loop\", \"looped\", \"looper\", \"loops\", \"loopy\", \"loos\", \"loose\", \"loosed\", \"loosen\", \"looser\", \"looses\", \"loot\", \"looted\", \"looter\", \"loots\", \"lop\", \"lope\", \"loped\", \"loper\", \"lopers\", \"lopes\", \"loping\", \"lopped\", \"lopper\", \"loppy\", \"lops\", \"loquat\", \"loral\", \"loran\", \"lorans\", \"lord\", \"lorded\", \"lordly\", \"lords\", \"lore\", \"loreal\", \"lores\", \"lorica\", \"lories\", \"loris\", \"lorn\", \"lorry\", \"lory\", \"lose\", \"losel\", \"losels\", \"loser\", \"losers\", \"loses\", \"losing\", \"loss\", \"losses\", \"lossy\", \"lost\", \"lot\", \"lota\", \"lotah\", \"lotahs\", \"lotas\", \"loth\", \"loti\", \"lotic\", \"lotion\", \"lotos\", \"lots\", \"lotte\", \"lotted\", \"lottes\", \"lotto\", \"lottos\", \"lotus\", \"louche\", \"loud\", \"louden\", \"louder\", \"loudly\", \"lough\", \"loughs\", \"louie\", \"louies\", \"louis\", \"lounge\", \"loungy\", \"loup\", \"loupe\", \"louped\", \"loupen\", \"loupes\", \"loups\", \"lour\", \"loured\", \"lours\", \"loury\", \"louse\", \"loused\", \"louses\", \"lousy\", \"lout\", \"louted\", \"louts\", \"louver\", \"louvre\", \"lovage\", \"lovat\", \"lovats\", \"love\", \"loved\", \"lovely\", \"lover\", \"lovers\", \"loves\", \"loving\", \"low\", \"lowboy\", \"lowe\", \"lowed\", \"lower\", \"lowers\", \"lowery\", \"lowes\", \"lowest\", \"lowing\", \"lowish\", \"lowly\", \"lown\", \"lows\", \"lowse\", \"lox\", \"loxed\", \"loxes\", \"loxing\", \"loyal\", \"luau\", \"luaus\", \"lubber\", \"lube\", \"lubes\", \"lubric\", \"luce\", \"lucent\", \"lucern\", \"luces\", \"lucid\", \"luck\", \"lucked\", \"luckie\", \"lucks\", \"lucky\", \"lucre\", \"lucres\", \"lude\", \"ludes\", \"ludic\", \"lues\", \"luetic\", \"luff\", \"luffa\", \"luffas\", \"luffed\", \"luffs\", \"lug\", \"luge\", \"luged\", \"luger\", \"lugers\", \"luges\", \"lugged\", \"lugger\", \"luggie\", \"lugs\", \"lull\", \"lulled\", \"lulls\", \"lulu\", \"lulus\", \"lum\", \"lumbar\", \"lumber\", \"lumen\", \"lumens\", \"lumina\", \"lummox\", \"lump\", \"lumped\", \"lumpen\", \"lumper\", \"lumps\", \"lumpy\", \"lums\", \"luna\", \"lunacy\", \"lunar\", \"lunars\", \"lunas\", \"lunate\", \"lunch\", \"lune\", \"lunes\", \"lunet\", \"lunets\", \"lung\", \"lungan\", \"lunge\", \"lunged\", \"lungee\", \"lunger\", \"lunges\", \"lungi\", \"lungis\", \"lungs\", \"lungyi\", \"lunier\", \"lunies\", \"lunk\", \"lunker\", \"lunks\", \"lunt\", \"lunted\", \"lunts\", \"lunula\", \"lunule\", \"luny\", \"lupin\", \"lupine\", \"lupins\", \"lupous\", \"lupus\", \"lurch\", \"lurdan\", \"lure\", \"lured\", \"lurer\", \"lurers\", \"lures\", \"lurid\", \"luring\", \"lurk\", \"lurked\", \"lurker\", \"lurks\", \"lush\", \"lushed\", \"lusher\", \"lushes\", \"lushly\", \"lust\", \"lusted\", \"luster\", \"lustra\", \"lustre\", \"lusts\", \"lusty\", \"lusus\", \"lute\", \"lutea\", \"luteal\", \"luted\", \"lutein\", \"lutes\", \"luteum\", \"luting\", \"lutist\", \"lutz\", \"lutzes\", \"luv\", \"luvs\", \"lux\", \"luxate\", \"luxe\", \"luxes\", \"luxury\", \"lwei\", \"lweis\", \"lyard\", \"lyart\", \"lyase\", \"lyases\", \"lycea\", \"lycee\", \"lycees\", \"lyceum\", \"lychee\", \"lye\", \"lyes\", \"lying\", \"lyings\", \"lymph\", \"lymphs\", \"lynch\", \"lynx\", \"lynxes\", \"lyrate\", \"lyre\", \"lyres\", \"lyric\", \"lyrics\", \"lyrism\", \"lyrist\", \"lysate\", \"lyse\", \"lysed\", \"lyses\", \"lysin\", \"lysine\", \"lysing\", \"lysins\", \"lysis\", \"lyssa\", \"lyssas\", \"lytic\", \"lytta\", \"lyttae\", \"lyttas\", \"maar\", \"maars\", \"mabe\", \"mabes\", \"mac\", \"macaco\", \"macaw\", \"macaws\", \"mace\", \"maced\", \"macer\", \"macers\", \"maces\", \"mach\", \"mache\", \"maches\", \"macho\", \"machos\", \"machs\", \"macing\", \"mack\", \"mackle\", \"macks\", \"macle\", \"macled\", \"macles\", \"macon\", \"macons\", \"macro\", \"macron\", \"macros\", \"macs\", \"macula\", \"macule\", \"mad\", \"madam\", \"madame\", \"madams\", \"madcap\", \"madded\", \"madden\", \"madder\", \"made\", \"madly\", \"madman\", \"madmen\", \"madras\", \"madre\", \"madres\", \"mads\", \"maduro\", \"mae\", \"maenad\", \"maes\", \"maffia\", \"mafia\", \"mafias\", \"mafic\", \"maftir\", \"mag\", \"mage\", \"mages\", \"maggot\", \"magi\", \"magian\", \"magic\", \"magics\", \"magilp\", \"maglev\", \"magma\", \"magmas\", \"magnet\", \"magnum\", \"magot\", \"magots\", \"magpie\", \"mags\", \"maguey\", \"magus\", \"mahoe\", \"mahoes\", \"mahout\", \"mahzor\", \"maid\", \"maiden\", \"maids\", \"maigre\", \"maihem\", \"mail\", \"maile\", \"mailed\", \"mailer\", \"mailes\", \"maill\", \"maills\", \"mails\", \"maim\", \"maimed\", \"maimer\", \"maims\", \"main\", \"mainly\", \"mains\", \"mair\", \"mairs\", \"maist\", \"maists\", \"maize\", \"maizes\", \"major\", \"majors\", \"makar\", \"makars\", \"make\", \"maker\", \"makers\", \"makes\", \"makeup\", \"making\", \"mako\", \"makos\", \"makuta\", \"malady\", \"malar\", \"malars\", \"malate\", \"male\", \"males\", \"malfed\", \"malgre\", \"malic\", \"malice\", \"malign\", \"maline\", \"malkin\", \"mall\", \"malled\", \"mallee\", \"mallei\", \"mallet\", \"mallow\", \"malls\", \"malm\", \"malms\", \"malmy\", \"maloti\", \"malt\", \"malted\", \"maltha\", \"maltol\", \"malts\", \"malty\", \"mama\", \"mamas\", \"mamba\", \"mambas\", \"mambo\", \"mambos\", \"mamey\", \"mameys\", \"mamie\", \"mamies\", \"mamluk\", \"mamma\", \"mammae\", \"mammal\", \"mammas\", \"mammee\", \"mammer\", \"mammet\", \"mammey\", \"mammie\", \"mammon\", \"mammy\", \"man\", \"mana\", \"manage\", \"manana\", \"manas\", \"manche\", \"mane\", \"maned\", \"manege\", \"manes\", \"manful\", \"mange\", \"mangel\", \"manger\", \"manges\", \"mangey\", \"mangle\", \"mango\", \"mangos\", \"mangy\", \"mania\", \"maniac\", \"manias\", \"manic\", \"manics\", \"manila\", \"manioc\", \"manito\", \"manitu\", \"manly\", \"manna\", \"mannan\", \"mannas\", \"manned\", \"manner\", \"mano\", \"manor\", \"manors\", \"manos\", \"manque\", \"mans\", \"manse\", \"manses\", \"manta\", \"mantas\", \"mantel\", \"mantes\", \"mantic\", \"mantid\", \"mantis\", \"mantle\", \"mantra\", \"mantua\", \"manual\", \"manure\", \"manus\", \"many\", \"map\", \"maple\", \"maples\", \"mapped\", \"mapper\", \"maps\", \"maqui\", \"maquis\", \"mar\", \"maraca\", \"maraud\", \"marble\", \"marbly\", \"marc\", \"marcel\", \"march\", \"marcs\", \"mare\", \"mares\", \"margay\", \"marge\", \"marges\", \"margin\", \"maria\", \"marina\", \"marine\", \"marish\", \"mark\", \"marked\", \"marker\", \"market\", \"markka\", \"marks\", \"markup\", \"marl\", \"marled\", \"marlin\", \"marls\", \"marly\", \"marmot\", \"maroon\", \"marque\", \"marram\", \"marred\", \"marrer\", \"marron\", \"marrow\", \"marry\", \"mars\", \"marse\", \"marses\", \"marsh\", \"marshy\", \"mart\", \"marted\", \"marten\", \"martin\", \"marts\", \"martyr\", \"marvel\", \"marvy\", \"mas\", \"mascon\", \"mascot\", \"maser\", \"masers\", \"mash\", \"mashed\", \"masher\", \"mashes\", \"mashie\", \"mashy\", \"masjid\", \"mask\", \"masked\", \"maskeg\", \"masker\", \"masks\", \"mason\", \"masons\", \"masque\", \"mass\", \"massa\", \"massas\", \"masse\", \"massed\", \"masses\", \"massif\", \"massy\", \"mast\", \"masted\", \"master\", \"mastic\", \"mastix\", \"masts\", \"mat\", \"match\", \"mate\", \"mated\", \"mater\", \"maters\", \"mates\", \"matey\", \"mateys\", \"math\", \"maths\", \"matin\", \"mating\", \"matins\", \"matres\", \"matrix\", \"matron\", \"mats\", \"matsah\", \"matt\", \"matte\", \"matted\", \"matter\", \"mattes\", \"mattin\", \"matts\", \"mature\", \"matza\", \"matzah\", \"matzas\", \"matzo\", \"matzoh\", \"matzos\", \"matzot\", \"maud\", \"mauds\", \"mauger\", \"maugre\", \"maul\", \"mauled\", \"mauler\", \"mauls\", \"maumet\", \"maun\", \"maund\", \"maunds\", \"maundy\", \"maut\", \"mauts\", \"mauve\", \"mauves\", \"maven\", \"mavens\", \"mavie\", \"mavies\", \"mavin\", \"mavins\", \"mavis\", \"maw\", \"mawed\", \"mawing\", \"mawn\", \"maws\", \"max\", \"maxes\", \"maxi\", \"maxim\", \"maxima\", \"maxims\", \"maxis\", \"maxixe\", \"may\", \"maya\", \"mayan\", \"mayas\", \"maybe\", \"maybes\", \"mayday\", \"mayed\", \"mayest\", \"mayfly\", \"mayhap\", \"mayhem\", \"maying\", \"mayo\", \"mayor\", \"mayors\", \"mayos\", \"maypop\", \"mays\", \"mayst\", \"mayvin\", \"mazard\", \"maze\", \"mazed\", \"mazer\", \"mazers\", \"mazes\", \"mazier\", \"mazily\", \"mazing\", \"mazuma\", \"mazy\", \"mbira\", \"mbiras\", \"mead\", \"meadow\", \"meads\", \"meager\", \"meagre\", \"meal\", \"mealie\", \"meals\", \"mealy\", \"mean\", \"meaner\", \"meanie\", \"meanly\", \"means\", \"meant\", \"meany\", \"measle\", \"measly\", \"meat\", \"meatal\", \"meated\", \"meats\", \"meatus\", \"meaty\", \"mecca\", \"meccas\", \"med\", \"medaka\", \"medal\", \"medals\", \"meddle\", \"medfly\", \"media\", \"mediad\", \"mediae\", \"medial\", \"median\", \"medias\", \"medic\", \"medick\", \"medico\", \"medics\", \"medii\", \"medina\", \"medium\", \"medius\", \"medlar\", \"medley\", \"medusa\", \"meed\", \"meeds\", \"meek\", \"meeker\", \"meekly\", \"meet\", \"meeter\", \"meetly\", \"meets\", \"megass\", \"megilp\", \"megohm\", \"megrim\", \"meikle\", \"meinie\", \"meiny\", \"mel\", \"meld\", \"melded\", \"melder\", \"melds\", \"melee\", \"melees\", \"melic\", \"mell\", \"melled\", \"mellow\", \"mells\", \"melody\", \"meloid\", \"melon\", \"melons\", \"mels\", \"melt\", \"melted\", \"melter\", \"melton\", \"melts\", \"mem\", \"member\", \"memo\", \"memoir\", \"memory\", \"memos\", \"mems\", \"men\", \"menace\", \"menad\", \"menads\", \"menage\", \"mend\", \"mended\", \"mender\", \"mends\", \"menhir\", \"menial\", \"meninx\", \"meno\", \"mensa\", \"mensae\", \"mensal\", \"mensas\", \"mensch\", \"mense\", \"mensed\", \"menses\", \"menta\", \"mental\", \"mentor\", \"mentum\", \"menu\", \"menus\", \"meou\", \"meoued\", \"meous\", \"meow\", \"meowed\", \"meows\", \"mercer\", \"mercy\", \"merde\", \"merdes\", \"mere\", \"merely\", \"merer\", \"meres\", \"merest\", \"merge\", \"merged\", \"merger\", \"merges\", \"merino\", \"merit\", \"merits\", \"merk\", \"merks\", \"merl\", \"merle\", \"merles\", \"merlin\", \"merlon\", \"merlot\", \"merls\", \"merman\", \"mermen\", \"merry\", \"mesa\", \"mesas\", \"mescal\", \"mesh\", \"meshed\", \"meshes\", \"meshy\", \"mesial\", \"mesian\", \"mesic\", \"mesne\", \"mesnes\", \"meson\", \"mesons\", \"mess\", \"messan\", \"messed\", \"messes\", \"messy\", \"mestee\", \"met\", \"meta\", \"metage\", \"metal\", \"metals\", \"metate\", \"mete\", \"meted\", \"meteor\", \"metepa\", \"meter\", \"meters\", \"metes\", \"meth\", \"method\", \"meths\", \"methyl\", \"metier\", \"meting\", \"metis\", \"metope\", \"metre\", \"metred\", \"metres\", \"metric\", \"metro\", \"metros\", \"mettle\", \"metump\", \"mew\", \"mewed\", \"mewing\", \"mewl\", \"mewled\", \"mewler\", \"mewls\", \"mews\", \"mezcal\", \"meze\", \"mezes\", \"mezuza\", \"mezzo\", \"mezzos\", \"mho\", \"mhos\", \"miaou\", \"miaous\", \"miaow\", \"miaows\", \"miasm\", \"miasma\", \"miasms\", \"miaul\", \"miauls\", \"mib\", \"mibs\", \"mica\", \"micas\", \"mice\", \"micell\", \"miche\", \"miched\", \"miches\", \"mick\", \"mickey\", \"mickle\", \"micks\", \"micra\", \"micro\", \"micron\", \"micros\", \"mid\", \"midair\", \"midday\", \"midden\", \"middle\", \"middy\", \"midge\", \"midges\", \"midget\", \"midgut\", \"midi\", \"midis\", \"midleg\", \"midrib\", \"mids\", \"midst\", \"midsts\", \"midway\", \"mien\", \"miens\", \"miff\", \"miffed\", \"miffs\", \"miffy\", \"mig\", \"migg\", \"miggle\", \"miggs\", \"might\", \"mights\", \"mighty\", \"mignon\", \"migs\", \"mihrab\", \"mikado\", \"mike\", \"miked\", \"mikes\", \"miking\", \"mikra\", \"mikron\", \"mikvah\", \"mikveh\", \"mil\", \"miladi\", \"milady\", \"milage\", \"milch\", \"mild\", \"milden\", \"milder\", \"mildew\", \"mildly\", \"mile\", \"miler\", \"milers\", \"miles\", \"milia\", \"milieu\", \"milium\", \"milk\", \"milked\", \"milker\", \"milks\", \"milky\", \"mill\", \"mille\", \"milled\", \"miller\", \"milles\", \"millet\", \"mills\", \"milneb\", \"milo\", \"milord\", \"milos\", \"milpa\", \"milpas\", \"mils\", \"milt\", \"milted\", \"milter\", \"milts\", \"milty\", \"mim\", \"mimbar\", \"mime\", \"mimed\", \"mimeo\", \"mimeos\", \"mimer\", \"mimers\", \"mimes\", \"mimic\", \"mimics\", \"miming\", \"mimosa\", \"mina\", \"minae\", \"minas\", \"mince\", \"minced\", \"mincer\", \"minces\", \"mincy\", \"mind\", \"minded\", \"minder\", \"minds\", \"mine\", \"mined\", \"miner\", \"miners\", \"mines\", \"mingle\", \"mingy\", \"mini\", \"minify\", \"minim\", \"minima\", \"minims\", \"mining\", \"minion\", \"minis\", \"minish\", \"minium\", \"mink\", \"minke\", \"minkes\", \"minks\", \"minnow\", \"minny\", \"minor\", \"minors\", \"mint\", \"minted\", \"minter\", \"mints\", \"minty\", \"minuet\", \"minus\", \"minute\", \"minx\", \"minxes\", \"minyan\", \"mioses\", \"miosis\", \"miotic\", \"mir\", \"mirage\", \"mire\", \"mired\", \"mires\", \"mirex\", \"miri\", \"mirier\", \"miring\", \"mirk\", \"mirker\", \"mirks\", \"mirky\", \"mirror\", \"mirs\", \"mirth\", \"mirths\", \"miry\", \"mirza\", \"mirzas\", \"mis\", \"misact\", \"misadd\", \"misaim\", \"misate\", \"miscue\", \"miscut\", \"misdid\", \"misdo\", \"mise\", \"miseat\", \"miser\", \"misers\", \"misery\", \"mises\", \"misfit\", \"mishap\", \"mishit\", \"miskal\", \"mislay\", \"misled\", \"mislie\", \"mislit\", \"mismet\", \"miso\", \"misos\", \"mispen\", \"miss\", \"missal\", \"missay\", \"missed\", \"missel\", \"misses\", \"misset\", \"missis\", \"missus\", \"missy\", \"mist\", \"misted\", \"mister\", \"mists\", \"misty\", \"misuse\", \"mite\", \"miter\", \"miters\", \"mites\", \"mither\", \"mitier\", \"mitis\", \"mitral\", \"mitre\", \"mitred\", \"mitres\", \"mitt\", \"mitten\", \"mitts\", \"mity\", \"mix\", \"mixed\", \"mixer\", \"mixers\", \"mixes\", \"mixing\", \"mixt\", \"mixup\", \"mixups\", \"mizen\", \"mizens\", \"mizzen\", \"mizzle\", \"mizzly\", \"moa\", \"moan\", \"moaned\", \"moaner\", \"moans\", \"moas\", \"moat\", \"moated\", \"moats\", \"mob\", \"mobbed\", \"mobber\", \"mobcap\", \"mobile\", \"mobled\", \"mobs\", \"moc\", \"mocha\", \"mochas\", \"mock\", \"mocked\", \"mocker\", \"mocks\", \"mockup\", \"mocs\", \"mod\", \"modal\", \"mode\", \"model\", \"models\", \"modem\", \"modems\", \"modern\", \"modes\", \"modest\", \"modi\", \"modica\", \"modify\", \"modish\", \"mods\", \"module\", \"moduli\", \"modulo\", \"modus\", \"mog\", \"mogged\", \"moggie\", \"moggy\", \"mogs\", \"mogul\", \"moguls\", \"mohair\", \"mohel\", \"mohels\", \"mohur\", \"mohurs\", \"moiety\", \"moil\", \"moiled\", \"moiler\", \"moils\", \"moira\", \"moirai\", \"moire\", \"moires\", \"moist\", \"mojo\", \"mojoes\", \"mojos\", \"moke\", \"mokes\", \"mol\", \"mola\", \"molal\", \"molar\", \"molars\", \"molas\", \"mold\", \"molded\", \"molder\", \"molds\", \"moldy\", \"mole\", \"moles\", \"molest\", \"molies\", \"moline\", \"moll\", \"mollah\", \"mollie\", \"molls\", \"molly\", \"moloch\", \"mols\", \"molt\", \"molted\", \"molten\", \"molter\", \"molto\", \"molts\", \"moly\", \"mom\", \"mome\", \"moment\", \"momes\", \"momi\", \"momism\", \"momma\", \"mommas\", \"mommy\", \"moms\", \"momser\", \"momus\", \"momzer\", \"mon\", \"monad\", \"monads\", \"monas\", \"monde\", \"mondes\", \"mondo\", \"mondos\", \"money\", \"moneys\", \"monger\", \"mongo\", \"mongoe\", \"mongol\", \"mongos\", \"mongst\", \"monie\", \"monied\", \"monies\", \"monish\", \"monism\", \"monist\", \"monk\", \"monkey\", \"monks\", \"mono\", \"monody\", \"monos\", \"mons\", \"monte\", \"montes\", \"month\", \"months\", \"mony\", \"moo\", \"mooch\", \"mood\", \"moods\", \"moody\", \"mooed\", \"mooing\", \"mool\", \"moola\", \"moolah\", \"moolas\", \"mooley\", \"mools\", \"moon\", \"mooned\", \"moons\", \"moony\", \"moor\", \"moored\", \"moors\", \"moory\", \"moos\", \"moose\", \"moot\", \"mooted\", \"mooter\", \"moots\", \"mop\", \"mope\", \"moped\", \"mopeds\", \"moper\", \"mopers\", \"mopery\", \"mopes\", \"mopey\", \"mopier\", \"moping\", \"mopish\", \"mopoke\", \"mopped\", \"mopper\", \"moppet\", \"mops\", \"mopy\", \"mor\", \"mora\", \"morae\", \"moral\", \"morale\", \"morals\", \"moras\", \"morass\", \"moray\", \"morays\", \"morbid\", \"more\", \"moreen\", \"morel\", \"morels\", \"mores\", \"morgan\", \"morgen\", \"morgue\", \"morion\", \"morn\", \"morns\", \"moron\", \"morons\", \"morose\", \"morph\", \"morpho\", \"morphs\", \"morris\", \"morro\", \"morros\", \"morrow\", \"mors\", \"morse\", \"morsel\", \"mort\", \"mortal\", \"mortar\", \"morts\", \"morula\", \"mos\", \"mosaic\", \"mosey\", \"moseys\", \"moshav\", \"mosk\", \"mosks\", \"mosque\", \"moss\", \"mossed\", \"mosser\", \"mosses\", \"mosso\", \"mossy\", \"most\", \"moste\", \"mostly\", \"mosts\", \"mot\", \"mote\", \"motel\", \"motels\", \"motes\", \"motet\", \"motets\", \"motey\", \"moth\", \"mother\", \"moths\", \"mothy\", \"motif\", \"motifs\", \"motile\", \"motion\", \"motive\", \"motley\", \"motmot\", \"motor\", \"motors\", \"mots\", \"mott\", \"motte\", \"mottes\", \"mottle\", \"motto\", \"mottos\", \"motts\", \"mouch\", \"moue\", \"moues\", \"moujik\", \"mould\", \"moulds\", \"mouldy\", \"moulin\", \"moult\", \"moults\", \"mound\", \"mounds\", \"mount\", \"mounts\", \"mourn\", \"mourns\", \"mouse\", \"moused\", \"mouser\", \"mouses\", \"mousey\", \"mousse\", \"mousy\", \"mouth\", \"mouths\", \"mouthy\", \"mouton\", \"move\", \"moved\", \"mover\", \"movers\", \"moves\", \"movie\", \"movies\", \"moving\", \"mow\", \"mowed\", \"mower\", \"mowers\", \"mowing\", \"mown\", \"mows\", \"moxa\", \"moxas\", \"moxie\", \"moxies\", \"mozo\", \"mozos\", \"much\", \"muches\", \"muchly\", \"mucid\", \"mucin\", \"mucins\", \"muck\", \"mucked\", \"mucker\", \"muckle\", \"mucks\", \"mucky\", \"mucluc\", \"mucoid\", \"mucor\", \"mucors\", \"mucosa\", \"mucose\", \"mucous\", \"mucro\", \"mucus\", \"mud\", \"mudcap\", \"mudcat\", \"mudded\", \"mudder\", \"muddle\", \"muddly\", \"muddy\", \"mudra\", \"mudras\", \"muds\", \"muesli\", \"muff\", \"muffed\", \"muffin\", \"muffle\", \"muffs\", \"mufti\", \"muftis\", \"mug\", \"mugful\", \"mugg\", \"muggar\", \"mugged\", \"muggee\", \"mugger\", \"muggs\", \"muggur\", \"muggy\", \"mugs\", \"muhly\", \"mujik\", \"mujiks\", \"mukluk\", \"muktuk\", \"mulch\", \"mulct\", \"mulcts\", \"mule\", \"muled\", \"mules\", \"muleta\", \"muley\", \"muleys\", \"muling\", \"mulish\", \"mull\", \"mulla\", \"mullah\", \"mullas\", \"mulled\", \"mullen\", \"muller\", \"mullet\", \"mulley\", \"mulls\", \"mum\", \"mumble\", \"mumbly\", \"mumm\", \"mummed\", \"mummer\", \"mumms\", \"mummy\", \"mump\", \"mumped\", \"mumper\", \"mumps\", \"mums\", \"mumu\", \"mumus\", \"mun\", \"munch\", \"mungo\", \"mungos\", \"muni\", \"munis\", \"muns\", \"muntin\", \"muon\", \"muonic\", \"muons\", \"mura\", \"mural\", \"murals\", \"muras\", \"murder\", \"mure\", \"mured\", \"murein\", \"mures\", \"murex\", \"murid\", \"murids\", \"murine\", \"muring\", \"murk\", \"murker\", \"murkly\", \"murks\", \"murky\", \"murmur\", \"murphy\", \"murr\", \"murra\", \"murras\", \"murre\", \"murres\", \"murrey\", \"murrha\", \"murrs\", \"murry\", \"mus\", \"musca\", \"muscae\", \"muscat\", \"muscid\", \"muscle\", \"muscly\", \"muse\", \"mused\", \"muser\", \"musers\", \"muses\", \"museum\", \"mush\", \"mushed\", \"musher\", \"mushes\", \"mushy\", \"music\", \"musics\", \"musing\", \"musjid\", \"musk\", \"muskeg\", \"musket\", \"muskie\", \"muskit\", \"musks\", \"musky\", \"muslin\", \"muss\", \"mussed\", \"mussel\", \"musses\", \"mussy\", \"must\", \"musted\", \"mustee\", \"muster\", \"musth\", \"musths\", \"musts\", \"musty\", \"mut\", \"mutant\", \"mutase\", \"mutate\", \"mutch\", \"mute\", \"muted\", \"mutely\", \"muter\", \"mutes\", \"mutest\", \"mutine\", \"muting\", \"mutiny\", \"mutism\", \"muton\", \"mutons\", \"muts\", \"mutt\", \"mutter\", \"mutton\", \"mutts\", \"mutual\", \"mutuel\", \"mutule\", \"muumuu\", \"muzhik\", \"muzjik\", \"muzzle\", \"muzzy\", \"myases\", \"myasis\", \"mycele\", \"myelin\", \"myna\", \"mynah\", \"mynahs\", \"mynas\", \"myoid\", \"myoma\", \"myomas\", \"myope\", \"myopes\", \"myopia\", \"myopic\", \"myopy\", \"myoses\", \"myosin\", \"myosis\", \"myotic\", \"myriad\", \"myrica\", \"myrrh\", \"myrrhs\", \"myrtle\", \"myself\", \"mysid\", \"mysids\", \"mysost\", \"mystic\", \"myth\", \"mythic\", \"mythoi\", \"mythos\", \"myths\", \"mythy\", \"myxoid\", \"myxoma\", \"naan\", \"naans\", \"nab\", \"nabbed\", \"nabber\", \"nabe\", \"nabes\", \"nabis\", \"nabob\", \"nabobs\", \"nabs\", \"nachas\", \"naches\", \"nacho\", \"nachos\", \"nacre\", \"nacred\", \"nacres\", \"nada\", \"nadas\", \"nadir\", \"nadirs\", \"nae\", \"naevi\", \"naevus\", \"nag\", \"nagana\", \"nagged\", \"nagger\", \"naggy\", \"nags\", \"nah\", \"naiad\", \"naiads\", \"naif\", \"naifs\", \"nail\", \"nailed\", \"nailer\", \"nails\", \"naira\", \"naive\", \"naiver\", \"naives\", \"naked\", \"naled\", \"naleds\", \"nam\", \"name\", \"named\", \"namely\", \"namer\", \"namers\", \"names\", \"naming\", \"nan\", \"nana\", \"nanas\", \"nance\", \"nances\", \"nancy\", \"nandin\", \"nanism\", \"nankin\", \"nannie\", \"nanny\", \"nans\", \"naoi\", \"naos\", \"nap\", \"napalm\", \"nape\", \"napery\", \"napes\", \"napkin\", \"nappe\", \"napped\", \"napper\", \"nappes\", \"nappie\", \"nappy\", \"naps\", \"narc\", \"narco\", \"narcos\", \"narcs\", \"nard\", \"nards\", \"nares\", \"narial\", \"naric\", \"narine\", \"naris\", \"nark\", \"narked\", \"narks\", \"narky\", \"narrow\", \"narwal\", \"nary\", \"nasal\", \"nasals\", \"nasial\", \"nasion\", \"nastic\", \"nasty\", \"natal\", \"natant\", \"natch\", \"nates\", \"nation\", \"native\", \"natron\", \"natter\", \"natty\", \"nature\", \"naught\", \"nausea\", \"nautch\", \"navaid\", \"naval\", \"navar\", \"navars\", \"nave\", \"navel\", \"navels\", \"naves\", \"navies\", \"navvy\", \"navy\", \"naw\", \"nawab\", \"nawabs\", \"nay\", \"nays\", \"nazi\", \"nazify\", \"nazis\", \"neap\", \"neaps\", \"near\", \"nearby\", \"neared\", \"nearer\", \"nearly\", \"nears\", \"neat\", \"neaten\", \"neater\", \"neath\", \"neatly\", \"neats\", \"neb\", \"nebs\", \"nebula\", \"nebule\", \"nebuly\", \"neck\", \"necked\", \"necker\", \"necks\", \"nectar\", \"nee\", \"need\", \"needed\", \"needer\", \"needle\", \"needs\", \"needy\", \"neem\", \"neems\", \"neep\", \"neeps\", \"negate\", \"negus\", \"neif\", \"neifs\", \"neigh\", \"neighs\", \"neist\", \"nekton\", \"nellie\", \"nelly\", \"nelson\", \"nema\", \"nemas\", \"nene\", \"neon\", \"neoned\", \"neons\", \"nephew\", \"nerd\", \"nerds\", \"nerdy\", \"nereid\", \"nereis\", \"nerol\", \"neroli\", \"nerols\", \"nerts\", \"nertz\", \"nerve\", \"nerved\", \"nerves\", \"nervy\", \"ness\", \"nesses\", \"nest\", \"nested\", \"nester\", \"nestle\", \"nestor\", \"nests\", \"net\", \"nether\", \"netop\", \"netops\", \"nets\", \"nett\", \"netted\", \"netter\", \"nettle\", \"nettly\", \"netts\", \"netty\", \"neuk\", \"neuks\", \"neum\", \"neume\", \"neumes\", \"neumic\", \"neums\", \"neural\", \"neuron\", \"neuter\", \"neve\", \"never\", \"neves\", \"nevi\", \"nevoid\", \"nevus\", \"new\", \"newel\", \"newels\", \"newer\", \"newest\", \"newie\", \"newies\", \"newish\", \"newly\", \"news\", \"newsie\", \"newsy\", \"newt\", \"newton\", \"newts\", \"next\", \"nexus\", \"ngwee\", \"niacin\", \"nib\", \"nibbed\", \"nibble\", \"nibs\", \"nicad\", \"nicads\", \"nice\", \"nicely\", \"nicer\", \"nicest\", \"nicety\", \"niche\", \"niched\", \"niches\", \"nick\", \"nicked\", \"nickel\", \"nicker\", \"nickle\", \"nicks\", \"nicol\", \"nicols\", \"nidal\", \"nide\", \"nided\", \"nides\", \"nidget\", \"nidi\", \"nidify\", \"niding\", \"nidus\", \"niece\", \"nieces\", \"nielli\", \"niello\", \"nieve\", \"nieves\", \"niffer\", \"nifty\", \"niggle\", \"nigh\", \"nighed\", \"nigher\", \"nighs\", \"night\", \"nights\", \"nighty\", \"nihil\", \"nihils\", \"nil\", \"nilgai\", \"nilgau\", \"nill\", \"nilled\", \"nills\", \"nils\", \"nim\", \"nimbi\", \"nimble\", \"nimbly\", \"nimbus\", \"nimmed\", \"nimrod\", \"nims\", \"nine\", \"nines\", \"ninety\", \"ninja\", \"ninjas\", \"ninny\", \"ninon\", \"ninons\", \"ninth\", \"ninths\", \"niobic\", \"nip\", \"nipa\", \"nipas\", \"nipped\", \"nipper\", \"nipple\", \"nippy\", \"nips\", \"nisei\", \"niseis\", \"nisi\", \"nisus\", \"nit\", \"nite\", \"niter\", \"niters\", \"nitery\", \"nites\", \"nitid\", \"niton\", \"nitons\", \"nitre\", \"nitres\", \"nitric\", \"nitrid\", \"nitril\", \"nitro\", \"nitros\", \"nits\", \"nitty\", \"nitwit\", \"nival\", \"nix\", \"nixe\", \"nixed\", \"nixes\", \"nixie\", \"nixies\", \"nixing\", \"nixy\", \"nizam\", \"nizams\", \"nob\", \"nobble\", \"nobby\", \"noble\", \"nobler\", \"nobles\", \"nobly\", \"nobody\", \"nobs\", \"nocent\", \"nock\", \"nocked\", \"nocks\", \"nod\", \"nodal\", \"nodded\", \"nodder\", \"noddle\", \"noddy\", \"node\", \"nodes\", \"nodi\", \"nodose\", \"nodous\", \"nods\", \"nodule\", \"nodus\", \"noel\", \"noels\", \"noes\", \"noesis\", \"noetic\", \"nog\", \"nogg\", \"nogged\", \"noggin\", \"noggs\", \"nogs\", \"noh\", \"nohow\", \"noil\", \"noils\", \"noily\", \"noir\", \"noirs\", \"noise\", \"noised\", \"noises\", \"noisy\", \"nolo\", \"nolos\", \"nom\", \"noma\", \"nomad\", \"nomads\", \"nomas\", \"nome\", \"nomen\", \"nomes\", \"nomina\", \"nomism\", \"nomoi\", \"nomos\", \"noms\", \"nona\", \"nonage\", \"nonart\", \"nonas\", \"nonce\", \"nonces\", \"noncom\", \"none\", \"nonego\", \"nones\", \"nonet\", \"nonets\", \"nonfan\", \"nonfat\", \"nongay\", \"nonman\", \"nonmen\", \"nonpar\", \"nontax\", \"nonuse\", \"nonwar\", \"nonyl\", \"nonyls\", \"noo\", \"noodge\", \"noodle\", \"nook\", \"nooks\", \"nooky\", \"noon\", \"noons\", \"noose\", \"noosed\", \"nooser\", \"nooses\", \"nopal\", \"nopals\", \"nope\", \"nor\", \"nordic\", \"nori\", \"noria\", \"norias\", \"noris\", \"norite\", \"norm\", \"normal\", \"normed\", \"norms\", \"north\", \"norths\", \"nos\", \"nose\", \"nosed\", \"noses\", \"nosey\", \"nosh\", \"noshed\", \"nosher\", \"noshes\", \"nosier\", \"nosily\", \"nosing\", \"nostoc\", \"nosy\", \"not\", \"nota\", \"notal\", \"notary\", \"notate\", \"notch\", \"note\", \"noted\", \"noter\", \"noters\", \"notes\", \"nother\", \"notice\", \"notify\", \"noting\", \"notion\", \"notum\", \"nougat\", \"nought\", \"noun\", \"nounal\", \"nouns\", \"nous\", \"nouses\", \"nova\", \"novae\", \"novas\", \"novel\", \"novels\", \"novena\", \"novice\", \"now\", \"noway\", \"noways\", \"nowise\", \"nows\", \"nowt\", \"nowts\", \"noyade\", \"nozzle\", \"nth\", \"nuance\", \"nub\", \"nubbin\", \"nubble\", \"nubbly\", \"nubby\", \"nubia\", \"nubias\", \"nubile\", \"nubs\", \"nucha\", \"nuchae\", \"nuchal\", \"nuclei\", \"nude\", \"nudely\", \"nuder\", \"nudes\", \"nudest\", \"nudge\", \"nudged\", \"nudger\", \"nudges\", \"nudie\", \"nudies\", \"nudism\", \"nudist\", \"nudity\", \"nudnik\", \"nudzh\", \"nugget\", \"nuke\", \"nuked\", \"nukes\", \"nuking\", \"null\", \"nullah\", \"nulled\", \"nulls\", \"numb\", \"numbat\", \"numbed\", \"number\", \"numbly\", \"numbs\", \"numen\", \"numina\", \"nun\", \"nuncio\", \"nuncle\", \"nuns\", \"nurd\", \"nurds\", \"nurl\", \"nurled\", \"nurls\", \"nurse\", \"nursed\", \"nurser\", \"nurses\", \"nus\", \"nut\", \"nutant\", \"nutate\", \"nutlet\", \"nutmeg\", \"nutria\", \"nuts\", \"nutsy\", \"nutted\", \"nutter\", \"nutty\", \"nuzzle\", \"nyala\", \"nyalas\", \"nylon\", \"nylons\", \"nymph\", \"nympha\", \"nympho\", \"nymphs\", \"oaf\", \"oafish\", \"oafs\", \"oak\", \"oaken\", \"oaks\", \"oakum\", \"oakums\", \"oar\", \"oared\", \"oaring\", \"oars\", \"oases\", \"oasis\", \"oast\", \"oasts\", \"oat\", \"oaten\", \"oater\", \"oaters\", \"oath\", \"oaths\", \"oats\", \"oaves\", \"obe\", \"obeah\", \"obeahs\", \"obeli\", \"obelia\", \"obelus\", \"obes\", \"obese\", \"obey\", \"obeyed\", \"obeyer\", \"obeys\", \"obi\", \"obia\", \"obias\", \"obiism\", \"obis\", \"obit\", \"obits\", \"object\", \"objet\", \"objets\", \"oblast\", \"oblate\", \"oblige\", \"oblong\", \"oboe\", \"oboes\", \"oboist\", \"obol\", \"obole\", \"oboles\", \"oboli\", \"obols\", \"obolus\", \"obsess\", \"obtain\", \"obtect\", \"obtest\", \"obtund\", \"obtuse\", \"obvert\", \"oca\", \"ocas\", \"occult\", \"occupy\", \"occur\", \"occurs\", \"ocean\", \"oceans\", \"ocelli\", \"ocelot\", \"ocher\", \"ochers\", \"ochery\", \"ochone\", \"ochre\", \"ochrea\", \"ochred\", \"ochres\", \"ochry\", \"ocker\", \"ockers\", \"ocrea\", \"ocreae\", \"octad\", \"octads\", \"octal\", \"octan\", \"octane\", \"octans\", \"octant\", \"octave\", \"octavo\", \"octet\", \"octets\", \"octopi\", \"octroi\", \"octyl\", \"octyls\", \"ocular\", \"oculi\", \"oculus\", \"odd\", \"odder\", \"oddest\", \"oddish\", \"oddity\", \"oddly\", \"odds\", \"ode\", \"odea\", \"odeon\", \"odeons\", \"odes\", \"odeum\", \"odeums\", \"odic\", \"odious\", \"odist\", \"odists\", \"odium\", \"odiums\", \"odor\", \"odored\", \"odors\", \"odour\", \"odours\", \"ods\", \"odyl\", \"odyle\", \"odyles\", \"odyls\", \"oedema\", \"oes\", \"oeuvre\", \"ofay\", \"ofays\", \"off\", \"offal\", \"offals\", \"offcut\", \"offed\", \"offend\", \"offer\", \"offers\", \"office\", \"offing\", \"offish\", \"offkey\", \"offs\", \"offset\", \"oft\", \"often\", \"ofter\", \"oftest\", \"ogam\", \"ogams\", \"ogdoad\", \"ogee\", \"ogees\", \"ogham\", \"oghams\", \"ogival\", \"ogive\", \"ogives\", \"ogle\", \"ogled\", \"ogler\", \"oglers\", \"ogles\", \"ogling\", \"ogre\", \"ogres\", \"ogress\", \"ogrish\", \"ogrism\", \"ohed\", \"ohia\", \"ohias\", \"ohing\", \"ohm\", \"ohmage\", \"ohmic\", \"ohms\", \"oho\", \"ohs\", \"oidia\", \"oidium\", \"oil\", \"oilcan\", \"oilcup\", \"oiled\", \"oiler\", \"oilers\", \"oilier\", \"oilily\", \"oiling\", \"oilman\", \"oilmen\", \"oils\", \"oilway\", \"oily\", \"oink\", \"oinked\", \"oinks\", \"oka\", \"okapi\", \"okapis\", \"okas\", \"okay\", \"okayed\", \"okays\", \"oke\", \"okeh\", \"okehs\", \"okes\", \"okra\", \"okras\", \"old\", \"olden\", \"older\", \"oldest\", \"oldie\", \"oldies\", \"oldish\", \"olds\", \"oldy\", \"ole\", \"olea\", \"oleate\", \"olefin\", \"oleic\", \"olein\", \"oleine\", \"oleins\", \"oleo\", \"oleos\", \"oles\", \"oleum\", \"oleums\", \"olio\", \"olios\", \"olive\", \"olives\", \"olla\", \"ollas\", \"ology\", \"omasa\", \"omasum\", \"omber\", \"ombers\", \"ombre\", \"ombres\", \"omega\", \"omegas\", \"omelet\", \"omen\", \"omened\", \"omens\", \"omenta\", \"omer\", \"omers\", \"omit\", \"omits\", \"oms\", \"onager\", \"onagri\", \"once\", \"one\", \"onery\", \"ones\", \"onion\", \"onions\", \"oniony\", \"onium\", \"only\", \"onrush\", \"ons\", \"onset\", \"onsets\", \"onside\", \"ontic\", \"onto\", \"onus\", \"onuses\", \"onward\", \"onyx\", \"onyxes\", \"oocyst\", \"oocyte\", \"oodles\", \"oogamy\", \"oogeny\", \"ooh\", \"oohed\", \"oohing\", \"oohs\", \"oolite\", \"oolith\", \"oology\", \"oolong\", \"oomiac\", \"oomiak\", \"oompah\", \"oomph\", \"oomphs\", \"oops\", \"oorali\", \"oorie\", \"oot\", \"ootid\", \"ootids\", \"oots\", \"ooze\", \"oozed\", \"oozes\", \"oozier\", \"oozily\", \"oozing\", \"oozy\", \"opah\", \"opahs\", \"opal\", \"opals\", \"opaque\", \"ope\", \"oped\", \"open\", \"opened\", \"opener\", \"openly\", \"opens\", \"opera\", \"operas\", \"operon\", \"opes\", \"ophite\", \"opiate\", \"opine\", \"opined\", \"opines\", \"oping\", \"opioid\", \"opium\", \"opiums\", \"oppose\", \"oppugn\", \"ops\", \"opsin\", \"opsins\", \"opt\", \"opted\", \"optic\", \"optics\", \"optima\", \"optime\", \"opting\", \"option\", \"opts\", \"opus\", \"opuses\", \"ora\", \"orach\", \"orache\", \"oracle\", \"orad\", \"oral\", \"orally\", \"orals\", \"orang\", \"orange\", \"orangs\", \"orangy\", \"orate\", \"orated\", \"orates\", \"orator\", \"orb\", \"orbed\", \"orbier\", \"orbing\", \"orbit\", \"orbits\", \"orbs\", \"orby\", \"orc\", \"orca\", \"orcas\", \"orcein\", \"orchid\", \"orchil\", \"orchis\", \"orcin\", \"orcins\", \"orcs\", \"ordain\", \"ordeal\", \"order\", \"orders\", \"ordo\", \"ordos\", \"ordure\", \"ore\", \"oread\", \"oreads\", \"oreide\", \"ores\", \"orfray\", \"organ\", \"organa\", \"organs\", \"orgasm\", \"orgeat\", \"orgiac\", \"orgic\", \"orgies\", \"orgone\", \"orgy\", \"oribi\", \"oribis\", \"oriel\", \"oriels\", \"orient\", \"origan\", \"origin\", \"oriole\", \"orison\", \"orle\", \"orles\", \"orlop\", \"orlops\", \"ormer\", \"ormers\", \"ormolu\", \"ornate\", \"ornery\", \"ornis\", \"oroide\", \"orphan\", \"orphic\", \"orpin\", \"orpine\", \"orpins\", \"orra\", \"orrery\", \"orrice\", \"orris\", \"ors\", \"ort\", \"ortho\", \"orts\", \"oryx\", \"oryxes\", \"orzo\", \"orzos\", \"osar\", \"oscine\", \"oscula\", \"oscule\", \"ose\", \"oses\", \"osier\", \"osiers\", \"osmic\", \"osmics\", \"osmium\", \"osmol\", \"osmole\", \"osmols\", \"osmose\", \"osmous\", \"osmund\", \"osprey\", \"ossa\", \"ossein\", \"ossia\", \"ossify\", \"osteal\", \"ostia\", \"ostium\", \"ostler\", \"ostomy\", \"otalgy\", \"other\", \"others\", \"otic\", \"otiose\", \"otitic\", \"otitis\", \"ottar\", \"ottars\", \"ottava\", \"otter\", \"otters\", \"otto\", \"ottos\", \"ouch\", \"ouched\", \"ouches\", \"oud\", \"ouds\", \"ought\", \"oughts\", \"ounce\", \"ounces\", \"ouph\", \"ouphe\", \"ouphes\", \"ouphs\", \"our\", \"ourang\", \"ourari\", \"ourebi\", \"ourie\", \"ours\", \"ousel\", \"ousels\", \"oust\", \"ousted\", \"ouster\", \"ousts\", \"out\", \"outact\", \"outadd\", \"outage\", \"outask\", \"outate\", \"outbeg\", \"outbid\", \"outbox\", \"outbuy\", \"outby\", \"outbye\", \"outcry\", \"outdid\", \"outdo\", \"outeat\", \"outed\", \"outer\", \"outers\", \"outfit\", \"outfly\", \"outfox\", \"outgas\", \"outgo\", \"outgun\", \"outhit\", \"outing\", \"outjut\", \"outlaw\", \"outlay\", \"outlet\", \"outlie\", \"outman\", \"output\", \"outran\", \"outre\", \"outrow\", \"outrun\", \"outs\", \"outsat\", \"outsaw\", \"outsee\", \"outset\", \"outsin\", \"outsit\", \"outvie\", \"outwar\", \"outwit\", \"ouzel\", \"ouzels\", \"ouzo\", \"ouzos\", \"ova\", \"oval\", \"ovally\", \"ovals\", \"ovary\", \"ovate\", \"oven\", \"ovens\", \"over\", \"overdo\", \"overed\", \"overly\", \"overs\", \"overt\", \"ovibos\", \"ovine\", \"ovines\", \"ovisac\", \"ovoid\", \"ovoids\", \"ovoli\", \"ovolo\", \"ovolos\", \"ovonic\", \"ovular\", \"ovule\", \"ovules\", \"ovum\", \"owe\", \"owed\", \"owes\", \"owing\", \"owl\", \"owlet\", \"owlets\", \"owlish\", \"owls\", \"own\", \"owned\", \"owner\", \"owners\", \"owning\", \"owns\", \"owse\", \"owsen\", \"oxalic\", \"oxalis\", \"oxbow\", \"oxbows\", \"oxcart\", \"oxen\", \"oxes\", \"oxeye\", \"oxeyes\", \"oxford\", \"oxid\", \"oxide\", \"oxides\", \"oxidic\", \"oxids\", \"oxim\", \"oxime\", \"oximes\", \"oxims\", \"oxlip\", \"oxlips\", \"oxo\", \"oxtail\", \"oxter\", \"oxters\", \"oxy\", \"oxygen\", \"oyer\", \"oyers\", \"oyes\", \"oyez\", \"oyster\", \"ozone\", \"ozones\", \"ozonic\", \"pablum\", \"pac\", \"paca\", \"pacas\", \"pace\", \"paced\", \"pacer\", \"pacers\", \"paces\", \"pacha\", \"pachas\", \"pacify\", \"pacing\", \"pack\", \"packed\", \"packer\", \"packet\", \"packly\", \"packs\", \"pacs\", \"pact\", \"pacts\", \"pad\", \"padauk\", \"padded\", \"padder\", \"paddle\", \"paddy\", \"padi\", \"padis\", \"padle\", \"padles\", \"padnag\", \"padouk\", \"padre\", \"padres\", \"padri\", \"pads\", \"paean\", \"paeans\", \"paella\", \"paeon\", \"paeons\", \"paesan\", \"pagan\", \"pagans\", \"page\", \"paged\", \"pager\", \"pagers\", \"pages\", \"paging\", \"pagod\", \"pagoda\", \"pagods\", \"pah\", \"paid\", \"paik\", \"paiked\", \"paiks\", \"pail\", \"pails\", \"pain\", \"painch\", \"pained\", \"pains\", \"paint\", \"paints\", \"painty\", \"pair\", \"paired\", \"pairs\", \"paisa\", \"paisan\", \"paisas\", \"paise\", \"pajama\", \"pakeha\", \"pal\", \"palace\", \"palais\", \"palate\", \"pale\", \"palea\", \"paleae\", \"paleal\", \"paled\", \"palely\", \"paler\", \"pales\", \"palest\", \"palet\", \"palets\", \"palier\", \"paling\", \"palish\", \"pall\", \"palled\", \"pallet\", \"pallia\", \"pallid\", \"pallor\", \"palls\", \"pally\", \"palm\", \"palmar\", \"palmed\", \"palmer\", \"palms\", \"palmy\", \"palp\", \"palpal\", \"palpi\", \"palps\", \"palpus\", \"pals\", \"palsy\", \"palter\", \"paltry\", \"paly\", \"pam\", \"pampa\", \"pampas\", \"pamper\", \"pams\", \"pan\", \"panada\", \"panama\", \"panda\", \"pandas\", \"pander\", \"pandit\", \"pandy\", \"pane\", \"paned\", \"panel\", \"panels\", \"panes\", \"panfry\", \"panful\", \"pang\", \"panga\", \"pangas\", \"panged\", \"pangen\", \"pangs\", \"panic\", \"panics\", \"panier\", \"panne\", \"panned\", \"pannes\", \"pans\", \"pansy\", \"pant\", \"panted\", \"pantie\", \"panto\", \"pantos\", \"pantry\", \"pants\", \"panty\", \"panzer\", \"pap\", \"papa\", \"papacy\", \"papain\", \"papal\", \"papas\", \"papaw\", \"papaws\", \"papaya\", \"paper\", \"papers\", \"papery\", \"papist\", \"pappi\", \"pappus\", \"pappy\", \"paps\", \"papula\", \"papule\", \"papyri\", \"par\", \"para\", \"parade\", \"paramo\", \"parang\", \"paraph\", \"paras\", \"parcel\", \"parch\", \"pard\", \"pardah\", \"pardee\", \"pardi\", \"pardie\", \"pardon\", \"pards\", \"pardy\", \"pare\", \"pared\", \"parent\", \"pareo\", \"pareos\", \"parer\", \"parers\", \"pares\", \"pareu\", \"pareus\", \"pareve\", \"parge\", \"parged\", \"parges\", \"parget\", \"pargo\", \"pargos\", \"pariah\", \"parian\", \"paries\", \"paring\", \"paris\", \"parish\", \"parity\", \"park\", \"parka\", \"parkas\", \"parked\", \"parker\", \"parks\", \"parlay\", \"parle\", \"parled\", \"parles\", \"parley\", \"parlor\", \"parody\", \"parol\", \"parole\", \"parols\", \"parous\", \"parr\", \"parral\", \"parred\", \"parrel\", \"parrot\", \"parrs\", \"parry\", \"pars\", \"parse\", \"parsec\", \"parsed\", \"parser\", \"parses\", \"parson\", \"part\", \"partan\", \"parted\", \"partly\", \"parton\", \"parts\", \"party\", \"parura\", \"parure\", \"parve\", \"parvis\", \"parvo\", \"parvos\", \"pas\", \"pascal\", \"pase\", \"paseo\", \"paseos\", \"pases\", \"pash\", \"pasha\", \"pashas\", \"pashed\", \"pashes\", \"pass\", \"passe\", \"passed\", \"passee\", \"passel\", \"passer\", \"passes\", \"passim\", \"passus\", \"past\", \"pasta\", \"pastas\", \"paste\", \"pasted\", \"pastel\", \"paster\", \"pastes\", \"pastie\", \"pastil\", \"pastis\", \"pastor\", \"pastry\", \"pasts\", \"pasty\", \"pat\", \"pataca\", \"patch\", \"patchy\", \"pate\", \"pated\", \"paten\", \"patens\", \"patent\", \"pater\", \"paters\", \"pates\", \"path\", \"pathos\", \"paths\", \"patin\", \"patina\", \"patine\", \"patins\", \"patio\", \"patios\", \"patly\", \"patois\", \"patrol\", \"patron\", \"pats\", \"patsy\", \"patted\", \"pattee\", \"patten\", \"patter\", \"pattie\", \"patty\", \"paty\", \"patzer\", \"paulin\", \"paunch\", \"pauper\", \"pausal\", \"pause\", \"paused\", \"pauser\", \"pauses\", \"pavan\", \"pavane\", \"pavans\", \"pave\", \"paved\", \"paveed\", \"paver\", \"pavers\", \"paves\", \"pavid\", \"pavin\", \"paving\", \"pavins\", \"pavior\", \"pavis\", \"pavise\", \"paw\", \"pawed\", \"pawer\", \"pawers\", \"pawing\", \"pawky\", \"pawl\", \"pawls\", \"pawn\", \"pawned\", \"pawnee\", \"pawner\", \"pawnor\", \"pawns\", \"pawpaw\", \"paws\", \"pax\", \"paxes\", \"paxwax\", \"pay\", \"payday\", \"payed\", \"payee\", \"payees\", \"payer\", \"payers\", \"paying\", \"paynim\", \"payoff\", \"payola\", \"payor\", \"payors\", \"payout\", \"pays\", \"pazazz\", \"pea\", \"peace\", \"peaced\", \"peaces\", \"peach\", \"peachy\", \"peag\", \"peage\", \"peages\", \"peags\", \"peahen\", \"peak\", \"peaked\", \"peaks\", \"peaky\", \"peal\", \"pealed\", \"peals\", \"pean\", \"peans\", \"peanut\", \"pear\", \"pearl\", \"pearls\", \"pearly\", \"pears\", \"peart\", \"peas\", \"pease\", \"peasen\", \"peases\", \"peat\", \"peats\", \"peaty\", \"peavey\", \"peavy\", \"pebble\", \"pebbly\", \"pec\", \"pecan\", \"pecans\", \"pech\", \"pechan\", \"peched\", \"pechs\", \"peck\", \"pecked\", \"pecker\", \"pecks\", \"pecky\", \"pecs\", \"pecten\", \"pectic\", \"pectin\", \"ped\", \"pedal\", \"pedalo\", \"pedals\", \"pedant\", \"pedate\", \"peddle\", \"pedes\", \"pedlar\", \"pedler\", \"pedro\", \"pedros\", \"peds\", \"pee\", \"peed\", \"peeing\", \"peek\", \"peeked\", \"peeks\", \"peel\", \"peeled\", \"peeler\", \"peels\", \"peen\", \"peened\", \"peens\", \"peep\", \"peeped\", \"peeper\", \"peeps\", \"peepul\", \"peer\", \"peered\", \"peerie\", \"peers\", \"peery\", \"pees\", \"peeve\", \"peeved\", \"peeves\", \"peewee\", \"peewit\", \"peg\", \"pegbox\", \"pegged\", \"pegs\", \"peh\", \"pehs\", \"pein\", \"peined\", \"peins\", \"peise\", \"peised\", \"peises\", \"pekan\", \"pekans\", \"peke\", \"pekes\", \"pekin\", \"pekins\", \"pekoe\", \"pekoes\", \"pelage\", \"pele\", \"peles\", \"pelf\", \"pelfs\", \"pelite\", \"pellet\", \"pelmet\", \"pelon\", \"pelota\", \"pelt\", \"pelted\", \"pelter\", \"peltry\", \"pelts\", \"pelves\", \"pelvic\", \"pelvis\", \"pen\", \"penal\", \"penang\", \"pence\", \"pencel\", \"pencil\", \"pend\", \"pended\", \"pends\", \"penes\", \"pengo\", \"pengos\", \"penial\", \"penile\", \"penis\", \"penman\", \"penmen\", \"penna\", \"pennae\", \"penne\", \"penned\", \"penner\", \"penni\", \"pennia\", \"pennis\", \"pennon\", \"penny\", \"pens\", \"pensee\", \"pensil\", \"pent\", \"pentad\", \"pentyl\", \"penult\", \"penury\", \"peon\", \"peones\", \"peons\", \"peony\", \"people\", \"pep\", \"pepla\", \"peplos\", \"peplum\", \"peplus\", \"pepo\", \"pepos\", \"pepped\", \"pepper\", \"peppy\", \"peps\", \"pepsin\", \"peptic\", \"peptid\", \"per\", \"perch\", \"perdie\", \"perdu\", \"perdue\", \"perdus\", \"perdy\", \"perea\", \"pereia\", \"pereon\", \"peri\", \"peril\", \"perils\", \"period\", \"peris\", \"perish\", \"perk\", \"perked\", \"perks\", \"perky\", \"perm\", \"permed\", \"permit\", \"perms\", \"peroxy\", \"perron\", \"perry\", \"perse\", \"perses\", \"person\", \"pert\", \"perter\", \"pertly\", \"peruke\", \"peruse\", \"pes\", \"pesade\", \"peseta\", \"pesewa\", \"pesky\", \"peso\", \"pesos\", \"pest\", \"pester\", \"pestle\", \"pesto\", \"pestos\", \"pests\", \"pesty\", \"pet\", \"petal\", \"petals\", \"petard\", \"peter\", \"peters\", \"petit\", \"petite\", \"petnap\", \"petrel\", \"petrol\", \"pets\", \"petsai\", \"petted\", \"petter\", \"petti\", \"pettle\", \"petto\", \"petty\", \"pew\", \"pewee\", \"pewees\", \"pewit\", \"pewits\", \"pews\", \"pewter\", \"peyote\", \"peyotl\", \"pfft\", \"pfui\", \"phage\", \"phages\", \"phalli\", \"pharos\", \"phase\", \"phased\", \"phases\", \"phasic\", \"phasis\", \"phat\", \"phatic\", \"phenix\", \"phenol\", \"phenom\", \"phenyl\", \"phew\", \"phi\", \"phial\", \"phials\", \"phis\", \"phiz\", \"phizes\", \"phlegm\", \"phloem\", \"phlox\", \"phobia\", \"phobic\", \"phoebe\", \"phon\", \"phonal\", \"phone\", \"phoned\", \"phones\", \"phoney\", \"phonic\", \"phono\", \"phonon\", \"phonos\", \"phons\", \"phony\", \"phooey\", \"phot\", \"photic\", \"photo\", \"photog\", \"photon\", \"photos\", \"phots\", \"phpht\", \"phrase\", \"pht\", \"phut\", \"phuts\", \"phyla\", \"phylae\", \"phylar\", \"phyle\", \"phylic\", \"phyllo\", \"phylon\", \"phylum\", \"physed\", \"physes\", \"physic\", \"physis\", \"phytol\", \"phyton\", \"pia\", \"piaffe\", \"pial\", \"pian\", \"pianic\", \"piano\", \"pianos\", \"pians\", \"pias\", \"piazza\", \"piazze\", \"pibal\", \"pibals\", \"pic\", \"pica\", \"pical\", \"picara\", \"picaro\", \"picas\", \"pice\", \"pick\", \"pickax\", \"picked\", \"picker\", \"picket\", \"pickle\", \"picks\", \"pickup\", \"picky\", \"picnic\", \"picot\", \"picots\", \"picric\", \"pics\", \"picul\", \"piculs\", \"piddle\", \"piddly\", \"pidgin\", \"pie\", \"piece\", \"pieced\", \"piecer\", \"pieces\", \"pied\", \"pieing\", \"pier\", \"pierce\", \"piers\", \"pies\", \"pieta\", \"pietas\", \"piety\", \"piffle\", \"pig\", \"pigeon\", \"pigged\", \"piggie\", \"piggin\", \"piggy\", \"piglet\", \"pigmy\", \"pignus\", \"pignut\", \"pigout\", \"pigpen\", \"pigs\", \"pigsty\", \"piing\", \"pika\", \"pikake\", \"pikas\", \"pike\", \"piked\", \"piker\", \"pikers\", \"pikes\", \"piki\", \"piking\", \"pikis\", \"pilaf\", \"pilaff\", \"pilafs\", \"pilar\", \"pilau\", \"pilaus\", \"pilaw\", \"pilaws\", \"pile\", \"pilea\", \"piled\", \"pilei\", \"piles\", \"pileum\", \"pileup\", \"pileus\", \"pilfer\", \"pili\", \"piling\", \"pilis\", \"pill\", \"pillar\", \"pilled\", \"pillow\", \"pills\", \"pilose\", \"pilot\", \"pilots\", \"pilous\", \"pilule\", \"pilus\", \"pily\", \"pima\", \"pimas\", \"pimp\", \"pimped\", \"pimple\", \"pimply\", \"pimps\", \"pin\", \"pina\", \"pinang\", \"pinas\", \"pinata\", \"pincer\", \"pinch\", \"pinder\", \"pine\", \"pineal\", \"pined\", \"pinene\", \"pinery\", \"pines\", \"pineta\", \"piney\", \"ping\", \"pinged\", \"pinger\", \"pingo\", \"pingos\", \"pings\", \"pinier\", \"pining\", \"pinion\", \"pinite\", \"pink\", \"pinked\", \"pinken\", \"pinker\", \"pinkey\", \"pinkie\", \"pinkly\", \"pinko\", \"pinkos\", \"pinks\", \"pinky\", \"pinna\", \"pinnae\", \"pinnal\", \"pinnas\", \"pinned\", \"pinner\", \"pinny\", \"pinole\", \"pinon\", \"pinons\", \"pinot\", \"pinots\", \"pins\", \"pint\", \"pinta\", \"pintas\", \"pintle\", \"pinto\", \"pintos\", \"pints\", \"pinup\", \"pinups\", \"piny\", \"pinyin\", \"pinyon\", \"piolet\", \"pion\", \"pionic\", \"pions\", \"pious\", \"pip\", \"pipage\", \"pipal\", \"pipals\", \"pipe\", \"piped\", \"piper\", \"pipers\", \"pipes\", \"pipet\", \"pipets\", \"pipier\", \"piping\", \"pipit\", \"pipits\", \"pipkin\", \"pipped\", \"pippin\", \"pips\", \"pipy\", \"pique\", \"piqued\", \"piques\", \"piquet\", \"piracy\", \"pirana\", \"pirate\", \"piraya\", \"pirn\", \"pirns\", \"pirog\", \"pirogi\", \"pis\", \"pisco\", \"piscos\", \"pish\", \"pished\", \"pishes\", \"piso\", \"pisos\", \"piss\", \"pissed\", \"pisser\", \"pisses\", \"piste\", \"pistes\", \"pistil\", \"pistol\", \"piston\", \"pit\", \"pita\", \"pitas\", \"pitch\", \"pitchy\", \"pith\", \"pithed\", \"piths\", \"pithy\", \"pitied\", \"pitier\", \"pities\", \"pitman\", \"pitmen\", \"piton\", \"pitons\", \"pits\", \"pitsaw\", \"pitted\", \"pity\", \"piu\", \"pivot\", \"pivots\", \"pix\", \"pixel\", \"pixels\", \"pixes\", \"pixie\", \"pixies\", \"pixy\", \"pizazz\", \"pizza\", \"pizzas\", \"pizzle\", \"place\", \"placed\", \"placer\", \"places\", \"placet\", \"placid\", \"plack\", \"placks\", \"plagal\", \"plage\", \"plages\", \"plague\", \"plaguy\", \"plaice\", \"plaid\", \"plaids\", \"plain\", \"plains\", \"plaint\", \"plait\", \"plaits\", \"plan\", \"planar\", \"planch\", \"plane\", \"planed\", \"planer\", \"planes\", \"planet\", \"plank\", \"planks\", \"plans\", \"plant\", \"plants\", \"plaque\", \"plash\", \"plashy\", \"plasm\", \"plasma\", \"plasms\", \"plat\", \"platan\", \"plate\", \"plated\", \"platen\", \"plater\", \"plates\", \"plats\", \"platy\", \"platys\", \"play\", \"playa\", \"playas\", \"played\", \"player\", \"plays\", \"plaza\", \"plazas\", \"plea\", \"pleach\", \"plead\", \"pleads\", \"pleas\", \"please\", \"pleat\", \"pleats\", \"pleb\", \"plebe\", \"plebes\", \"plebs\", \"pled\", \"pledge\", \"pleiad\", \"plena\", \"plench\", \"plenty\", \"plenum\", \"pleura\", \"plew\", \"plews\", \"plexal\", \"plexor\", \"plexus\", \"pliant\", \"plica\", \"plicae\", \"plical\", \"plie\", \"plied\", \"plier\", \"pliers\", \"plies\", \"plight\", \"plink\", \"plinks\", \"plinth\", \"plisky\", \"plisse\", \"plod\", \"plods\", \"ploidy\", \"plonk\", \"plonks\", \"plop\", \"plops\", \"plot\", \"plots\", \"plotty\", \"plotz\", \"plough\", \"plover\", \"plow\", \"plowed\", \"plower\", \"plows\", \"ploy\", \"ployed\", \"ploys\", \"pluck\", \"plucks\", \"plucky\", \"plug\", \"plugs\", \"plum\", \"plumb\", \"plumbs\", \"plume\", \"plumed\", \"plumes\", \"plummy\", \"plump\", \"plumps\", \"plums\", \"plumy\", \"plunge\", \"plunk\", \"plunks\", \"plural\", \"plus\", \"pluses\", \"plush\", \"plushy\", \"plutei\", \"pluton\", \"ply\", \"plyer\", \"plyers\", \"plying\", \"pneuma\", \"poach\", \"poachy\", \"pock\", \"pocked\", \"pocket\", \"pocks\", \"pocky\", \"poco\", \"pod\", \"podded\", \"podgy\", \"podia\", \"podite\", \"podium\", \"pods\", \"podsol\", \"podzol\", \"poem\", \"poems\", \"poesy\", \"poet\", \"poetic\", \"poetry\", \"poets\", \"pogey\", \"pogeys\", \"pogies\", \"pogrom\", \"pogy\", \"poh\", \"poi\", \"poilu\", \"poilus\", \"poind\", \"poinds\", \"point\", \"pointe\", \"points\", \"pointy\", \"pois\", \"poise\", \"poised\", \"poiser\", \"poises\", \"poisha\", \"poison\", \"poke\", \"poked\", \"poker\", \"pokers\", \"pokes\", \"pokey\", \"pokeys\", \"pokier\", \"pokies\", \"pokily\", \"poking\", \"poky\", \"pol\", \"polar\", \"polars\", \"polder\", \"pole\", \"poleax\", \"poled\", \"poleis\", \"poler\", \"polers\", \"poles\", \"poleyn\", \"police\", \"policy\", \"poling\", \"polio\", \"polios\", \"polis\", \"polish\", \"polite\", \"polity\", \"polka\", \"polkas\", \"poll\", \"polled\", \"pollee\", \"pollen\", \"poller\", \"pollex\", \"polls\", \"polo\", \"polos\", \"pols\", \"poly\", \"polyp\", \"polypi\", \"polyps\", \"polys\", \"pom\", \"pomace\", \"pomade\", \"pome\", \"pomelo\", \"pomes\", \"pommee\", \"pommel\", \"pommie\", \"pommy\", \"pomp\", \"pompom\", \"pompon\", \"pomps\", \"poms\", \"ponce\", \"ponced\", \"ponces\", \"poncho\", \"pond\", \"ponded\", \"ponder\", \"ponds\", \"pone\", \"ponent\", \"pones\", \"pong\", \"ponged\", \"pongee\", \"pongid\", \"pongs\", \"ponied\", \"ponies\", \"pons\", \"pontes\", \"pontil\", \"ponton\", \"pony\", \"pooch\", \"pood\", \"poodle\", \"poods\", \"poof\", \"poofs\", \"poofy\", \"pooh\", \"poohed\", \"poohs\", \"pool\", \"pooled\", \"pools\", \"poon\", \"poons\", \"poop\", \"pooped\", \"poops\", \"poor\", \"poorer\", \"poori\", \"pooris\", \"poorly\", \"poove\", \"pooves\", \"pop\", \"pope\", \"popery\", \"popes\", \"popgun\", \"popish\", \"poplar\", \"poplin\", \"poppa\", \"poppas\", \"popped\", \"popper\", \"poppet\", \"popple\", \"poppy\", \"pops\", \"popsie\", \"popsy\", \"porch\", \"pore\", \"pored\", \"pores\", \"porgy\", \"poring\", \"porism\", \"pork\", \"porker\", \"porks\", \"porky\", \"porn\", \"porno\", \"pornos\", \"porns\", \"porny\", \"porose\", \"porous\", \"port\", \"portal\", \"ported\", \"porter\", \"portly\", \"ports\", \"posada\", \"pose\", \"posed\", \"poser\", \"posers\", \"poses\", \"poseur\", \"posh\", \"posher\", \"poshly\", \"posies\", \"posing\", \"posit\", \"posits\", \"posse\", \"posses\", \"posset\", \"possum\", \"post\", \"postal\", \"posted\", \"poster\", \"postin\", \"posts\", \"posy\", \"pot\", \"potage\", \"potash\", \"potato\", \"potboy\", \"poteen\", \"potent\", \"potful\", \"pother\", \"potion\", \"potman\", \"potmen\", \"potpie\", \"pots\", \"potsie\", \"potsy\", \"potted\", \"potter\", \"pottle\", \"potto\", \"pottos\", \"potty\", \"potzer\", \"pouch\", \"pouchy\", \"pouf\", \"poufed\", \"pouff\", \"pouffe\", \"pouffs\", \"poufs\", \"poult\", \"poults\", \"pounce\", \"pound\", \"pounds\", \"pour\", \"poured\", \"pourer\", \"pours\", \"pout\", \"pouted\", \"pouter\", \"pouts\", \"pouty\", \"pow\", \"powder\", \"power\", \"powers\", \"pows\", \"powter\", \"powwow\", \"pox\", \"poxed\", \"poxes\", \"poxing\", \"poyou\", \"poyous\", \"praam\", \"praams\", \"prahu\", \"prahus\", \"praise\", \"pram\", \"prams\", \"prance\", \"prang\", \"prangs\", \"prank\", \"pranks\", \"prao\", \"praos\", \"prase\", \"prases\", \"prat\", \"prate\", \"prated\", \"prater\", \"prates\", \"prats\", \"prau\", \"praus\", \"prawn\", \"prawns\", \"praxes\", \"praxis\", \"pray\", \"prayed\", \"prayer\", \"prays\", \"preach\", \"preact\", \"preamp\", \"prearm\", \"precis\", \"precut\", \"pree\", \"preed\", \"preen\", \"preens\", \"prees\", \"prefab\", \"prefer\", \"prefix\", \"prelim\", \"preman\", \"premed\", \"premen\", \"premie\", \"premix\", \"prep\", \"prepay\", \"preppy\", \"preps\", \"presa\", \"prese\", \"preset\", \"press\", \"prest\", \"presto\", \"prests\", \"pretax\", \"pretor\", \"pretty\", \"prevue\", \"prewar\", \"prex\", \"prexes\", \"prexy\", \"prey\", \"preyed\", \"preyer\", \"preys\", \"prez\", \"prezes\", \"priapi\", \"price\", \"priced\", \"pricer\", \"prices\", \"pricey\", \"prick\", \"pricks\", \"pricky\", \"pricy\", \"pride\", \"prided\", \"prides\", \"pried\", \"prier\", \"priers\", \"pries\", \"priest\", \"prig\", \"prigs\", \"prill\", \"prills\", \"prim\", \"prima\", \"primal\", \"primas\", \"prime\", \"primed\", \"primer\", \"primes\", \"primi\", \"primly\", \"primo\", \"primos\", \"primp\", \"primps\", \"prims\", \"primus\", \"prince\", \"prink\", \"prinks\", \"print\", \"prints\", \"prion\", \"prions\", \"prior\", \"priors\", \"priory\", \"prise\", \"prised\", \"prises\", \"prism\", \"prisms\", \"prison\", \"priss\", \"prissy\", \"privet\", \"privy\", \"prize\", \"prized\", \"prizer\", \"prizes\", \"pro\", \"proa\", \"proas\", \"probe\", \"probed\", \"prober\", \"probes\", \"probit\", \"prod\", \"prods\", \"proem\", \"proems\", \"prof\", \"profit\", \"profs\", \"prog\", \"progs\", \"projet\", \"prolan\", \"prole\", \"proleg\", \"proles\", \"prolix\", \"prolog\", \"prom\", \"promo\", \"promos\", \"prompt\", \"proms\", \"prone\", \"prong\", \"prongs\", \"pronto\", \"proof\", \"proofs\", \"prop\", \"propel\", \"proper\", \"props\", \"propyl\", \"pros\", \"prose\", \"prosed\", \"proser\", \"proses\", \"prosit\", \"proso\", \"prosos\", \"pross\", \"prost\", \"prosy\", \"protea\", \"protei\", \"proton\", \"protyl\", \"proud\", \"prove\", \"proved\", \"proven\", \"prover\", \"proves\", \"prow\", \"prowar\", \"prower\", \"prowl\", \"prowls\", \"prows\", \"proxy\", \"prude\", \"prudes\", \"prune\", \"pruned\", \"pruner\", \"prunes\", \"prunus\", \"pruta\", \"prutah\", \"prutot\", \"pry\", \"pryer\", \"pryers\", \"prying\", \"psalm\", \"psalms\", \"pseud\", \"pseudo\", \"pseuds\", \"pshaw\", \"pshaws\", \"psi\", \"psis\", \"psoae\", \"psoai\", \"psoas\", \"psocid\", \"psst\", \"psych\", \"psyche\", \"psycho\", \"psychs\", \"psylla\", \"psywar\", \"pterin\", \"ptisan\", \"ptoses\", \"ptosis\", \"ptotic\", \"pub\", \"pubes\", \"pubic\", \"pubis\", \"public\", \"pubs\", \"puce\", \"puces\", \"puck\", \"pucka\", \"pucker\", \"pucks\", \"pud\", \"puddle\", \"puddly\", \"pudgy\", \"pudic\", \"puds\", \"pueblo\", \"puff\", \"puffed\", \"puffer\", \"puffin\", \"puffs\", \"puffy\", \"pug\", \"pugged\", \"puggry\", \"puggy\", \"pugh\", \"pugree\", \"pugs\", \"puisne\", \"puja\", \"pujah\", \"pujahs\", \"pujas\", \"puke\", \"puked\", \"pukes\", \"puking\", \"pukka\", \"pul\", \"pula\", \"pule\", \"puled\", \"puler\", \"pulers\", \"pules\", \"puli\", \"pulik\", \"puling\", \"pulis\", \"pull\", \"pulled\", \"puller\", \"pullet\", \"pulley\", \"pulls\", \"pullup\", \"pulp\", \"pulpal\", \"pulped\", \"pulper\", \"pulpit\", \"pulps\", \"pulpy\", \"pulque\", \"puls\", \"pulsar\", \"pulse\", \"pulsed\", \"pulser\", \"pulses\", \"puma\", \"pumas\", \"pumelo\", \"pumice\", \"pummel\", \"pump\", \"pumped\", \"pumper\", \"pumps\", \"pun\", \"puna\", \"punas\", \"punch\", \"punchy\", \"pundit\", \"pung\", \"pungle\", \"pungs\", \"punier\", \"punily\", \"punish\", \"punk\", \"punka\", \"punkah\", \"punkas\", \"punker\", \"punkey\", \"punkie\", \"punkin\", \"punks\", \"punky\", \"punned\", \"punner\", \"punnet\", \"punny\", \"puns\", \"punt\", \"punted\", \"punter\", \"punto\", \"puntos\", \"punts\", \"punty\", \"puny\", \"pup\", \"pupa\", \"pupae\", \"pupal\", \"pupas\", \"pupate\", \"pupil\", \"pupils\", \"pupped\", \"puppet\", \"puppy\", \"pups\", \"pur\", \"purana\", \"purda\", \"purdah\", \"purdas\", \"pure\", \"puree\", \"pureed\", \"purees\", \"purely\", \"purer\", \"purest\", \"purfle\", \"purge\", \"purged\", \"purger\", \"purges\", \"puri\", \"purify\", \"purin\", \"purine\", \"purins\", \"puris\", \"purism\", \"purist\", \"purity\", \"purl\", \"purled\", \"purlin\", \"purls\", \"purple\", \"purply\", \"purr\", \"purred\", \"purrs\", \"purs\", \"purse\", \"pursed\", \"purser\", \"purses\", \"pursue\", \"pursy\", \"purvey\", \"pus\", \"puses\", \"push\", \"pushed\", \"pusher\", \"pushes\", \"pushup\", \"pushy\", \"pusley\", \"puss\", \"pusses\", \"pussly\", \"pussy\", \"put\", \"putlog\", \"putoff\", \"puton\", \"putons\", \"putout\", \"putrid\", \"puts\", \"putsch\", \"putt\", \"putted\", \"puttee\", \"putter\", \"putti\", \"putto\", \"putts\", \"putty\", \"putz\", \"putzed\", \"putzes\", \"puzzle\", \"pya\", \"pyas\", \"pye\", \"pyemia\", \"pyemic\", \"pyes\", \"pygmy\", \"pyic\", \"pyin\", \"pyins\", \"pyknic\", \"pylon\", \"pylons\", \"pylori\", \"pyoid\", \"pyoses\", \"pyosis\", \"pyran\", \"pyrans\", \"pyre\", \"pyrene\", \"pyres\", \"pyric\", \"pyrite\", \"pyrola\", \"pyrone\", \"pyrope\", \"pyrrol\", \"python\", \"pyuria\", \"pyx\", \"pyxes\", \"pyxie\", \"pyxies\", \"pyxis\", \"qaid\", \"qaids\", \"qanat\", \"qanats\", \"qat\", \"qats\", \"qindar\", \"qintar\", \"qiviut\", \"qoph\", \"qophs\", \"qua\", \"quack\", \"quacks\", \"quad\", \"quads\", \"quaere\", \"quaff\", \"quaffs\", \"quag\", \"quagga\", \"quaggy\", \"quags\", \"quahog\", \"quai\", \"quaich\", \"quaigh\", \"quail\", \"quails\", \"quaint\", \"quais\", \"quake\", \"quaked\", \"quaker\", \"quakes\", \"quaky\", \"quale\", \"qualia\", \"qualm\", \"qualms\", \"qualmy\", \"quango\", \"quant\", \"quanta\", \"quants\", \"quare\", \"quark\", \"quarks\", \"quarry\", \"quart\", \"quarte\", \"quarto\", \"quarts\", \"quartz\", \"quasar\", \"quash\", \"quasi\", \"quass\", \"quate\", \"quatre\", \"quaver\", \"quay\", \"quays\", \"quean\", \"queans\", \"queasy\", \"queazy\", \"queen\", \"queens\", \"queer\", \"queers\", \"quell\", \"quells\", \"quench\", \"quern\", \"querns\", \"query\", \"quest\", \"quests\", \"queue\", \"queued\", \"queuer\", \"queues\", \"quey\", \"queys\", \"quezal\", \"quiche\", \"quick\", \"quicks\", \"quid\", \"quids\", \"quiet\", \"quiets\", \"quiff\", \"quiffs\", \"quill\", \"quills\", \"quilt\", \"quilts\", \"quin\", \"quince\", \"quinic\", \"quinin\", \"quinoa\", \"quinol\", \"quins\", \"quinsy\", \"quint\", \"quinta\", \"quinte\", \"quints\", \"quip\", \"quippu\", \"quips\", \"quipu\", \"quipus\", \"quire\", \"quired\", \"quires\", \"quirk\", \"quirks\", \"quirky\", \"quirt\", \"quirts\", \"quit\", \"quitch\", \"quite\", \"quits\", \"quiver\", \"quiz\", \"quod\", \"quods\", \"quohog\", \"quoin\", \"quoins\", \"quoit\", \"quoits\", \"quokka\", \"quorum\", \"quota\", \"quotas\", \"quote\", \"quoted\", \"quoter\", \"quotes\", \"quoth\", \"quotha\", \"qursh\", \"qurush\", \"qwerty\", \"rabat\", \"rabato\", \"rabats\", \"rabbet\", \"rabbi\", \"rabbin\", \"rabbis\", \"rabbit\", \"rabble\", \"rabic\", \"rabid\", \"rabies\", \"race\", \"raced\", \"raceme\", \"racer\", \"racers\", \"races\", \"rachet\", \"rachis\", \"racial\", \"racier\", \"racily\", \"racing\", \"racism\", \"racist\", \"rack\", \"racked\", \"racker\", \"racket\", \"rackle\", \"racks\", \"racon\", \"racons\", \"racoon\", \"racy\", \"rad\", \"radar\", \"radars\", \"radded\", \"raddle\", \"radial\", \"radian\", \"radii\", \"radio\", \"radios\", \"radish\", \"radium\", \"radius\", \"radix\", \"radome\", \"radon\", \"radons\", \"rads\", \"radula\", \"raff\", \"raffia\", \"raffle\", \"raffs\", \"raft\", \"rafted\", \"rafter\", \"rafts\", \"rag\", \"raga\", \"ragas\", \"ragbag\", \"rage\", \"raged\", \"ragee\", \"ragees\", \"rages\", \"ragged\", \"raggee\", \"raggle\", \"raggy\", \"ragi\", \"raging\", \"ragis\", \"raglan\", \"ragman\", \"ragmen\", \"ragout\", \"rags\", \"ragtag\", \"ragtop\", \"rah\", \"raia\", \"raias\", \"raid\", \"raided\", \"raider\", \"raids\", \"rail\", \"railed\", \"railer\", \"rails\", \"rain\", \"rained\", \"rains\", \"rainy\", \"raise\", \"raised\", \"raiser\", \"raises\", \"raisin\", \"raj\", \"raja\", \"rajah\", \"rajahs\", \"rajas\", \"rajes\", \"rake\", \"raked\", \"rakee\", \"rakees\", \"raker\", \"rakers\", \"rakes\", \"raki\", \"raking\", \"rakis\", \"rakish\", \"rale\", \"rales\", \"rally\", \"rallye\", \"ralph\", \"ralphs\", \"ram\", \"ramate\", \"ramble\", \"ramee\", \"ramees\", \"ramet\", \"ramets\", \"rami\", \"ramie\", \"ramies\", \"ramify\", \"ramjet\", \"rammed\", \"rammer\", \"rammy\", \"ramose\", \"ramous\", \"ramp\", \"ramped\", \"ramps\", \"ramrod\", \"rams\", \"ramson\", \"ramtil\", \"ramus\", \"ran\", \"rance\", \"rances\", \"ranch\", \"rancho\", \"rancid\", \"rancor\", \"rand\", \"randan\", \"random\", \"rands\", \"randy\", \"ranee\", \"ranees\", \"rang\", \"range\", \"ranged\", \"ranger\", \"ranges\", \"rangy\", \"rani\", \"ranid\", \"ranids\", \"ranis\", \"rank\", \"ranked\", \"ranker\", \"rankle\", \"rankly\", \"ranks\", \"ransom\", \"rant\", \"ranted\", \"ranter\", \"rants\", \"ranula\", \"rap\", \"rape\", \"raped\", \"raper\", \"rapers\", \"rapes\", \"raphae\", \"raphe\", \"raphes\", \"raphia\", \"raphis\", \"rapid\", \"rapids\", \"rapier\", \"rapine\", \"raping\", \"rapini\", \"rapist\", \"rapped\", \"rappee\", \"rappel\", \"rappen\", \"rapper\", \"raps\", \"rapt\", \"raptly\", \"raptor\", \"rare\", \"rared\", \"rarefy\", \"rarely\", \"rarer\", \"rares\", \"rarest\", \"rarify\", \"raring\", \"rarity\", \"ras\", \"rascal\", \"rase\", \"rased\", \"raser\", \"rasers\", \"rases\", \"rash\", \"rasher\", \"rashes\", \"rashly\", \"rasing\", \"rasp\", \"rasped\", \"rasper\", \"rasps\", \"raspy\", \"rassle\", \"raster\", \"rasure\", \"rat\", \"ratal\", \"ratals\", \"ratan\", \"ratans\", \"ratany\", \"ratbag\", \"ratch\", \"rate\", \"rated\", \"ratel\", \"ratels\", \"rater\", \"raters\", \"rates\", \"rath\", \"rathe\", \"rather\", \"ratify\", \"ratine\", \"rating\", \"ratio\", \"ration\", \"ratios\", \"ratite\", \"ratlin\", \"rato\", \"ratoon\", \"ratos\", \"rats\", \"rattan\", \"ratted\", \"ratten\", \"ratter\", \"rattle\", \"rattly\", \"ratton\", \"ratty\", \"raunch\", \"ravage\", \"rave\", \"raved\", \"ravel\", \"ravels\", \"raven\", \"ravens\", \"raver\", \"ravers\", \"raves\", \"ravin\", \"ravine\", \"raving\", \"ravins\", \"ravish\", \"raw\", \"rawer\", \"rawest\", \"rawin\", \"rawins\", \"rawish\", \"rawly\", \"raws\", \"rax\", \"raxed\", \"raxes\", \"raxing\", \"ray\", \"raya\", \"rayah\", \"rayahs\", \"rayas\", \"rayed\", \"raying\", \"rayon\", \"rayons\", \"rays\", \"raze\", \"razed\", \"razee\", \"razeed\", \"razees\", \"razer\", \"razers\", \"razes\", \"razing\", \"razor\", \"razors\", \"razz\", \"razzed\", \"razzes\", \"reach\", \"react\", \"reacts\", \"read\", \"readd\", \"readds\", \"reader\", \"reads\", \"ready\", \"reagin\", \"real\", \"realer\", \"reales\", \"realia\", \"really\", \"realm\", \"realms\", \"reals\", \"realty\", \"ream\", \"reamed\", \"reamer\", \"reams\", \"reap\", \"reaped\", \"reaper\", \"reaps\", \"rear\", \"reared\", \"rearer\", \"rearm\", \"rearms\", \"rears\", \"reason\", \"reata\", \"reatas\", \"reave\", \"reaved\", \"reaver\", \"reaves\", \"reavow\", \"reb\", \"rebait\", \"rebar\", \"rebars\", \"rebate\", \"rebato\", \"rebbe\", \"rebbes\", \"rebec\", \"rebeck\", \"rebecs\", \"rebel\", \"rebels\", \"rebid\", \"rebids\", \"rebill\", \"rebind\", \"rebody\", \"reboil\", \"rebook\", \"reboot\", \"rebop\", \"rebops\", \"rebore\", \"reborn\", \"rebozo\", \"rebred\", \"rebs\", \"rebuff\", \"rebuke\", \"rebury\", \"rebus\", \"rebut\", \"rebuts\", \"rebuy\", \"rebuys\", \"rec\", \"recall\", \"recane\", \"recant\", \"recap\", \"recaps\", \"recast\", \"recce\", \"recces\", \"recede\", \"recent\", \"recept\", \"recess\", \"rechew\", \"recipe\", \"recite\", \"reck\", \"recked\", \"reckon\", \"recks\", \"reclad\", \"recoal\", \"recock\", \"recode\", \"recoil\", \"recoin\", \"recomb\", \"recon\", \"recons\", \"recook\", \"recopy\", \"record\", \"recork\", \"recoup\", \"recs\", \"recta\", \"rectal\", \"recti\", \"recto\", \"rector\", \"rectos\", \"rectum\", \"rectus\", \"recur\", \"recurs\", \"recuse\", \"recut\", \"recuts\", \"red\", \"redact\", \"redan\", \"redans\", \"redate\", \"redbay\", \"redbud\", \"redbug\", \"redcap\", \"redd\", \"redded\", \"redden\", \"redder\", \"reddle\", \"redds\", \"rede\", \"redear\", \"reded\", \"redeem\", \"redefy\", \"redeny\", \"redes\", \"redeye\", \"redfin\", \"redia\", \"rediae\", \"redial\", \"redias\", \"redid\", \"reding\", \"redip\", \"redips\", \"redipt\", \"redleg\", \"redly\", \"redo\", \"redock\", \"redoes\", \"redon\", \"redone\", \"redons\", \"redos\", \"redout\", \"redowa\", \"redox\", \"redraw\", \"redrew\", \"redry\", \"reds\", \"redtop\", \"redub\", \"redubs\", \"reduce\", \"redux\", \"redye\", \"redyed\", \"redyes\", \"ree\", \"reearn\", \"reecho\", \"reechy\", \"reed\", \"reeded\", \"reedit\", \"reeds\", \"reedy\", \"reef\", \"reefed\", \"reefer\", \"reefs\", \"reefy\", \"reek\", \"reeked\", \"reeker\", \"reeks\", \"reeky\", \"reel\", \"reeled\", \"reeler\", \"reels\", \"reemit\", \"rees\", \"reest\", \"reests\", \"reeve\", \"reeved\", \"reeves\", \"ref\", \"reface\", \"refall\", \"refect\", \"refed\", \"refeed\", \"refeel\", \"refel\", \"refell\", \"refels\", \"refelt\", \"refer\", \"refers\", \"reffed\", \"refile\", \"refill\", \"refilm\", \"refind\", \"refine\", \"refire\", \"refit\", \"refits\", \"refix\", \"reflet\", \"reflew\", \"reflex\", \"reflow\", \"reflux\", \"refly\", \"refold\", \"reform\", \"refry\", \"refs\", \"reft\", \"refuel\", \"refuge\", \"refund\", \"refuse\", \"refute\", \"reg\", \"regain\", \"regal\", \"regale\", \"regard\", \"regave\", \"regear\", \"regent\", \"reges\", \"reggae\", \"regild\", \"regilt\", \"regime\", \"regina\", \"region\", \"regius\", \"regive\", \"reglet\", \"reglow\", \"reglue\", \"regma\", \"regna\", \"regnal\", \"regnum\", \"regret\", \"regrew\", \"regrow\", \"regs\", \"reguli\", \"rehab\", \"rehabs\", \"rehang\", \"rehash\", \"rehear\", \"reheat\", \"reheel\", \"rehem\", \"rehems\", \"rehire\", \"rehung\", \"rei\", \"reif\", \"reifs\", \"reify\", \"reign\", \"reigns\", \"rein\", \"reined\", \"reink\", \"reinks\", \"reins\", \"reis\", \"reive\", \"reived\", \"reiver\", \"reives\", \"reject\", \"rejoin\", \"rekey\", \"rekeys\", \"reknit\", \"relace\", \"relaid\", \"relate\", \"relax\", \"relay\", \"relays\", \"relend\", \"relent\", \"relet\", \"relets\", \"releve\", \"relic\", \"relics\", \"relict\", \"relied\", \"relief\", \"relier\", \"relies\", \"reline\", \"relink\", \"relish\", \"relist\", \"relit\", \"relive\", \"reload\", \"reloan\", \"relock\", \"relook\", \"reluct\", \"relume\", \"rely\", \"rem\", \"remade\", \"remail\", \"remain\", \"remake\", \"reman\", \"remand\", \"remans\", \"remap\", \"remaps\", \"remark\", \"remate\", \"remedy\", \"remeet\", \"remelt\", \"remend\", \"remet\", \"remex\", \"remind\", \"remint\", \"remise\", \"remiss\", \"remit\", \"remits\", \"remix\", \"remixt\", \"remold\", \"remora\", \"remote\", \"remove\", \"rems\", \"remuda\", \"renail\", \"renal\", \"rename\", \"rend\", \"rended\", \"render\", \"rends\", \"renege\", \"renest\", \"renew\", \"renews\", \"renig\", \"renigs\", \"renin\", \"renins\", \"rennet\", \"rennin\", \"renown\", \"rent\", \"rental\", \"rente\", \"rented\", \"renter\", \"rentes\", \"rents\", \"renvoi\", \"reoil\", \"reoils\", \"reopen\", \"rep\", \"repack\", \"repaid\", \"repair\", \"repand\", \"repark\", \"repass\", \"repast\", \"repave\", \"repay\", \"repays\", \"repeal\", \"repeat\", \"repeg\", \"repegs\", \"repel\", \"repels\", \"repent\", \"reperk\", \"repin\", \"repine\", \"repins\", \"replan\", \"replay\", \"repled\", \"replot\", \"reply\", \"repo\", \"repoll\", \"report\", \"repos\", \"repose\", \"repot\", \"repots\", \"repour\", \"repp\", \"repped\", \"repps\", \"repro\", \"repros\", \"reps\", \"repugn\", \"repump\", \"repute\", \"requin\", \"rerack\", \"reran\", \"reread\", \"rerig\", \"rerigs\", \"rerise\", \"reroll\", \"reroof\", \"rerose\", \"rerun\", \"reruns\", \"res\", \"resaid\", \"resail\", \"resale\", \"resaw\", \"resawn\", \"resaws\", \"resay\", \"resays\", \"rescue\", \"reseal\", \"reseat\", \"reseau\", \"resect\", \"reseda\", \"resee\", \"reseed\", \"reseek\", \"reseen\", \"resees\", \"resell\", \"resend\", \"resent\", \"reset\", \"resets\", \"resew\", \"resewn\", \"resews\", \"resh\", \"reshes\", \"reship\", \"reshod\", \"reshoe\", \"reshot\", \"reshow\", \"resid\", \"reside\", \"resids\", \"resift\", \"resign\", \"resile\", \"resin\", \"resins\", \"resiny\", \"resist\", \"resite\", \"resize\", \"resoak\", \"resod\", \"resods\", \"resold\", \"resole\", \"resorb\", \"resort\", \"resow\", \"resown\", \"resows\", \"respot\", \"rest\", \"rested\", \"rester\", \"rests\", \"result\", \"resume\", \"ret\", \"retack\", \"retag\", \"retags\", \"retail\", \"retain\", \"retake\", \"retape\", \"retard\", \"retax\", \"retch\", \"rete\", \"reteam\", \"retear\", \"retell\", \"retem\", \"retems\", \"retene\", \"retest\", \"retia\", \"retial\", \"retie\", \"retied\", \"reties\", \"retile\", \"retime\", \"retina\", \"retine\", \"retint\", \"retire\", \"retold\", \"retook\", \"retool\", \"retore\", \"retorn\", \"retort\", \"retral\", \"retrim\", \"retro\", \"retros\", \"retry\", \"rets\", \"retted\", \"retune\", \"return\", \"retuse\", \"retype\", \"reuse\", \"reused\", \"reuses\", \"rev\", \"revamp\", \"reveal\", \"revel\", \"revels\", \"reverb\", \"revere\", \"revers\", \"revert\", \"revery\", \"revest\", \"revet\", \"revets\", \"review\", \"revile\", \"revise\", \"revive\", \"revoke\", \"revolt\", \"revote\", \"revs\", \"revue\", \"revues\", \"revved\", \"rewake\", \"rewan\", \"reward\", \"rewarm\", \"rewash\", \"rewax\", \"rewed\", \"reweds\", \"reweld\", \"rewet\", \"rewets\", \"rewin\", \"rewind\", \"rewins\", \"rewire\", \"rewoke\", \"rewon\", \"reword\", \"rework\", \"rewove\", \"rewrap\", \"rex\", \"rexes\", \"rezone\", \"rhaphe\", \"rhea\", \"rheas\", \"rhebok\", \"rhesus\", \"rhetor\", \"rheum\", \"rheums\", \"rheumy\", \"rhinal\", \"rhino\", \"rhinos\", \"rho\", \"rhodic\", \"rhomb\", \"rhombi\", \"rhombs\", \"rhos\", \"rhumb\", \"rhumba\", \"rhumbs\", \"rhus\", \"rhuses\", \"rhyme\", \"rhymed\", \"rhymer\", \"rhymes\", \"rhyta\", \"rhythm\", \"rhyton\", \"ria\", \"rial\", \"rials\", \"rialto\", \"riant\", \"rias\", \"riata\", \"riatas\", \"rib\", \"ribald\", \"riband\", \"ribbed\", \"ribber\", \"ribbon\", \"ribby\", \"ribes\", \"ribier\", \"riblet\", \"ribose\", \"ribs\", \"rice\", \"riced\", \"ricer\", \"ricers\", \"rices\", \"rich\", \"richen\", \"richer\", \"riches\", \"richly\", \"ricin\", \"ricing\", \"ricins\", \"rick\", \"ricked\", \"rickey\", \"ricks\", \"ricrac\", \"rictal\", \"rictus\", \"rid\", \"ridded\", \"ridden\", \"ridder\", \"riddle\", \"ride\", \"rident\", \"rider\", \"riders\", \"rides\", \"ridge\", \"ridged\", \"ridgel\", \"ridges\", \"ridgil\", \"ridgy\", \"riding\", \"ridley\", \"rids\", \"riel\", \"riels\", \"riever\", \"rif\", \"rife\", \"rifely\", \"rifer\", \"rifest\", \"riff\", \"riffed\", \"riffle\", \"riffs\", \"rifle\", \"rifled\", \"rifler\", \"rifles\", \"rifs\", \"rift\", \"rifted\", \"rifts\", \"rig\", \"rigged\", \"rigger\", \"right\", \"righto\", \"rights\", \"righty\", \"rigid\", \"rigor\", \"rigors\", \"rigour\", \"rigs\", \"rile\", \"riled\", \"riles\", \"riley\", \"riling\", \"rill\", \"rille\", \"rilled\", \"rilles\", \"rillet\", \"rills\", \"rim\", \"rime\", \"rimed\", \"rimer\", \"rimers\", \"rimes\", \"rimier\", \"riming\", \"rimmed\", \"rimmer\", \"rimose\", \"rimous\", \"rimple\", \"rims\", \"rimy\", \"rin\", \"rind\", \"rinded\", \"rinds\", \"ring\", \"ringed\", \"ringer\", \"rings\", \"rink\", \"rinks\", \"rins\", \"rinse\", \"rinsed\", \"rinser\", \"rinses\", \"rioja\", \"riojas\", \"riot\", \"rioted\", \"rioter\", \"riots\", \"rip\", \"ripe\", \"riped\", \"ripely\", \"ripen\", \"ripens\", \"riper\", \"ripes\", \"ripest\", \"riping\", \"ripoff\", \"ripost\", \"ripped\", \"ripper\", \"ripple\", \"ripply\", \"riprap\", \"rips\", \"ripsaw\", \"rise\", \"risen\", \"riser\", \"risers\", \"rises\", \"rishi\", \"rishis\", \"rising\", \"risk\", \"risked\", \"risker\", \"risks\", \"risky\", \"risque\", \"risus\", \"ritard\", \"rite\", \"rites\", \"ritter\", \"ritual\", \"ritz\", \"ritzes\", \"ritzy\", \"rivage\", \"rival\", \"rivals\", \"rive\", \"rived\", \"riven\", \"river\", \"rivers\", \"rives\", \"rivet\", \"rivets\", \"riving\", \"riyal\", \"riyals\", \"roach\", \"road\", \"roadeo\", \"roadie\", \"roads\", \"roam\", \"roamed\", \"roamer\", \"roams\", \"roan\", \"roans\", \"roar\", \"roared\", \"roarer\", \"roars\", \"roast\", \"roasts\", \"rob\", \"robalo\", \"roband\", \"robbed\", \"robber\", \"robbin\", \"robe\", \"robed\", \"robes\", \"robin\", \"robing\", \"robins\", \"roble\", \"robles\", \"robot\", \"robots\", \"robs\", \"robust\", \"roc\", \"rochet\", \"rock\", \"rocked\", \"rocker\", \"rocket\", \"rocks\", \"rocky\", \"rococo\", \"rocs\", \"rod\", \"rodded\", \"rode\", \"rodent\", \"rodeo\", \"rodeos\", \"rodman\", \"rodmen\", \"rods\", \"roe\", \"roes\", \"roger\", \"rogers\", \"rogue\", \"rogued\", \"rogues\", \"roil\", \"roiled\", \"roils\", \"roily\", \"role\", \"roles\", \"rolf\", \"rolfed\", \"rolfer\", \"rolfs\", \"roll\", \"rolled\", \"roller\", \"rolls\", \"rom\", \"roman\", \"romano\", \"romans\", \"romeo\", \"romeos\", \"romp\", \"romped\", \"romper\", \"romps\", \"roms\", \"rondel\", \"rondo\", \"rondos\", \"ronion\", \"ronnel\", \"ronyon\", \"rood\", \"roods\", \"roof\", \"roofed\", \"roofer\", \"roofs\", \"rook\", \"rooked\", \"rookie\", \"rooks\", \"rooky\", \"room\", \"roomed\", \"roomer\", \"roomie\", \"rooms\", \"roomy\", \"roose\", \"roosed\", \"rooser\", \"rooses\", \"roost\", \"roosts\", \"root\", \"rooted\", \"rooter\", \"roots\", \"rooty\", \"rope\", \"roped\", \"roper\", \"ropers\", \"ropery\", \"ropes\", \"ropey\", \"ropier\", \"ropily\", \"roping\", \"ropy\", \"roque\", \"roques\", \"roquet\", \"rosary\", \"roscoe\", \"rose\", \"rosed\", \"rosery\", \"roses\", \"roset\", \"rosets\", \"rosier\", \"rosily\", \"rosin\", \"rosing\", \"rosins\", \"rosiny\", \"roster\", \"rostra\", \"rosy\", \"rot\", \"rota\", \"rotary\", \"rotas\", \"rotate\", \"rotch\", \"rotche\", \"rote\", \"rotes\", \"rotgut\", \"roti\", \"rotis\", \"rotl\", \"rotls\", \"roto\", \"rotor\", \"rotors\", \"rotos\", \"rots\", \"rotte\", \"rotted\", \"rotten\", \"rotter\", \"rottes\", \"rotund\", \"rouble\", \"rouche\", \"roue\", \"rouen\", \"rouens\", \"roues\", \"rouge\", \"rouged\", \"rouges\", \"rough\", \"roughs\", \"round\", \"rounds\", \"roup\", \"rouped\", \"roupet\", \"roups\", \"roupy\", \"rouse\", \"roused\", \"rouser\", \"rouses\", \"roust\", \"rousts\", \"rout\", \"route\", \"routed\", \"router\", \"routes\", \"routh\", \"rouths\", \"routs\", \"roux\", \"rove\", \"roved\", \"roven\", \"rover\", \"rovers\", \"roves\", \"roving\", \"row\", \"rowan\", \"rowans\", \"rowdy\", \"rowed\", \"rowel\", \"rowels\", \"rowen\", \"rowens\", \"rower\", \"rowers\", \"rowing\", \"rows\", \"rowth\", \"rowths\", \"royal\", \"royals\", \"rozzer\", \"ruana\", \"ruanas\", \"rub\", \"rubace\", \"rubato\", \"rubbed\", \"rubber\", \"rubble\", \"rubbly\", \"rube\", \"rubes\", \"rubied\", \"rubier\", \"rubies\", \"rubigo\", \"ruble\", \"rubles\", \"ruboff\", \"rubout\", \"rubric\", \"rubs\", \"rubus\", \"ruby\", \"ruche\", \"ruched\", \"ruches\", \"ruck\", \"rucked\", \"ruckle\", \"rucks\", \"ruckus\", \"rudd\", \"rudder\", \"ruddle\", \"rudds\", \"ruddy\", \"rude\", \"rudely\", \"ruder\", \"rudest\", \"rue\", \"rued\", \"rueful\", \"ruer\", \"ruers\", \"rues\", \"ruff\", \"ruffe\", \"ruffed\", \"ruffes\", \"ruffle\", \"ruffly\", \"ruffs\", \"rufous\", \"rug\", \"ruga\", \"rugae\", \"rugal\", \"rugate\", \"rugby\", \"rugged\", \"rugger\", \"rugola\", \"rugosa\", \"rugose\", \"rugous\", \"rugs\", \"ruin\", \"ruined\", \"ruiner\", \"ruing\", \"ruins\", \"rule\", \"ruled\", \"ruler\", \"rulers\", \"rules\", \"rulier\", \"ruling\", \"ruly\", \"rum\", \"rumaki\", \"rumba\", \"rumbas\", \"rumble\", \"rumbly\", \"rumen\", \"rumens\", \"rumina\", \"rummer\", \"rummy\", \"rumor\", \"rumors\", \"rumour\", \"rump\", \"rumple\", \"rumply\", \"rumps\", \"rumpus\", \"rums\", \"run\", \"rundle\", \"rune\", \"runes\", \"rung\", \"rungs\", \"runic\", \"runkle\", \"runlet\", \"runnel\", \"runner\", \"runny\", \"runoff\", \"runout\", \"runs\", \"runt\", \"runts\", \"runty\", \"runway\", \"rupee\", \"rupees\", \"rupiah\", \"rural\", \"rurban\", \"ruse\", \"ruses\", \"rush\", \"rushed\", \"rushee\", \"rusher\", \"rushes\", \"rushy\", \"rusine\", \"rusk\", \"rusks\", \"russet\", \"rust\", \"rusted\", \"rustic\", \"rustle\", \"rusts\", \"rusty\", \"rut\", \"ruth\", \"ruths\", \"rutile\", \"rutin\", \"rutins\", \"ruts\", \"rutted\", \"rutty\", \"rya\", \"ryas\", \"rye\", \"ryes\", \"ryke\", \"ryked\", \"rykes\", \"ryking\", \"rynd\", \"rynds\", \"ryokan\", \"ryot\", \"ryots\", \"sab\", \"sabbat\", \"sabbed\", \"sabe\", \"sabed\", \"saber\", \"sabers\", \"sabes\", \"sabin\", \"sabine\", \"sabins\", \"sabir\", \"sabirs\", \"sable\", \"sables\", \"sabot\", \"sabots\", \"sabra\", \"sabras\", \"sabre\", \"sabred\", \"sabres\", \"sabs\", \"sac\", \"sacbut\", \"sachem\", \"sachet\", \"sack\", \"sacked\", \"sacker\", \"sacks\", \"sacque\", \"sacra\", \"sacral\", \"sacred\", \"sacrum\", \"sacs\", \"sad\", \"sadden\", \"sadder\", \"saddhu\", \"saddle\", \"sade\", \"sades\", \"sadhe\", \"sadhes\", \"sadhu\", \"sadhus\", \"sadi\", \"sadis\", \"sadism\", \"sadist\", \"sadly\", \"sae\", \"safari\", \"safe\", \"safely\", \"safer\", \"safes\", \"safest\", \"safety\", \"safrol\", \"sag\", \"saga\", \"sagas\", \"sagbut\", \"sage\", \"sagely\", \"sager\", \"sages\", \"sagest\", \"saggar\", \"sagged\", \"sagger\", \"saggy\", \"sagier\", \"sago\", \"sagos\", \"sags\", \"sagum\", \"sagy\", \"sahib\", \"sahibs\", \"saice\", \"saices\", \"said\", \"saids\", \"saiga\", \"saigas\", \"sail\", \"sailed\", \"sailer\", \"sailor\", \"sails\", \"saimin\", \"sain\", \"sained\", \"sains\", \"saint\", \"saints\", \"saith\", \"saithe\", \"saiyid\", \"sajou\", \"sajous\", \"sake\", \"saker\", \"sakers\", \"sakes\", \"saki\", \"sakis\", \"sal\", \"salaam\", \"salad\", \"salads\", \"salal\", \"salals\", \"salami\", \"salary\", \"sale\", \"salep\", \"saleps\", \"sales\", \"salic\", \"salify\", \"salina\", \"saline\", \"saliva\", \"sall\", \"sallet\", \"sallow\", \"sally\", \"salmi\", \"salmis\", \"salmon\", \"salol\", \"salols\", \"salon\", \"salons\", \"saloon\", \"saloop\", \"salp\", \"salpa\", \"salpae\", \"salpas\", \"salpid\", \"salps\", \"sals\", \"salsa\", \"salsas\", \"salt\", \"salted\", \"salter\", \"saltie\", \"salts\", \"salty\", \"saluki\", \"salute\", \"salve\", \"salved\", \"salver\", \"salves\", \"salvia\", \"salvo\", \"salvor\", \"salvos\", \"samara\", \"samba\", \"sambar\", \"sambas\", \"sambo\", \"sambos\", \"sambur\", \"same\", \"samech\", \"samek\", \"samekh\", \"sameks\", \"samiel\", \"samite\", \"samlet\", \"samosa\", \"samp\", \"sampan\", \"sample\", \"samps\", \"samshu\", \"sancta\", \"sand\", \"sandal\", \"sanded\", \"sander\", \"sandhi\", \"sands\", \"sandy\", \"sane\", \"saned\", \"sanely\", \"saner\", \"sanes\", \"sanest\", \"sang\", \"sanga\", \"sangar\", \"sangas\", \"sanger\", \"sangh\", \"sanghs\", \"sanies\", \"saning\", \"sanity\", \"sanjak\", \"sank\", \"sannop\", \"sannup\", \"sans\", \"sansar\", \"sansei\", \"santir\", \"santo\", \"santol\", \"santos\", \"santur\", \"sap\", \"sapid\", \"sapor\", \"sapors\", \"sapota\", \"sapote\", \"sapour\", \"sapped\", \"sapper\", \"sappy\", \"saps\", \"saran\", \"sarans\", \"sarape\", \"sard\", \"sardar\", \"sards\", \"saree\", \"sarees\", \"sarge\", \"sarges\", \"sari\", \"sarin\", \"sarins\", \"saris\", \"sark\", \"sarks\", \"sarky\", \"sarod\", \"sarode\", \"sarods\", \"sarong\", \"saros\", \"sarsar\", \"sarsen\", \"sartor\", \"sash\", \"sashay\", \"sashed\", \"sashes\", \"sasin\", \"sasins\", \"sass\", \"sassed\", \"sasses\", \"sassy\", \"sat\", \"satang\", \"satara\", \"satay\", \"satays\", \"sate\", \"sated\", \"sateen\", \"satem\", \"sates\", \"sati\", \"satin\", \"sating\", \"satins\", \"satiny\", \"satire\", \"satis\", \"satori\", \"satrap\", \"satyr\", \"satyrs\", \"sau\", \"sauce\", \"sauced\", \"saucer\", \"sauces\", \"sauch\", \"sauchs\", \"saucy\", \"sauger\", \"saugh\", \"saughs\", \"saughy\", \"saul\", \"sauls\", \"sault\", \"saults\", \"sauna\", \"saunas\", \"saurel\", \"saury\", \"saute\", \"sauted\", \"sautes\", \"savage\", \"savant\", \"savate\", \"save\", \"saved\", \"saver\", \"savers\", \"saves\", \"savin\", \"savine\", \"saving\", \"savins\", \"savior\", \"savor\", \"savors\", \"savory\", \"savour\", \"savoy\", \"savoys\", \"savvy\", \"saw\", \"sawed\", \"sawer\", \"sawers\", \"sawfly\", \"sawing\", \"sawlog\", \"sawn\", \"sawney\", \"saws\", \"sawyer\", \"sax\", \"saxes\", \"saxony\", \"say\", \"sayer\", \"sayers\", \"sayest\", \"sayid\", \"sayids\", \"saying\", \"says\", \"sayst\", \"sayyid\", \"scab\", \"scabby\", \"scabs\", \"scad\", \"scads\", \"scag\", \"scags\", \"scalar\", \"scald\", \"scalds\", \"scale\", \"scaled\", \"scaler\", \"scales\", \"scall\", \"scalls\", \"scalp\", \"scalps\", \"scaly\", \"scam\", \"scamp\", \"scampi\", \"scamps\", \"scams\", \"scan\", \"scans\", \"scant\", \"scants\", \"scanty\", \"scape\", \"scaped\", \"scapes\", \"scar\", \"scarab\", \"scarce\", \"scare\", \"scared\", \"scarer\", \"scares\", \"scarey\", \"scarf\", \"scarfs\", \"scarp\", \"scarph\", \"scarps\", \"scarry\", \"scars\", \"scart\", \"scarts\", \"scary\", \"scat\", \"scathe\", \"scats\", \"scatt\", \"scatts\", \"scatty\", \"scaup\", \"scaups\", \"scaur\", \"scaurs\", \"scena\", \"scenas\", \"scend\", \"scends\", \"scene\", \"scenes\", \"scenic\", \"scent\", \"scents\", \"schav\", \"schavs\", \"schema\", \"scheme\", \"schism\", \"schist\", \"schizo\", \"schizy\", \"schlep\", \"schmo\", \"schmoe\", \"schmos\", \"schnoz\", \"school\", \"schorl\", \"schrik\", \"schrod\", \"schtik\", \"schuit\", \"schul\", \"schuln\", \"schuss\", \"schwa\", \"schwas\", \"scilla\", \"scion\", \"scions\", \"sclaff\", \"sclera\", \"scoff\", \"scoffs\", \"scold\", \"scolds\", \"scolex\", \"sconce\", \"scone\", \"scones\", \"scoop\", \"scoops\", \"scoot\", \"scoots\", \"scop\", \"scope\", \"scoped\", \"scopes\", \"scops\", \"scorch\", \"score\", \"scored\", \"scorer\", \"scores\", \"scoria\", \"scorn\", \"scorns\", \"scot\", \"scotch\", \"scoter\", \"scotia\", \"scots\", \"scour\", \"scours\", \"scouse\", \"scout\", \"scouth\", \"scouts\", \"scow\", \"scowed\", \"scowl\", \"scowls\", \"scows\", \"scrag\", \"scrags\", \"scram\", \"scrams\", \"scrap\", \"scrape\", \"scraps\", \"scrawl\", \"screak\", \"scream\", \"scree\", \"screed\", \"screen\", \"screes\", \"screw\", \"screws\", \"screwy\", \"scribe\", \"scried\", \"scries\", \"scrim\", \"scrimp\", \"scrims\", \"scrip\", \"scrips\", \"script\", \"scrive\", \"scrod\", \"scrods\", \"scroll\", \"scroop\", \"scrota\", \"scrub\", \"scrubs\", \"scruff\", \"scrum\", \"scrums\", \"scry\", \"scuba\", \"scubas\", \"scud\", \"scudi\", \"scudo\", \"scuds\", \"scuff\", \"scuffs\", \"sculk\", \"sculks\", \"scull\", \"sculls\", \"sculp\", \"sculps\", \"sculpt\", \"scum\", \"scummy\", \"scums\", \"scup\", \"scups\", \"scurf\", \"scurfs\", \"scurfy\", \"scurry\", \"scurvy\", \"scut\", \"scuta\", \"scutch\", \"scute\", \"scutes\", \"scuts\", \"scutum\", \"scuzzy\", \"scyphi\", \"scythe\", \"sea\", \"seabag\", \"seabed\", \"seadog\", \"seal\", \"sealed\", \"sealer\", \"seals\", \"seam\", \"seaman\", \"seamed\", \"seamen\", \"seamer\", \"seams\", \"seamy\", \"seance\", \"sear\", \"search\", \"seared\", \"searer\", \"sears\", \"seas\", \"season\", \"seat\", \"seated\", \"seater\", \"seats\", \"seawan\", \"seaway\", \"sebum\", \"sebums\", \"sec\", \"secant\", \"secco\", \"seccos\", \"secede\", \"secern\", \"second\", \"secpar\", \"secret\", \"secs\", \"sect\", \"sector\", \"sects\", \"secund\", \"secure\", \"sedan\", \"sedans\", \"sedate\", \"seder\", \"seders\", \"sedge\", \"sedges\", \"sedgy\", \"sedile\", \"seduce\", \"sedum\", \"sedums\", \"see\", \"seed\", \"seeded\", \"seeder\", \"seeds\", \"seedy\", \"seeing\", \"seek\", \"seeker\", \"seeks\", \"seel\", \"seeled\", \"seels\", \"seely\", \"seem\", \"seemed\", \"seemer\", \"seemly\", \"seems\", \"seen\", \"seep\", \"seeped\", \"seeps\", \"seepy\", \"seer\", \"seers\", \"sees\", \"seesaw\", \"seethe\", \"seg\", \"seggar\", \"segni\", \"segno\", \"segnos\", \"sego\", \"segos\", \"segs\", \"segue\", \"segued\", \"segues\", \"sei\", \"seiche\", \"seidel\", \"seif\", \"seifs\", \"seine\", \"seined\", \"seiner\", \"seines\", \"seis\", \"seise\", \"seised\", \"seiser\", \"seises\", \"seisin\", \"seism\", \"seisms\", \"seisor\", \"seize\", \"seized\", \"seizer\", \"seizes\", \"seizin\", \"seizor\", \"sejant\", \"sel\", \"selah\", \"selahs\", \"seldom\", \"select\", \"self\", \"selfed\", \"selfs\", \"sell\", \"selle\", \"seller\", \"selles\", \"sells\", \"sels\", \"selsyn\", \"selva\", \"selvas\", \"selves\", \"seme\", \"sememe\", \"semen\", \"semens\", \"semes\", \"semi\", \"semina\", \"semis\", \"semple\", \"sempre\", \"sen\", \"senary\", \"senate\", \"send\", \"sendal\", \"sended\", \"sender\", \"sends\", \"sendup\", \"sene\", \"seneca\", \"senega\", \"sengi\", \"senhor\", \"senile\", \"senior\", \"seniti\", \"senna\", \"sennas\", \"sennet\", \"sennit\", \"senor\", \"senora\", \"senors\", \"senryu\", \"sensa\", \"sense\", \"sensed\", \"senses\", \"sensor\", \"sensum\", \"sent\", \"sente\", \"senti\", \"sentry\", \"sepal\", \"sepals\", \"sepia\", \"sepias\", \"sepic\", \"sepoy\", \"sepoys\", \"sepses\", \"sepsis\", \"sept\", \"septa\", \"septal\", \"septet\", \"septic\", \"septs\", \"septum\", \"sequel\", \"sequin\", \"ser\", \"sera\", \"serac\", \"seracs\", \"serai\", \"serail\", \"serais\", \"seral\", \"serape\", \"seraph\", \"serdab\", \"sere\", \"sered\", \"serein\", \"serene\", \"serer\", \"seres\", \"serest\", \"serf\", \"serfs\", \"serge\", \"serges\", \"serial\", \"series\", \"serif\", \"serifs\", \"serin\", \"serine\", \"sering\", \"serins\", \"sermon\", \"serosa\", \"serous\", \"serow\", \"serows\", \"serry\", \"sers\", \"serum\", \"serums\", \"serval\", \"serve\", \"served\", \"server\", \"serves\", \"servo\", \"servos\", \"sesame\", \"sestet\", \"set\", \"seta\", \"setae\", \"setal\", \"setoff\", \"seton\", \"setons\", \"setose\", \"setous\", \"setout\", \"sets\", \"sett\", \"settee\", \"setter\", \"settle\", \"setts\", \"setup\", \"setups\", \"seven\", \"sevens\", \"sever\", \"severe\", \"severs\", \"sew\", \"sewage\", \"sewan\", \"sewans\", \"sewar\", \"sewars\", \"sewed\", \"sewer\", \"sewers\", \"sewing\", \"sewn\", \"sews\", \"sex\", \"sexed\", \"sexes\", \"sexier\", \"sexily\", \"sexing\", \"sexism\", \"sexist\", \"sexpot\", \"sext\", \"sextan\", \"sextet\", \"sexto\", \"sexton\", \"sextos\", \"sexts\", \"sexual\", \"sexy\", \"sha\", \"shabby\", \"shack\", \"shacko\", \"shacks\", \"shad\", \"shade\", \"shaded\", \"shader\", \"shades\", \"shadow\", \"shads\", \"shaduf\", \"shady\", \"shaft\", \"shafts\", \"shag\", \"shaggy\", \"shags\", \"shah\", \"shahs\", \"shaird\", \"shairn\", \"shake\", \"shaken\", \"shaker\", \"shakes\", \"shako\", \"shakos\", \"shaky\", \"shale\", \"shaled\", \"shales\", \"shaley\", \"shall\", \"shalom\", \"shalt\", \"shaly\", \"sham\", \"shaman\", \"shamas\", \"shame\", \"shamed\", \"shames\", \"shammy\", \"shamos\", \"shamoy\", \"shams\", \"shamus\", \"shandy\", \"shank\", \"shanks\", \"shanny\", \"shanti\", \"shanty\", \"shape\", \"shaped\", \"shapen\", \"shaper\", \"shapes\", \"shard\", \"shards\", \"share\", \"shared\", \"sharer\", \"shares\", \"sharif\", \"shark\", \"sharks\", \"sharn\", \"sharns\", \"sharny\", \"sharp\", \"sharps\", \"sharpy\", \"shat\", \"shaugh\", \"shaul\", \"shauls\", \"shave\", \"shaved\", \"shaven\", \"shaver\", \"shaves\", \"shavie\", \"shaw\", \"shawed\", \"shawl\", \"shawls\", \"shawm\", \"shawms\", \"shawn\", \"shaws\", \"shay\", \"shays\", \"she\", \"shea\", \"sheaf\", \"sheafs\", \"sheal\", \"sheals\", \"shear\", \"shears\", \"sheas\", \"sheath\", \"sheave\", \"shed\", \"sheds\", \"sheen\", \"sheens\", \"sheeny\", \"sheep\", \"sheer\", \"sheers\", \"sheet\", \"sheets\", \"sheeve\", \"sheik\", \"sheikh\", \"sheiks\", \"sheila\", \"shekel\", \"shelf\", \"shell\", \"shells\", \"shelly\", \"shelta\", \"shelty\", \"shelve\", \"shelvy\", \"shend\", \"shends\", \"shent\", \"sheol\", \"sheols\", \"sheqel\", \"sherd\", \"sherds\", \"sherif\", \"sherpa\", \"sherry\", \"shes\", \"sheuch\", \"sheugh\", \"shew\", \"shewed\", \"shewer\", \"shewn\", \"shews\", \"shh\", \"shibah\", \"shied\", \"shiel\", \"shield\", \"shiels\", \"shier\", \"shiers\", \"shies\", \"shiest\", \"shift\", \"shifts\", \"shifty\", \"shikar\", \"shiksa\", \"shikse\", \"shill\", \"shills\", \"shily\", \"shim\", \"shimmy\", \"shims\", \"shin\", \"shindy\", \"shine\", \"shined\", \"shiner\", \"shines\", \"shinny\", \"shins\", \"shiny\", \"ship\", \"ships\", \"shire\", \"shires\", \"shirk\", \"shirks\", \"shirr\", \"shirrs\", \"shirt\", \"shirts\", \"shirty\", \"shist\", \"shists\", \"shiv\", \"shiva\", \"shivah\", \"shivas\", \"shive\", \"shiver\", \"shives\", \"shivs\", \"shlep\", \"shlepp\", \"shleps\", \"shlock\", \"shlump\", \"shmear\", \"shmo\", \"shmoes\", \"shmuck\", \"shnaps\", \"shnook\", \"shoal\", \"shoals\", \"shoaly\", \"shoat\", \"shoats\", \"shock\", \"shocks\", \"shod\", \"shoddy\", \"shoe\", \"shoed\", \"shoer\", \"shoers\", \"shoes\", \"shofar\", \"shog\", \"shogs\", \"shogun\", \"shoji\", \"shojis\", \"sholom\", \"shone\", \"shoo\", \"shooed\", \"shook\", \"shooks\", \"shool\", \"shools\", \"shoon\", \"shoos\", \"shoot\", \"shoots\", \"shop\", \"shoppe\", \"shops\", \"shoran\", \"shore\", \"shored\", \"shores\", \"shorl\", \"shorls\", \"shorn\", \"short\", \"shorts\", \"shorty\", \"shot\", \"shote\", \"shotes\", \"shots\", \"shott\", \"shotts\", \"should\", \"shout\", \"shouts\", \"shove\", \"shoved\", \"shovel\", \"shover\", \"shoves\", \"show\", \"showed\", \"shower\", \"shown\", \"shows\", \"showy\", \"shoyu\", \"shoyus\", \"shrank\", \"shred\", \"shreds\", \"shrew\", \"shrewd\", \"shrews\", \"shri\", \"shriek\", \"shrift\", \"shrike\", \"shrill\", \"shrimp\", \"shrine\", \"shrink\", \"shris\", \"shrive\", \"shroff\", \"shroud\", \"shrove\", \"shrub\", \"shrubs\", \"shrug\", \"shrugs\", \"shrunk\", \"shtetl\", \"shtick\", \"shtik\", \"shtiks\", \"shuck\", \"shucks\", \"shul\", \"shuln\", \"shuls\", \"shun\", \"shuns\", \"shunt\", \"shunts\", \"shush\", \"shut\", \"shute\", \"shuted\", \"shutes\", \"shuts\", \"shy\", \"shyer\", \"shyers\", \"shyest\", \"shying\", \"shyly\", \"sial\", \"sialic\", \"sialid\", \"sials\", \"sib\", \"sibb\", \"sibbs\", \"sibs\", \"sibyl\", \"sibyls\", \"sic\", \"siccan\", \"sicced\", \"sice\", \"sices\", \"sick\", \"sicked\", \"sickee\", \"sicken\", \"sicker\", \"sickie\", \"sickle\", \"sickly\", \"sicko\", \"sickos\", \"sicks\", \"sics\", \"siddur\", \"side\", \"sided\", \"sides\", \"siding\", \"sidle\", \"sidled\", \"sidler\", \"sidles\", \"siege\", \"sieged\", \"sieges\", \"sienna\", \"sierra\", \"siesta\", \"sieur\", \"sieurs\", \"sieve\", \"sieved\", \"sieves\", \"sifaka\", \"sift\", \"sifted\", \"sifter\", \"sifts\", \"sigh\", \"sighed\", \"sigher\", \"sighs\", \"sight\", \"sights\", \"sigil\", \"sigils\", \"sigloi\", \"siglos\", \"sigma\", \"sigmas\", \"sign\", \"signal\", \"signed\", \"signee\", \"signer\", \"signet\", \"signor\", \"signs\", \"sike\", \"siker\", \"sikes\", \"silage\", \"silane\", \"sild\", \"silds\", \"sileni\", \"silent\", \"silex\", \"silica\", \"silk\", \"silked\", \"silken\", \"silks\", \"silky\", \"sill\", \"siller\", \"sills\", \"silly\", \"silo\", \"siloed\", \"silos\", \"silt\", \"silted\", \"silts\", \"silty\", \"silva\", \"silvae\", \"silvan\", \"silvas\", \"silver\", \"silvex\", \"sim\", \"sima\", \"simar\", \"simars\", \"simas\", \"simian\", \"simile\", \"simlin\", \"simmer\", \"simnel\", \"simony\", \"simoom\", \"simoon\", \"simp\", \"simper\", \"simple\", \"simply\", \"simps\", \"sims\", \"sin\", \"since\", \"sine\", \"sines\", \"sinew\", \"sinews\", \"sinewy\", \"sinful\", \"sing\", \"singe\", \"singed\", \"singer\", \"singes\", \"single\", \"singly\", \"sings\", \"sinh\", \"sinhs\", \"sink\", \"sinker\", \"sinks\", \"sinned\", \"sinner\", \"sins\", \"sinter\", \"sinus\", \"sip\", \"sipe\", \"siped\", \"sipes\", \"siphon\", \"siping\", \"sipped\", \"sipper\", \"sippet\", \"sips\", \"sir\", \"sirdar\", \"sire\", \"sired\", \"siree\", \"sirees\", \"siren\", \"sirens\", \"sires\", \"siring\", \"sirra\", \"sirrah\", \"sirras\", \"sirree\", \"sirs\", \"sirup\", \"sirups\", \"sirupy\", \"sis\", \"sisal\", \"sisals\", \"sises\", \"siskin\", \"sissy\", \"sister\", \"sistra\", \"sit\", \"sitar\", \"sitars\", \"sitcom\", \"site\", \"sited\", \"sites\", \"sith\", \"siting\", \"sits\", \"sitten\", \"sitter\", \"situp\", \"situps\", \"situs\", \"siver\", \"sivers\", \"six\", \"sixes\", \"sixmo\", \"sixmos\", \"sixte\", \"sixtes\", \"sixth\", \"sixths\", \"sixty\", \"sizar\", \"sizars\", \"size\", \"sized\", \"sizer\", \"sizers\", \"sizes\", \"sizier\", \"sizing\", \"sizy\", \"sizzle\", \"ska\", \"skag\", \"skags\", \"skald\", \"skalds\", \"skas\", \"skat\", \"skate\", \"skated\", \"skater\", \"skates\", \"skatol\", \"skats\", \"skean\", \"skeane\", \"skeans\", \"skee\", \"skeed\", \"skeen\", \"skeens\", \"skees\", \"skeet\", \"skeets\", \"skeg\", \"skegs\", \"skeigh\", \"skein\", \"skeins\", \"skelm\", \"skelms\", \"skelp\", \"skelps\", \"skene\", \"skenes\", \"skep\", \"skeps\", \"skerry\", \"sketch\", \"skew\", \"skewed\", \"skewer\", \"skews\", \"ski\", \"skibob\", \"skid\", \"skiddy\", \"skidoo\", \"skids\", \"skied\", \"skier\", \"skiers\", \"skies\", \"skiey\", \"skiff\", \"skiffs\", \"skiing\", \"skill\", \"skills\", \"skim\", \"skimo\", \"skimos\", \"skimp\", \"skimps\", \"skimpy\", \"skims\", \"skin\", \"skink\", \"skinks\", \"skinny\", \"skins\", \"skint\", \"skip\", \"skips\", \"skirl\", \"skirls\", \"skirr\", \"skirrs\", \"skirt\", \"skirts\", \"skis\", \"skit\", \"skite\", \"skited\", \"skites\", \"skits\", \"skive\", \"skived\", \"skiver\", \"skives\", \"skivvy\", \"sklent\", \"skoal\", \"skoals\", \"skosh\", \"skua\", \"skuas\", \"skulk\", \"skulks\", \"skull\", \"skulls\", \"skunk\", \"skunks\", \"sky\", \"skybox\", \"skycap\", \"skyed\", \"skyey\", \"skying\", \"skylit\", \"skyman\", \"skymen\", \"skyway\", \"slab\", \"slabs\", \"slack\", \"slacks\", \"slag\", \"slaggy\", \"slags\", \"slain\", \"slake\", \"slaked\", \"slaker\", \"slakes\", \"slalom\", \"slam\", \"slams\", \"slang\", \"slangs\", \"slangy\", \"slank\", \"slant\", \"slants\", \"slanty\", \"slap\", \"slaps\", \"slash\", \"slat\", \"slatch\", \"slate\", \"slated\", \"slater\", \"slates\", \"slatey\", \"slats\", \"slaty\", \"slave\", \"slaved\", \"slaver\", \"slaves\", \"slavey\", \"slaw\", \"slaws\", \"slay\", \"slayed\", \"slayer\", \"slays\", \"sleave\", \"sleaze\", \"sleazo\", \"sleazy\", \"sled\", \"sledge\", \"sleds\", \"sleek\", \"sleeks\", \"sleeky\", \"sleep\", \"sleeps\", \"sleepy\", \"sleet\", \"sleets\", \"sleety\", \"sleeve\", \"sleigh\", \"slept\", \"sleuth\", \"slew\", \"slewed\", \"slews\", \"slice\", \"sliced\", \"slicer\", \"slices\", \"slick\", \"slicks\", \"slid\", \"slide\", \"slider\", \"slides\", \"slier\", \"sliest\", \"slight\", \"slily\", \"slim\", \"slime\", \"slimed\", \"slimes\", \"slimly\", \"slims\", \"slimsy\", \"slimy\", \"sling\", \"slings\", \"slink\", \"slinks\", \"slinky\", \"slip\", \"slipe\", \"sliped\", \"slipes\", \"slippy\", \"slips\", \"slipt\", \"slipup\", \"slit\", \"slits\", \"sliver\", \"slob\", \"slobby\", \"slobs\", \"sloe\", \"sloes\", \"slog\", \"slogan\", \"slogs\", \"sloid\", \"sloids\", \"slojd\", \"slojds\", \"sloop\", \"sloops\", \"slop\", \"slope\", \"sloped\", \"sloper\", \"slopes\", \"sloppy\", \"slops\", \"slosh\", \"sloshy\", \"slot\", \"sloth\", \"sloths\", \"slots\", \"slouch\", \"slough\", \"sloven\", \"slow\", \"slowed\", \"slower\", \"slowly\", \"slows\", \"sloyd\", \"sloyds\", \"slub\", \"slubs\", \"sludge\", \"sludgy\", \"slue\", \"slued\", \"slues\", \"sluff\", \"sluffs\", \"slug\", \"slugs\", \"sluice\", \"sluicy\", \"sluing\", \"slum\", \"slummy\", \"slump\", \"slumps\", \"slums\", \"slung\", \"slunk\", \"slur\", \"slurb\", \"slurbs\", \"slurp\", \"slurps\", \"slurry\", \"slurs\", \"slush\", \"slushy\", \"sly\", \"slyer\", \"slyest\", \"slyly\", \"slype\", \"slypes\", \"smack\", \"smacks\", \"small\", \"smalls\", \"smalt\", \"smalti\", \"smalto\", \"smalts\", \"smarm\", \"smarms\", \"smarmy\", \"smart\", \"smarts\", \"smarty\", \"smash\", \"smaze\", \"smazes\", \"smear\", \"smears\", \"smeary\", \"smeek\", \"smeeks\", \"smegma\", \"smell\", \"smells\", \"smelly\", \"smelt\", \"smelts\", \"smerk\", \"smerks\", \"smew\", \"smews\", \"smidge\", \"smilax\", \"smile\", \"smiled\", \"smiler\", \"smiles\", \"smiley\", \"smirch\", \"smirk\", \"smirks\", \"smirky\", \"smit\", \"smite\", \"smiter\", \"smites\", \"smith\", \"smiths\", \"smithy\", \"smock\", \"smocks\", \"smog\", \"smoggy\", \"smogs\", \"smoke\", \"smoked\", \"smoker\", \"smokes\", \"smokey\", \"smoky\", \"smolt\", \"smolts\", \"smooch\", \"smooth\", \"smote\", \"smudge\", \"smudgy\", \"smug\", \"smugly\", \"smut\", \"smutch\", \"smuts\", \"smutty\", \"snack\", \"snacks\", \"snafu\", \"snafus\", \"snag\", \"snaggy\", \"snags\", \"snail\", \"snails\", \"snake\", \"snaked\", \"snakes\", \"snakey\", \"snaky\", \"snap\", \"snappy\", \"snaps\", \"snare\", \"snared\", \"snarer\", \"snares\", \"snark\", \"snarks\", \"snarky\", \"snarl\", \"snarls\", \"snarly\", \"snash\", \"snatch\", \"snath\", \"snathe\", \"snaths\", \"snaw\", \"snawed\", \"snaws\", \"snazzy\", \"sneak\", \"sneaks\", \"sneaky\", \"sneap\", \"sneaps\", \"sneck\", \"snecks\", \"sned\", \"sneds\", \"sneer\", \"sneers\", \"sneesh\", \"sneeze\", \"sneezy\", \"snell\", \"snells\", \"snib\", \"snibs\", \"snick\", \"snicks\", \"snide\", \"snider\", \"sniff\", \"sniffs\", \"sniffy\", \"snip\", \"snipe\", \"sniped\", \"sniper\", \"snipes\", \"snippy\", \"snips\", \"snit\", \"snitch\", \"snits\", \"snivel\", \"snob\", \"snobby\", \"snobs\", \"snog\", \"snogs\", \"snood\", \"snoods\", \"snook\", \"snooks\", \"snool\", \"snools\", \"snoop\", \"snoops\", \"snoopy\", \"snoot\", \"snoots\", \"snooty\", \"snooze\", \"snoozy\", \"snore\", \"snored\", \"snorer\", \"snores\", \"snort\", \"snorts\", \"snot\", \"snots\", \"snotty\", \"snout\", \"snouts\", \"snouty\", \"snow\", \"snowed\", \"snows\", \"snowy\", \"snub\", \"snubby\", \"snubs\", \"snuck\", \"snuff\", \"snuffs\", \"snuffy\", \"snug\", \"snugly\", \"snugs\", \"snye\", \"snyes\", \"soak\", \"soaked\", \"soaker\", \"soaks\", \"soap\", \"soaped\", \"soaper\", \"soaps\", \"soapy\", \"soar\", \"soared\", \"soarer\", \"soars\", \"soave\", \"soaves\", \"sob\", \"sobbed\", \"sobber\", \"sobeit\", \"sober\", \"sobers\", \"sobful\", \"sobs\", \"socage\", \"soccer\", \"social\", \"sock\", \"socked\", \"socket\", \"socko\", \"socks\", \"socle\", \"socles\", \"socman\", \"socmen\", \"sod\", \"soda\", \"sodas\", \"sodded\", \"sodden\", \"soddy\", \"sodic\", \"sodium\", \"sodom\", \"sodoms\", \"sodomy\", \"sods\", \"soever\", \"sofa\", \"sofar\", \"sofars\", \"sofas\", \"soffit\", \"soft\", \"softa\", \"softas\", \"soften\", \"softer\", \"softie\", \"softly\", \"softs\", \"softy\", \"sogged\", \"soggy\", \"soigne\", \"soil\", \"soiled\", \"soils\", \"soiree\", \"soja\", \"sojas\", \"soke\", \"sokes\", \"sokol\", \"sokols\", \"sol\", \"sola\", \"solace\", \"solan\", \"soland\", \"solano\", \"solans\", \"solar\", \"solate\", \"sold\", \"soldan\", \"solder\", \"soldi\", \"soldo\", \"sole\", \"soled\", \"solei\", \"solely\", \"solemn\", \"soles\", \"soleus\", \"solgel\", \"soli\", \"solid\", \"solidi\", \"solids\", \"soling\", \"solion\", \"solo\", \"soloed\", \"solon\", \"solons\", \"solos\", \"sols\", \"solum\", \"solums\", \"solus\", \"solute\", \"solve\", \"solved\", \"solver\", \"solves\", \"soma\", \"somas\", \"somata\", \"somber\", \"sombre\", \"some\", \"somite\", \"son\", \"sonant\", \"sonar\", \"sonars\", \"sonata\", \"sonde\", \"sonder\", \"sondes\", \"sone\", \"sones\", \"song\", \"songs\", \"sonic\", \"sonics\", \"sonly\", \"sonnet\", \"sonny\", \"sons\", \"sonsie\", \"sonsy\", \"sooey\", \"sook\", \"sooks\", \"soon\", \"sooner\", \"soot\", \"sooted\", \"sooth\", \"soothe\", \"sooths\", \"soots\", \"sooty\", \"sop\", \"soph\", \"sophs\", \"sophy\", \"sopite\", \"sopor\", \"sopors\", \"sopped\", \"soppy\", \"sops\", \"sora\", \"soras\", \"sorb\", \"sorbed\", \"sorbet\", \"sorbic\", \"sorbs\", \"sord\", \"sordid\", \"sordor\", \"sords\", \"sore\", \"sorel\", \"sorels\", \"sorely\", \"sorer\", \"sores\", \"sorest\", \"sorgho\", \"sorgo\", \"sorgos\", \"sori\", \"soring\", \"sorn\", \"sorned\", \"sorner\", \"sorns\", \"sorrel\", \"sorrow\", \"sorry\", \"sort\", \"sorted\", \"sorter\", \"sortie\", \"sorts\", \"sorus\", \"sos\", \"sot\", \"soth\", \"soths\", \"sotol\", \"sotols\", \"sots\", \"sotted\", \"sou\", \"souari\", \"soucar\", \"soudan\", \"sough\", \"soughs\", \"sought\", \"souk\", \"souks\", \"soul\", \"souled\", \"souls\", \"sound\", \"sounds\", \"soup\", \"souped\", \"soups\", \"soupy\", \"sour\", \"source\", \"soured\", \"sourer\", \"sourly\", \"sours\", \"sous\", \"souse\", \"soused\", \"souses\", \"souter\", \"south\", \"souths\", \"soviet\", \"sovran\", \"sow\", \"sowans\", \"sowar\", \"sowars\", \"sowcar\", \"sowed\", \"sowens\", \"sower\", \"sowers\", \"sowing\", \"sown\", \"sows\", \"sox\", \"soy\", \"soya\", \"soyas\", \"soys\", \"soyuz\", \"sozin\", \"sozine\", \"sozins\", \"spa\", \"space\", \"spaced\", \"spacer\", \"spaces\", \"spacey\", \"spacy\", \"spade\", \"spaded\", \"spader\", \"spades\", \"spadix\", \"spado\", \"spae\", \"spaed\", \"spaes\", \"spahee\", \"spahi\", \"spahis\", \"spail\", \"spails\", \"spait\", \"spaits\", \"spake\", \"spale\", \"spales\", \"spall\", \"spalls\", \"span\", \"spang\", \"spank\", \"spanks\", \"spans\", \"spar\", \"spare\", \"spared\", \"sparer\", \"spares\", \"sparge\", \"sparid\", \"spark\", \"sparks\", \"sparky\", \"sparry\", \"spars\", \"sparse\", \"spas\", \"spasm\", \"spasms\", \"spat\", \"spate\", \"spates\", \"spathe\", \"spats\", \"spavie\", \"spavin\", \"spawn\", \"spawns\", \"spay\", \"spayed\", \"spays\", \"spaz\", \"speak\", \"speaks\", \"spean\", \"speans\", \"spear\", \"spears\", \"spec\", \"specie\", \"speck\", \"specks\", \"specs\", \"sped\", \"speech\", \"speed\", \"speedo\", \"speeds\", \"speedy\", \"speel\", \"speels\", \"speer\", \"speers\", \"speil\", \"speils\", \"speir\", \"speirs\", \"speise\", \"speiss\", \"spell\", \"spells\", \"spelt\", \"spelts\", \"speltz\", \"spence\", \"spend\", \"spends\", \"spense\", \"spent\", \"sperm\", \"sperms\", \"spew\", \"spewed\", \"spewer\", \"spews\", \"sphene\", \"sphere\", \"sphery\", \"sphinx\", \"spic\", \"spica\", \"spicae\", \"spicas\", \"spice\", \"spiced\", \"spicer\", \"spices\", \"spicey\", \"spick\", \"spicks\", \"spics\", \"spicy\", \"spider\", \"spied\", \"spiel\", \"spiels\", \"spier\", \"spiers\", \"spies\", \"spiff\", \"spiffs\", \"spiffy\", \"spigot\", \"spik\", \"spike\", \"spiked\", \"spiker\", \"spikes\", \"spikey\", \"spiks\", \"spiky\", \"spile\", \"spiled\", \"spiles\", \"spill\", \"spills\", \"spilt\", \"spilth\", \"spin\", \"spinal\", \"spine\", \"spined\", \"spinel\", \"spines\", \"spinet\", \"spinny\", \"spinor\", \"spins\", \"spinto\", \"spiny\", \"spiral\", \"spire\", \"spirea\", \"spired\", \"spirem\", \"spires\", \"spirit\", \"spirt\", \"spirts\", \"spiry\", \"spit\", \"spital\", \"spite\", \"spited\", \"spites\", \"spits\", \"spitz\", \"spiv\", \"spivs\", \"splake\", \"splash\", \"splat\", \"splats\", \"splay\", \"splays\", \"spleen\", \"splent\", \"splice\", \"spliff\", \"spline\", \"splint\", \"split\", \"splits\", \"splore\", \"splosh\", \"spode\", \"spodes\", \"spoil\", \"spoils\", \"spoilt\", \"spoke\", \"spoked\", \"spoken\", \"spokes\", \"sponge\", \"spongy\", \"spoof\", \"spoofs\", \"spoofy\", \"spook\", \"spooks\", \"spooky\", \"spool\", \"spools\", \"spoon\", \"spoons\", \"spoony\", \"spoor\", \"spoors\", \"sporal\", \"spore\", \"spored\", \"spores\", \"sport\", \"sports\", \"sporty\", \"spot\", \"spots\", \"spotty\", \"spouse\", \"spout\", \"spouts\", \"sprag\", \"sprags\", \"sprain\", \"sprang\", \"sprat\", \"sprats\", \"sprawl\", \"spray\", \"sprays\", \"spread\", \"spree\", \"sprees\", \"sprent\", \"sprier\", \"sprig\", \"sprigs\", \"spring\", \"sprint\", \"sprit\", \"sprite\", \"sprits\", \"spritz\", \"sprout\", \"spruce\", \"sprucy\", \"sprue\", \"sprues\", \"sprug\", \"sprugs\", \"sprung\", \"spry\", \"spryer\", \"spryly\", \"spud\", \"spuds\", \"spue\", \"spued\", \"spues\", \"spuing\", \"spume\", \"spumed\", \"spumes\", \"spumy\", \"spun\", \"spunk\", \"spunks\", \"spunky\", \"spur\", \"spurge\", \"spurn\", \"spurns\", \"spurry\", \"spurs\", \"spurt\", \"spurts\", \"sputa\", \"sputum\", \"spy\", \"spying\", \"squab\", \"squabs\", \"squad\", \"squads\", \"squall\", \"squama\", \"square\", \"squash\", \"squat\", \"squats\", \"squaw\", \"squawk\", \"squaws\", \"squeak\", \"squeal\", \"squeg\", \"squegs\", \"squib\", \"squibs\", \"squid\", \"squids\", \"squill\", \"squint\", \"squire\", \"squirm\", \"squirt\", \"squish\", \"squush\", \"sradha\", \"sri\", \"sris\", \"stab\", \"stable\", \"stably\", \"stabs\", \"stack\", \"stacks\", \"stacte\", \"stade\", \"stades\", \"stadia\", \"staff\", \"staffs\", \"stag\", \"stage\", \"staged\", \"stager\", \"stages\", \"stagey\", \"staggy\", \"stags\", \"stagy\", \"staid\", \"staig\", \"staigs\", \"stain\", \"stains\", \"stair\", \"stairs\", \"stake\", \"staked\", \"stakes\", \"stalag\", \"stale\", \"staled\", \"staler\", \"stales\", \"stalk\", \"stalks\", \"stalky\", \"stall\", \"stalls\", \"stamen\", \"stamp\", \"stamps\", \"stance\", \"stanch\", \"stand\", \"stands\", \"stane\", \"staned\", \"stanes\", \"stang\", \"stangs\", \"stank\", \"stanks\", \"stanza\", \"stapes\", \"staph\", \"staphs\", \"staple\", \"star\", \"starch\", \"stare\", \"stared\", \"starer\", \"stares\", \"stark\", \"starry\", \"stars\", \"start\", \"starts\", \"starve\", \"stases\", \"stash\", \"stasis\", \"stat\", \"statal\", \"state\", \"stated\", \"stater\", \"states\", \"static\", \"stator\", \"stats\", \"statue\", \"status\", \"stave\", \"staved\", \"staves\", \"staw\", \"stay\", \"stayed\", \"stayer\", \"stays\", \"stead\", \"steads\", \"steady\", \"steak\", \"steaks\", \"steal\", \"steals\", \"steam\", \"steams\", \"steamy\", \"steed\", \"steeds\", \"steek\", \"steeks\", \"steel\", \"steels\", \"steely\", \"steep\", \"steeps\", \"steer\", \"steers\", \"steeve\", \"stein\", \"steins\", \"stela\", \"stelae\", \"stelai\", \"stelar\", \"stele\", \"steles\", \"stelic\", \"stella\", \"stem\", \"stemma\", \"stemmy\", \"stems\", \"stench\", \"steno\", \"stenos\", \"step\", \"steppe\", \"steps\", \"stere\", \"stereo\", \"steres\", \"steric\", \"stern\", \"sterna\", \"sterns\", \"sterol\", \"stet\", \"stets\", \"stew\", \"stewed\", \"stews\", \"stey\", \"stich\", \"stichs\", \"stick\", \"sticks\", \"sticky\", \"stied\", \"sties\", \"stiff\", \"stiffs\", \"stifle\", \"stigma\", \"stile\", \"stiles\", \"still\", \"stills\", \"stilly\", \"stilt\", \"stilts\", \"stime\", \"stimes\", \"stimy\", \"sting\", \"stingo\", \"stings\", \"stingy\", \"stink\", \"stinko\", \"stinks\", \"stinky\", \"stint\", \"stints\", \"stipe\", \"stiped\", \"stipel\", \"stipes\", \"stir\", \"stirk\", \"stirks\", \"stirp\", \"stirps\", \"stirs\", \"stitch\", \"stithy\", \"stiver\", \"stoa\", \"stoae\", \"stoai\", \"stoas\", \"stoat\", \"stoats\", \"stob\", \"stobs\", \"stock\", \"stocks\", \"stocky\", \"stodge\", \"stodgy\", \"stogey\", \"stogie\", \"stogy\", \"stoic\", \"stoics\", \"stoke\", \"stoked\", \"stoker\", \"stokes\", \"stole\", \"stoled\", \"stolen\", \"stoles\", \"stolid\", \"stolon\", \"stoma\", \"stomal\", \"stomas\", \"stomp\", \"stomps\", \"stone\", \"stoned\", \"stoner\", \"stones\", \"stoney\", \"stony\", \"stood\", \"stooge\", \"stook\", \"stooks\", \"stool\", \"stools\", \"stoop\", \"stoops\", \"stop\", \"stope\", \"stoped\", \"stoper\", \"stopes\", \"stops\", \"stopt\", \"storax\", \"store\", \"stored\", \"stores\", \"storey\", \"stork\", \"storks\", \"storm\", \"storms\", \"stormy\", \"story\", \"stoss\", \"stound\", \"stoup\", \"stoups\", \"stour\", \"stoure\", \"stours\", \"stoury\", \"stout\", \"stouts\", \"stove\", \"stover\", \"stoves\", \"stow\", \"stowed\", \"stowp\", \"stowps\", \"stows\", \"strafe\", \"strain\", \"strait\", \"strake\", \"strand\", \"strang\", \"strap\", \"straps\", \"strass\", \"strata\", \"strath\", \"strati\", \"straw\", \"straws\", \"strawy\", \"stray\", \"strays\", \"streak\", \"stream\", \"streek\", \"streel\", \"street\", \"strep\", \"streps\", \"stress\", \"strew\", \"strewn\", \"strews\", \"stria\", \"striae\", \"strick\", \"strict\", \"stride\", \"strife\", \"strike\", \"string\", \"strip\", \"stripe\", \"strips\", \"stript\", \"stripy\", \"strive\", \"strobe\", \"strode\", \"stroke\", \"stroll\", \"stroma\", \"strong\", \"strook\", \"strop\", \"strops\", \"stroud\", \"strove\", \"strow\", \"strown\", \"strows\", \"stroy\", \"stroys\", \"struck\", \"strum\", \"struma\", \"strums\", \"strung\", \"strunt\", \"strut\", \"struts\", \"stub\", \"stubby\", \"stubs\", \"stucco\", \"stuck\", \"stud\", \"studio\", \"studly\", \"studs\", \"study\", \"stuff\", \"stuffs\", \"stuffy\", \"stull\", \"stulls\", \"stum\", \"stump\", \"stumps\", \"stumpy\", \"stums\", \"stun\", \"stung\", \"stunk\", \"stuns\", \"stunt\", \"stunts\", \"stupa\", \"stupas\", \"stupe\", \"stupes\", \"stupid\", \"stupor\", \"sturdy\", \"sturt\", \"sturts\", \"sty\", \"stye\", \"styed\", \"styes\", \"stying\", \"stylar\", \"style\", \"styled\", \"styler\", \"styles\", \"stylet\", \"styli\", \"stylus\", \"stymie\", \"stymy\", \"styrax\", \"suable\", \"suably\", \"suave\", \"suaver\", \"sub\", \"suba\", \"subah\", \"subahs\", \"subas\", \"subbed\", \"subdeb\", \"subdue\", \"suber\", \"subers\", \"subfix\", \"subgum\", \"subito\", \"sublet\", \"sublot\", \"submit\", \"subnet\", \"suborn\", \"subpar\", \"subs\", \"subsea\", \"subset\", \"subtle\", \"subtly\", \"suburb\", \"subway\", \"succah\", \"succor\", \"such\", \"suck\", \"sucked\", \"sucker\", \"suckle\", \"sucks\", \"sucre\", \"sucres\", \"sudary\", \"sudd\", \"sudden\", \"sudds\", \"sudor\", \"sudors\", \"suds\", \"sudsed\", \"sudser\", \"sudses\", \"sudsy\", \"sue\", \"sued\", \"suede\", \"sueded\", \"suedes\", \"suer\", \"suers\", \"sues\", \"suet\", \"suets\", \"suety\", \"suffer\", \"suffix\", \"sugar\", \"sugars\", \"sugary\", \"sugh\", \"sughed\", \"sughs\", \"suing\", \"suint\", \"suints\", \"suit\", \"suite\", \"suited\", \"suiter\", \"suites\", \"suitor\", \"suits\", \"sukkah\", \"sukkot\", \"sulcal\", \"sulci\", \"sulcus\", \"suldan\", \"sulfa\", \"sulfas\", \"sulfid\", \"sulfo\", \"sulfur\", \"sulk\", \"sulked\", \"sulker\", \"sulks\", \"sulky\", \"sullen\", \"sully\", \"sulpha\", \"sultan\", \"sultry\", \"sulu\", \"sulus\", \"sum\", \"sumac\", \"sumach\", \"sumacs\", \"summa\", \"summae\", \"summas\", \"summed\", \"summer\", \"summit\", \"summon\", \"sumo\", \"sumos\", \"sump\", \"sumps\", \"sums\", \"sun\", \"sunbow\", \"sundae\", \"sunder\", \"sundew\", \"sundog\", \"sundry\", \"sung\", \"sunk\", \"sunken\", \"sunket\", \"sunlit\", \"sunn\", \"sunna\", \"sunnah\", \"sunnas\", \"sunned\", \"sunns\", \"sunny\", \"suns\", \"sunset\", \"suntan\", \"sunup\", \"sunups\", \"sup\", \"supe\", \"super\", \"superb\", \"supers\", \"supes\", \"supine\", \"supped\", \"supper\", \"supple\", \"supply\", \"supra\", \"sups\", \"suq\", \"suqs\", \"sura\", \"surah\", \"surahs\", \"sural\", \"suras\", \"surd\", \"surds\", \"sure\", \"surely\", \"surer\", \"surest\", \"surety\", \"surf\", \"surfed\", \"surfer\", \"surfs\", \"surfy\", \"surge\", \"surged\", \"surger\", \"surges\", \"surgy\", \"surimi\", \"surly\", \"surra\", \"surras\", \"surrey\", \"surtax\", \"survey\", \"sushi\", \"sushis\", \"suslik\", \"suss\", \"sussed\", \"susses\", \"sutler\", \"sutra\", \"sutras\", \"sutta\", \"suttas\", \"suttee\", \"suture\", \"svaraj\", \"svelte\", \"swab\", \"swabby\", \"swabs\", \"swag\", \"swage\", \"swaged\", \"swager\", \"swages\", \"swags\", \"swail\", \"swails\", \"swain\", \"swains\", \"swale\", \"swales\", \"swam\", \"swami\", \"swamis\", \"swamp\", \"swamps\", \"swampy\", \"swamy\", \"swan\", \"swang\", \"swank\", \"swanks\", \"swanky\", \"swans\", \"swap\", \"swaps\", \"swaraj\", \"sward\", \"swards\", \"sware\", \"swarf\", \"swarfs\", \"swarm\", \"swarms\", \"swart\", \"swarth\", \"swarty\", \"swash\", \"swat\", \"swatch\", \"swath\", \"swathe\", \"swaths\", \"swats\", \"sway\", \"swayed\", \"swayer\", \"sways\", \"swear\", \"swears\", \"sweat\", \"sweats\", \"sweaty\", \"swede\", \"swedes\", \"sweeny\", \"sweep\", \"sweeps\", \"sweepy\", \"sweer\", \"sweet\", \"sweets\", \"swell\", \"swells\", \"swept\", \"swerve\", \"sweven\", \"swift\", \"swifts\", \"swig\", \"swigs\", \"swill\", \"swills\", \"swim\", \"swimmy\", \"swims\", \"swine\", \"swing\", \"swinge\", \"swings\", \"swingy\", \"swink\", \"swinks\", \"swipe\", \"swiped\", \"swipes\", \"swiple\", \"swirl\", \"swirls\", \"swirly\", \"swish\", \"swishy\", \"swiss\", \"switch\", \"swith\", \"swithe\", \"swive\", \"swived\", \"swivel\", \"swives\", \"swivet\", \"swob\", \"swobs\", \"swoon\", \"swoons\", \"swoop\", \"swoops\", \"swoosh\", \"swop\", \"swops\", \"sword\", \"swords\", \"swore\", \"sworn\", \"swot\", \"swots\", \"swoun\", \"swound\", \"swouns\", \"swum\", \"swung\", \"sybo\", \"syboes\", \"syce\", \"sycee\", \"sycees\", \"syces\", \"syke\", \"sykes\", \"syli\", \"sylis\", \"sylph\", \"sylphs\", \"sylphy\", \"sylva\", \"sylvae\", \"sylvan\", \"sylvas\", \"sylvin\", \"symbol\", \"syn\", \"sync\", \"synced\", \"synch\", \"synchs\", \"syncom\", \"syncs\", \"syndet\", \"syndic\", \"syne\", \"syngas\", \"synod\", \"synods\", \"syntax\", \"synth\", \"synths\", \"synura\", \"syph\", \"sypher\", \"syphon\", \"syphs\", \"syren\", \"syrens\", \"syrinx\", \"syrup\", \"syrups\", \"syrupy\", \"sysop\", \"sysops\", \"system\", \"syzygy\", \"tab\", \"tabard\", \"tabbed\", \"tabbis\", \"tabby\", \"taber\", \"tabers\", \"tabes\", \"tabid\", \"tabla\", \"tablas\", \"table\", \"tabled\", \"tables\", \"tablet\", \"taboo\", \"taboos\", \"tabor\", \"tabors\", \"tabour\", \"tabs\", \"tabu\", \"tabued\", \"tabuli\", \"tabun\", \"tabuns\", \"tabus\", \"tace\", \"taces\", \"tacet\", \"tach\", \"tache\", \"taches\", \"tachs\", \"tacit\", \"tack\", \"tacked\", \"tacker\", \"tacket\", \"tackey\", \"tackle\", \"tacks\", \"tacky\", \"taco\", \"tacos\", \"tact\", \"tactic\", \"tacts\", \"tad\", \"tads\", \"tae\", \"tael\", \"taels\", \"taenia\", \"taffia\", \"taffy\", \"tafia\", \"tafias\", \"tag\", \"tagged\", \"tagger\", \"tagrag\", \"tags\", \"tahini\", \"tahr\", \"tahrs\", \"tahsil\", \"taiga\", \"taigas\", \"tail\", \"tailed\", \"tailer\", \"taille\", \"tailor\", \"tails\", \"tain\", \"tains\", \"taint\", \"taints\", \"taipan\", \"taj\", \"tajes\", \"taka\", \"takahe\", \"take\", \"taken\", \"taker\", \"takers\", \"takes\", \"takeup\", \"takin\", \"taking\", \"takins\", \"tala\", \"talar\", \"talars\", \"talas\", \"talc\", \"talced\", \"talcky\", \"talcs\", \"talcum\", \"tale\", \"talent\", \"taler\", \"talers\", \"tales\", \"tali\", \"talion\", \"talk\", \"talked\", \"talker\", \"talkie\", \"talks\", \"talky\", \"tall\", \"taller\", \"tallis\", \"tallit\", \"tallol\", \"tallow\", \"tally\", \"talon\", \"talons\", \"taluk\", \"taluka\", \"taluks\", \"talus\", \"tam\", \"tamal\", \"tamale\", \"tamals\", \"tamari\", \"tambac\", \"tambak\", \"tambur\", \"tame\", \"tamed\", \"tamein\", \"tamely\", \"tamer\", \"tamers\", \"tames\", \"tamest\", \"taming\", \"tamis\", \"tammie\", \"tammy\", \"tamp\", \"tampan\", \"tamped\", \"tamper\", \"tampon\", \"tamps\", \"tams\", \"tan\", \"tandem\", \"tang\", \"tanged\", \"tangle\", \"tangly\", \"tango\", \"tangos\", \"tangs\", \"tangy\", \"tanist\", \"tank\", \"tanka\", \"tankas\", \"tanked\", \"tanker\", \"tanks\", \"tanned\", \"tanner\", \"tannic\", \"tannin\", \"tanrec\", \"tans\", \"tansy\", \"tanto\", \"tantra\", \"tanuki\", \"tao\", \"taos\", \"tap\", \"tapa\", \"tapalo\", \"tapas\", \"tape\", \"taped\", \"taper\", \"tapers\", \"tapes\", \"tapeta\", \"taping\", \"tapir\", \"tapirs\", \"tapis\", \"tapped\", \"tapper\", \"tappet\", \"taps\", \"tar\", \"tarama\", \"tardo\", \"tardy\", \"tare\", \"tared\", \"tares\", \"targe\", \"targes\", \"target\", \"tariff\", \"taring\", \"tarmac\", \"tarn\", \"tarnal\", \"tarns\", \"taro\", \"taroc\", \"tarocs\", \"tarok\", \"taroks\", \"taros\", \"tarot\", \"tarots\", \"tarp\", \"tarpan\", \"tarpon\", \"tarps\", \"tarre\", \"tarred\", \"tarres\", \"tarry\", \"tars\", \"tarsal\", \"tarsi\", \"tarsia\", \"tarsus\", \"tart\", \"tartan\", \"tartar\", \"tarted\", \"tarter\", \"tartly\", \"tarts\", \"tarty\", \"tarzan\", \"tas\", \"task\", \"tasked\", \"tasks\", \"tass\", \"tasse\", \"tassel\", \"tasses\", \"tasset\", \"tassie\", \"taste\", \"tasted\", \"taster\", \"tastes\", \"tasty\", \"tat\", \"tatami\", \"tatar\", \"tatars\", \"tate\", \"tater\", \"taters\", \"tates\", \"tats\", \"tatted\", \"tatter\", \"tattie\", \"tattle\", \"tattoo\", \"tatty\", \"tau\", \"taught\", \"taunt\", \"taunts\", \"taupe\", \"taupes\", \"taus\", \"taut\", \"tauted\", \"tauten\", \"tauter\", \"tautly\", \"tautog\", \"tauts\", \"tav\", \"tavern\", \"tavs\", \"taw\", \"tawdry\", \"tawed\", \"tawer\", \"tawers\", \"tawie\", \"tawing\", \"tawney\", \"tawny\", \"tawpie\", \"taws\", \"tawse\", \"tawsed\", \"tawses\", \"tax\", \"taxa\", \"taxed\", \"taxeme\", \"taxer\", \"taxers\", \"taxes\", \"taxi\", \"taxied\", \"taxies\", \"taxing\", \"taxis\", \"taxite\", \"taxman\", \"taxmen\", \"taxon\", \"taxons\", \"taxus\", \"tazza\", \"tazzas\", \"tazze\", \"tea\", \"teabox\", \"teach\", \"teacup\", \"teak\", \"teaks\", \"teal\", \"teals\", \"team\", \"teamed\", \"teams\", \"teapot\", \"teapoy\", \"tear\", \"teared\", \"tearer\", \"tears\", \"teary\", \"teas\", \"tease\", \"teased\", \"teasel\", \"teaser\", \"teases\", \"teat\", \"teated\", \"teats\", \"teazel\", \"teazle\", \"teched\", \"techie\", \"techy\", \"tecta\", \"tectal\", \"tectum\", \"ted\", \"tedded\", \"tedder\", \"teddy\", \"tedium\", \"teds\", \"tee\", \"teed\", \"teeing\", \"teel\", \"teels\", \"teem\", \"teemed\", \"teemer\", \"teems\", \"teen\", \"teener\", \"teens\", \"teensy\", \"teeny\", \"teepee\", \"tees\", \"teeter\", \"teeth\", \"teethe\", \"teff\", \"teffs\", \"teg\", \"tegmen\", \"tegs\", \"tegua\", \"teguas\", \"teiid\", \"teiids\", \"teind\", \"teinds\", \"tel\", \"tela\", \"telae\", \"tele\", \"teledu\", \"telega\", \"teles\", \"telex\", \"telfer\", \"telia\", \"telial\", \"telic\", \"telium\", \"tell\", \"teller\", \"tells\", \"telly\", \"tellys\", \"teloi\", \"telome\", \"telos\", \"tels\", \"telson\", \"temp\", \"temped\", \"tempeh\", \"temper\", \"tempi\", \"temple\", \"tempo\", \"tempos\", \"temps\", \"tempt\", \"tempts\", \"ten\", \"tenace\", \"tenail\", \"tenant\", \"tench\", \"tend\", \"tended\", \"tender\", \"tendon\", \"tends\", \"tenet\", \"tenets\", \"tenia\", \"teniae\", \"tenias\", \"tenner\", \"tennis\", \"tenon\", \"tenons\", \"tenor\", \"tenors\", \"tenour\", \"tenpin\", \"tenrec\", \"tens\", \"tense\", \"tensed\", \"tenser\", \"tenses\", \"tensor\", \"tent\", \"tented\", \"tenter\", \"tenth\", \"tenths\", \"tentie\", \"tents\", \"tenty\", \"tenues\", \"tenuis\", \"tenure\", \"tenuti\", \"tenuto\", \"teopan\", \"tepa\", \"tepal\", \"tepals\", \"tepas\", \"tepee\", \"tepees\", \"tepefy\", \"tephra\", \"tepid\", \"tepoy\", \"tepoys\", \"terai\", \"terais\", \"teraph\", \"terbia\", \"terbic\", \"terce\", \"tercel\", \"terces\", \"tercet\", \"teredo\", \"terete\", \"terga\", \"tergal\", \"tergum\", \"term\", \"termed\", \"termer\", \"termly\", \"termor\", \"terms\", \"tern\", \"terne\", \"ternes\", \"terns\", \"terra\", \"terrae\", \"terras\", \"terret\", \"territ\", \"terror\", \"terry\", \"terse\", \"terser\", \"tesla\", \"teslas\", \"test\", \"testa\", \"testae\", \"tested\", \"testee\", \"tester\", \"testes\", \"testis\", \"teston\", \"tests\", \"testy\", \"tet\", \"tetany\", \"tetchy\", \"teth\", \"tether\", \"teths\", \"tetra\", \"tetrad\", \"tetras\", \"tetryl\", \"tets\", \"tetter\", \"teuch\", \"teugh\", \"tew\", \"tewed\", \"tewing\", \"tews\", \"texas\", \"text\", \"texts\", \"thack\", \"thacks\", \"thae\", \"thairm\", \"thaler\", \"thalli\", \"than\", \"thane\", \"thanes\", \"thank\", \"thanks\", \"tharm\", \"tharms\", \"that\", \"thatch\", \"thaw\", \"thawed\", \"thawer\", \"thaws\", \"the\", \"thebe\", \"theca\", \"thecae\", \"thecal\", \"thee\", \"theft\", \"thefts\", \"thegn\", \"thegns\", \"thein\", \"theine\", \"theins\", \"their\", \"theirs\", \"theism\", \"theist\", \"them\", \"theme\", \"themed\", \"themes\", \"then\", \"thenal\", \"thenar\", \"thence\", \"thens\", \"theory\", \"there\", \"theres\", \"therm\", \"therme\", \"therms\", \"these\", \"theses\", \"thesis\", \"theta\", \"thetas\", \"thetic\", \"thew\", \"thews\", \"thewy\", \"they\", \"thick\", \"thicks\", \"thief\", \"thieve\", \"thigh\", \"thighs\", \"thill\", \"thills\", \"thin\", \"thine\", \"thing\", \"things\", \"think\", \"thinks\", \"thinly\", \"thins\", \"thio\", \"thiol\", \"thiols\", \"thir\", \"thiram\", \"third\", \"thirds\", \"thirl\", \"thirls\", \"thirst\", \"thirty\", \"this\", \"tho\", \"thole\", \"tholed\", \"tholes\", \"tholoi\", \"tholos\", \"thong\", \"thongs\", \"thorax\", \"thoria\", \"thoric\", \"thorn\", \"thorns\", \"thorny\", \"thoro\", \"thoron\", \"thorp\", \"thorpe\", \"thorps\", \"those\", \"thou\", \"thoued\", \"though\", \"thous\", \"thrall\", \"thrash\", \"thrave\", \"thraw\", \"thrawn\", \"thraws\", \"thread\", \"threap\", \"threat\", \"three\", \"threep\", \"threes\", \"thresh\", \"threw\", \"thrice\", \"thrift\", \"thrill\", \"thrip\", \"thrips\", \"thrive\", \"thro\", \"throat\", \"throb\", \"throbs\", \"throe\", \"throes\", \"throne\", \"throng\", \"throve\", \"throw\", \"thrown\", \"throws\", \"thru\", \"thrum\", \"thrums\", \"thrush\", \"thrust\", \"thud\", \"thuds\", \"thug\", \"thugs\", \"thuja\", \"thujas\", \"thulia\", \"thumb\", \"thumbs\", \"thump\", \"thumps\", \"thunk\", \"thunks\", \"thurl\", \"thurls\", \"thus\", \"thusly\", \"thuya\", \"thuyas\", \"thwack\", \"thwart\", \"thy\", \"thyme\", \"thymes\", \"thymey\", \"thymi\", \"thymic\", \"thymol\", \"thymus\", \"thymy\", \"thyrse\", \"thyrsi\", \"tiara\", \"tiaras\", \"tibia\", \"tibiae\", \"tibial\", \"tibias\", \"tic\", \"tical\", \"ticals\", \"tick\", \"ticked\", \"ticker\", \"ticket\", \"tickle\", \"ticks\", \"tics\", \"tictac\", \"tictoc\", \"tidal\", \"tidbit\", \"tiddly\", \"tide\", \"tided\", \"tides\", \"tidied\", \"tidier\", \"tidies\", \"tidily\", \"tiding\", \"tidy\", \"tie\", \"tied\", \"tieing\", \"tiepin\", \"tier\", \"tierce\", \"tiered\", \"tiers\", \"ties\", \"tiff\", \"tiffed\", \"tiffin\", \"tiffs\", \"tiger\", \"tigers\", \"tight\", \"tights\", \"tiglon\", \"tigon\", \"tigons\", \"tike\", \"tikes\", \"tiki\", \"tikis\", \"til\", \"tilak\", \"tilaks\", \"tilde\", \"tildes\", \"tile\", \"tiled\", \"tiler\", \"tilers\", \"tiles\", \"tiling\", \"till\", \"tilled\", \"tiller\", \"tills\", \"tils\", \"tilt\", \"tilted\", \"tilter\", \"tilth\", \"tilths\", \"tilts\", \"timbal\", \"timber\", \"timbre\", \"time\", \"timed\", \"timely\", \"timer\", \"timers\", \"times\", \"timid\", \"timing\", \"tin\", \"tincal\", \"tinct\", \"tincts\", \"tinder\", \"tine\", \"tinea\", \"tineal\", \"tineas\", \"tined\", \"tineid\", \"tines\", \"tinful\", \"ting\", \"tinge\", \"tinged\", \"tinges\", \"tingle\", \"tingly\", \"tings\", \"tinier\", \"tinily\", \"tining\", \"tinker\", \"tinkle\", \"tinkly\", \"tinman\", \"tinmen\", \"tinned\", \"tinner\", \"tinny\", \"tins\", \"tinsel\", \"tint\", \"tinted\", \"tinter\", \"tints\", \"tiny\", \"tip\", \"tipcat\", \"tipi\", \"tipis\", \"tipoff\", \"tipped\", \"tipper\", \"tippet\", \"tipple\", \"tippy\", \"tips\", \"tipsy\", \"tiptoe\", \"tiptop\", \"tirade\", \"tire\", \"tired\", \"tires\", \"tiring\", \"tirl\", \"tirled\", \"tirls\", \"tiro\", \"tiros\", \"tis\", \"tisane\", \"tissue\", \"tit\", \"titan\", \"titans\", \"titbit\", \"titer\", \"titers\", \"titfer\", \"tithe\", \"tithed\", \"tither\", \"tithes\", \"titi\", \"titian\", \"titis\", \"title\", \"titled\", \"titles\", \"titman\", \"titmen\", \"titre\", \"titres\", \"tits\", \"titter\", \"tittie\", \"tittle\", \"tittup\", \"titty\", \"tivy\", \"tizzy\", \"tmeses\", \"tmesis\", \"toad\", \"toads\", \"toady\", \"toast\", \"toasts\", \"toasty\", \"tobies\", \"toby\", \"tocher\", \"tocsin\", \"tod\", \"today\", \"todays\", \"toddle\", \"toddy\", \"todies\", \"tods\", \"tody\", \"toe\", \"toea\", \"toecap\", \"toed\", \"toeing\", \"toes\", \"toff\", \"toffee\", \"toffs\", \"toffy\", \"toft\", \"tofts\", \"tofu\", \"tofus\", \"tog\", \"toga\", \"togae\", \"togaed\", \"togas\", \"togate\", \"togged\", \"toggle\", \"togs\", \"togue\", \"togues\", \"toil\", \"toile\", \"toiled\", \"toiler\", \"toiles\", \"toilet\", \"toils\", \"toit\", \"toited\", \"toits\", \"tokay\", \"tokays\", \"toke\", \"toked\", \"token\", \"tokens\", \"toker\", \"tokers\", \"tokes\", \"toking\", \"tola\", \"tolan\", \"tolane\", \"tolans\", \"tolas\", \"told\", \"tole\", \"toled\", \"toledo\", \"toles\", \"toling\", \"toll\", \"tolled\", \"toller\", \"tolls\", \"tolu\", \"toluic\", \"toluid\", \"toluol\", \"tolus\", \"toluyl\", \"tolyl\", \"tolyls\", \"tom\", \"toman\", \"tomans\", \"tomato\", \"tomb\", \"tombac\", \"tombak\", \"tombal\", \"tombed\", \"tomboy\", \"tombs\", \"tomcat\", \"tomcod\", \"tome\", \"tomes\", \"tommed\", \"tommy\", \"toms\", \"tomtit\", \"ton\", \"tonal\", \"tondi\", \"tondo\", \"tondos\", \"tone\", \"toned\", \"toneme\", \"toner\", \"toners\", \"tones\", \"toney\", \"tong\", \"tonga\", \"tongas\", \"tonged\", \"tonger\", \"tongs\", \"tongue\", \"tonic\", \"tonics\", \"tonier\", \"toning\", \"tonish\", \"tonlet\", \"tonne\", \"tonner\", \"tonnes\", \"tons\", \"tonsil\", \"tonus\", \"tony\", \"too\", \"took\", \"tool\", \"tooled\", \"tooler\", \"tools\", \"toom\", \"toon\", \"toons\", \"toot\", \"tooted\", \"tooter\", \"tooth\", \"tooths\", \"toothy\", \"tootle\", \"toots\", \"tootsy\", \"top\", \"topaz\", \"tope\", \"toped\", \"topee\", \"topees\", \"toper\", \"topers\", \"topes\", \"topful\", \"toph\", \"tophe\", \"tophes\", \"tophi\", \"tophs\", \"tophus\", \"topi\", \"topic\", \"topics\", \"toping\", \"topis\", \"topoi\", \"topos\", \"topped\", \"topper\", \"topple\", \"tops\", \"toque\", \"toques\", \"toquet\", \"tor\", \"tora\", \"torah\", \"torahs\", \"toras\", \"torc\", \"torch\", \"torchy\", \"torcs\", \"tore\", \"torero\", \"tores\", \"tori\", \"toric\", \"tories\", \"torii\", \"torn\", \"toro\", \"toroid\", \"toros\", \"torose\", \"torot\", \"toroth\", \"torous\", \"torpid\", \"torpor\", \"torque\", \"torr\", \"torrid\", \"tors\", \"torse\", \"torses\", \"torsi\", \"torsk\", \"torsks\", \"torso\", \"torsos\", \"tort\", \"torte\", \"torten\", \"tortes\", \"torts\", \"torula\", \"torus\", \"tory\", \"tosh\", \"toshes\", \"toss\", \"tossed\", \"tosser\", \"tosses\", \"tossup\", \"tost\", \"tot\", \"total\", \"totals\", \"tote\", \"toted\", \"totem\", \"totems\", \"toter\", \"toters\", \"totes\", \"tother\", \"toting\", \"tots\", \"totted\", \"totter\", \"toucan\", \"touch\", \"touche\", \"touchy\", \"tough\", \"toughs\", \"toughy\", \"toupee\", \"tour\", \"toured\", \"tourer\", \"tours\", \"touse\", \"toused\", \"touses\", \"tousle\", \"tout\", \"touted\", \"touter\", \"touts\", \"touzle\", \"tow\", \"towage\", \"toward\", \"towed\", \"towel\", \"towels\", \"tower\", \"towers\", \"towery\", \"towhee\", \"towie\", \"towies\", \"towing\", \"town\", \"townee\", \"townie\", \"towns\", \"towny\", \"tows\", \"towy\", \"toxic\", \"toxics\", \"toxin\", \"toxine\", \"toxins\", \"toxoid\", \"toy\", \"toyed\", \"toyer\", \"toyers\", \"toying\", \"toyish\", \"toyo\", \"toyon\", \"toyons\", \"toyos\", \"toys\", \"trace\", \"traced\", \"tracer\", \"traces\", \"track\", \"tracks\", \"tract\", \"tracts\", \"trad\", \"trade\", \"traded\", \"trader\", \"trades\", \"tragi\", \"tragic\", \"tragus\", \"traik\", \"traiks\", \"trail\", \"trails\", \"train\", \"trains\", \"trait\", \"traits\", \"tram\", \"tramel\", \"tramp\", \"tramps\", \"trams\", \"trance\", \"trank\", \"tranks\", \"tranq\", \"tranqs\", \"trans\", \"trap\", \"trapan\", \"trapes\", \"traps\", \"trapt\", \"trash\", \"trashy\", \"trass\", \"trauma\", \"trave\", \"travel\", \"traves\", \"trawl\", \"trawls\", \"tray\", \"trays\", \"tread\", \"treads\", \"treat\", \"treats\", \"treaty\", \"treble\", \"trebly\", \"tree\", \"treed\", \"treen\", \"treens\", \"trees\", \"tref\", \"trefah\", \"trek\", \"treks\", \"tremor\", \"trench\", \"trend\", \"trends\", \"trendy\", \"trepan\", \"trepid\", \"tress\", \"tressy\", \"tret\", \"trets\", \"trevet\", \"trews\", \"trey\", \"treys\", \"triac\", \"triacs\", \"triad\", \"triads\", \"triage\", \"trial\", \"trials\", \"tribal\", \"tribe\", \"tribes\", \"trice\", \"triced\", \"trices\", \"trick\", \"tricks\", \"tricky\", \"tricot\", \"tried\", \"triene\", \"triens\", \"trier\", \"triers\", \"tries\", \"trifid\", \"trifle\", \"trig\", \"trigly\", \"trigo\", \"trigon\", \"trigos\", \"trigs\", \"trijet\", \"trike\", \"trikes\", \"trilby\", \"trill\", \"trills\", \"trim\", \"trimer\", \"trimly\", \"trims\", \"trinal\", \"trine\", \"trined\", \"trines\", \"trio\", \"triode\", \"triol\", \"triols\", \"trios\", \"triose\", \"trip\", \"tripe\", \"tripes\", \"triple\", \"triply\", \"tripod\", \"tripos\", \"trippy\", \"trips\", \"triste\", \"trite\", \"triter\", \"triton\", \"triune\", \"trivet\", \"trivia\", \"troak\", \"troaks\", \"trocar\", \"troche\", \"trock\", \"trocks\", \"trod\", \"trode\", \"trogon\", \"troika\", \"trois\", \"troke\", \"troked\", \"trokes\", \"troll\", \"trolls\", \"trolly\", \"tromp\", \"trompe\", \"tromps\", \"trona\", \"tronas\", \"trone\", \"trones\", \"troop\", \"troops\", \"trooz\", \"trop\", \"trope\", \"tropes\", \"trophy\", \"tropic\", \"tropin\", \"trot\", \"troth\", \"troths\", \"trots\", \"trotyl\", \"trough\", \"troupe\", \"trout\", \"trouts\", \"trouty\", \"trove\", \"trover\", \"troves\", \"trow\", \"trowed\", \"trowel\", \"trows\", \"trowth\", \"troy\", \"troys\", \"truant\", \"truce\", \"truced\", \"truces\", \"truck\", \"trucks\", \"trudge\", \"true\", \"trued\", \"truer\", \"trues\", \"truest\", \"truffe\", \"trug\", \"trugs\", \"truing\", \"truism\", \"trull\", \"trulls\", \"truly\", \"trump\", \"trumps\", \"trunk\", \"trunks\", \"truss\", \"trust\", \"trusts\", \"trusty\", \"truth\", \"truths\", \"try\", \"trying\", \"tryma\", \"tryout\", \"tryst\", \"tryste\", \"trysts\", \"tsade\", \"tsades\", \"tsadi\", \"tsadis\", \"tsar\", \"tsars\", \"tsetse\", \"tsk\", \"tsked\", \"tsking\", \"tsks\", \"tsktsk\", \"tsores\", \"tsoris\", \"tsuba\", \"tsuris\", \"tub\", \"tuba\", \"tubae\", \"tubal\", \"tubas\", \"tubate\", \"tubbed\", \"tubber\", \"tubby\", \"tube\", \"tubed\", \"tuber\", \"tubers\", \"tubes\", \"tubful\", \"tubing\", \"tubist\", \"tubs\", \"tubule\", \"tuchun\", \"tuck\", \"tucked\", \"tucker\", \"tucket\", \"tucks\", \"tufa\", \"tufas\", \"tuff\", \"tuffet\", \"tuffs\", \"tufoli\", \"tuft\", \"tufted\", \"tufter\", \"tufts\", \"tufty\", \"tug\", \"tugged\", \"tugger\", \"tugrik\", \"tugs\", \"tui\", \"tuille\", \"tuis\", \"tuladi\", \"tule\", \"tules\", \"tulip\", \"tulips\", \"tulle\", \"tulles\", \"tumble\", \"tumefy\", \"tumid\", \"tummy\", \"tumor\", \"tumors\", \"tumour\", \"tump\", \"tumped\", \"tumps\", \"tumuli\", \"tumult\", \"tun\", \"tuna\", \"tunas\", \"tundra\", \"tune\", \"tuned\", \"tuner\", \"tuners\", \"tunes\", \"tuneup\", \"tung\", \"tungs\", \"tunic\", \"tunica\", \"tunics\", \"tuning\", \"tunned\", \"tunnel\", \"tunny\", \"tuns\", \"tup\", \"tupelo\", \"tupik\", \"tupiks\", \"tupped\", \"tups\", \"tuque\", \"tuques\", \"turaco\", \"turban\", \"turbid\", \"turbit\", \"turbo\", \"turbos\", \"turbot\", \"turd\", \"turds\", \"tureen\", \"turf\", \"turfed\", \"turfs\", \"turfy\", \"turgid\", \"turgor\", \"turk\", \"turkey\", \"turks\", \"turn\", \"turned\", \"turner\", \"turnip\", \"turns\", \"turnup\", \"turps\", \"turret\", \"turtle\", \"turves\", \"tusche\", \"tush\", \"tushed\", \"tushes\", \"tushie\", \"tushy\", \"tusk\", \"tusked\", \"tusker\", \"tusks\", \"tussah\", \"tussal\", \"tussar\", \"tusseh\", \"tusser\", \"tussis\", \"tussle\", \"tussor\", \"tussur\", \"tut\", \"tutee\", \"tutees\", \"tutor\", \"tutors\", \"tuts\", \"tutted\", \"tutti\", \"tuttis\", \"tutty\", \"tutu\", \"tutus\", \"tux\", \"tuxedo\", \"tuxes\", \"tuyer\", \"tuyere\", \"tuyers\", \"twa\", \"twae\", \"twaes\", \"twain\", \"twains\", \"twang\", \"twangs\", \"twangy\", \"twanky\", \"twas\", \"twat\", \"twats\", \"tweak\", \"tweaks\", \"tweaky\", \"twee\", \"tweed\", \"tweeds\", \"tweedy\", \"tween\", \"tweeny\", \"tweet\", \"tweets\", \"tweeze\", \"twelve\", \"twenty\", \"twerp\", \"twerps\", \"twibil\", \"twice\", \"twier\", \"twiers\", \"twig\", \"twiggy\", \"twigs\", \"twilit\", \"twill\", \"twills\", \"twin\", \"twine\", \"twined\", \"twiner\", \"twines\", \"twinge\", \"twins\", \"twiny\", \"twirl\", \"twirls\", \"twirly\", \"twirp\", \"twirps\", \"twist\", \"twists\", \"twisty\", \"twit\", \"twitch\", \"twits\", \"twixt\", \"two\", \"twofer\", \"twos\", \"twyer\", \"twyers\", \"tycoon\", \"tye\", \"tyee\", \"tyees\", \"tyer\", \"tyers\", \"tyes\", \"tying\", \"tyke\", \"tykes\", \"tymbal\", \"tympan\", \"tyne\", \"tyned\", \"tynes\", \"tyning\", \"typal\", \"type\", \"typed\", \"types\", \"typey\", \"typhon\", \"typhus\", \"typic\", \"typier\", \"typify\", \"typing\", \"typist\", \"typo\", \"typos\", \"typp\", \"typps\", \"typy\", \"tyrant\", \"tyre\", \"tyred\", \"tyres\", \"tyring\", \"tyro\", \"tyros\", \"tythe\", \"tythed\", \"tythes\", \"tzar\", \"tzars\", \"tzetze\", \"tzuris\", \"ubiety\", \"ubique\", \"udder\", \"udders\", \"udo\", \"udos\", \"ugh\", \"ughs\", \"uglier\", \"uglies\", \"uglify\", \"uglily\", \"ugly\", \"ugsome\", \"uhlan\", \"uhlans\", \"ukase\", \"ukases\", \"uke\", \"ukes\", \"ulama\", \"ulamas\", \"ulan\", \"ulans\", \"ulcer\", \"ulcers\", \"ulema\", \"ulemas\", \"ullage\", \"ulna\", \"ulnad\", \"ulnae\", \"ulnar\", \"ulnas\", \"ulpan\", \"ulster\", \"ultima\", \"ultimo\", \"ultra\", \"ultras\", \"ulu\", \"ulus\", \"ulva\", \"ulvas\", \"umbel\", \"umbels\", \"umber\", \"umbers\", \"umbles\", \"umbo\", \"umbos\", \"umbra\", \"umbrae\", \"umbral\", \"umbras\", \"umiac\", \"umiack\", \"umiacs\", \"umiak\", \"umiaks\", \"umiaq\", \"umiaqs\", \"umlaut\", \"umm\", \"ump\", \"umped\", \"umping\", \"umpire\", \"umps\", \"unable\", \"unaged\", \"unai\", \"unais\", \"unakin\", \"unapt\", \"unarm\", \"unarms\", \"unary\", \"unau\", \"unaus\", \"unawed\", \"unban\", \"unbans\", \"unbar\", \"unbars\", \"unbe\", \"unbear\", \"unbelt\", \"unbend\", \"unbent\", \"unbid\", \"unbind\", \"unbolt\", \"unborn\", \"unbox\", \"unbred\", \"unbusy\", \"uncage\", \"uncake\", \"uncap\", \"uncaps\", \"uncase\", \"unchic\", \"unci\", \"uncia\", \"unciae\", \"uncial\", \"uncini\", \"unclad\", \"uncle\", \"uncles\", \"unclip\", \"unclog\", \"unco\", \"uncock\", \"uncoil\", \"uncool\", \"uncork\", \"uncos\", \"uncoy\", \"uncuff\", \"uncurb\", \"uncurl\", \"uncus\", \"uncut\", \"uncute\", \"unde\", \"undead\", \"undee\", \"under\", \"undid\", \"undies\", \"undine\", \"undo\", \"undock\", \"undoer\", \"undoes\", \"undone\", \"undraw\", \"undrew\", \"undue\", \"unduly\", \"undy\", \"undyed\", \"unease\", \"uneasy\", \"uneven\", \"unfair\", \"unfed\", \"unfelt\", \"unfit\", \"unfits\", \"unfix\", \"unfixt\", \"unfold\", \"unfond\", \"unfree\", \"unfurl\", \"ungird\", \"ungirt\", \"unglue\", \"ungot\", \"ungual\", \"ungues\", \"unguis\", \"ungula\", \"unhair\", \"unhand\", \"unhang\", \"unhat\", \"unhats\", \"unhelm\", \"unhewn\", \"unhip\", \"unholy\", \"unhood\", \"unhook\", \"unhung\", \"unhurt\", \"unhusk\", \"unific\", \"unify\", \"union\", \"unions\", \"unipod\", \"unique\", \"unisex\", \"unison\", \"unit\", \"unite\", \"united\", \"uniter\", \"unites\", \"units\", \"unity\", \"unjust\", \"unkend\", \"unkent\", \"unkept\", \"unkind\", \"unkink\", \"unknit\", \"unknot\", \"unlace\", \"unlade\", \"unlaid\", \"unlash\", \"unlay\", \"unlays\", \"unlead\", \"unled\", \"unless\", \"unlet\", \"unlike\", \"unlink\", \"unlit\", \"unlive\", \"unload\", \"unlock\", \"unmade\", \"unmake\", \"unman\", \"unmans\", \"unmask\", \"unmeet\", \"unmesh\", \"unmet\", \"unmew\", \"unmews\", \"unmix\", \"unmixt\", \"unmold\", \"unmoor\", \"unmown\", \"unnail\", \"unopen\", \"unpack\", \"unpaid\", \"unpeg\", \"unpegs\", \"unpen\", \"unpens\", \"unpent\", \"unpick\", \"unpile\", \"unpin\", \"unpins\", \"unplug\", \"unpure\", \"unread\", \"unreal\", \"unreel\", \"unrent\", \"unrest\", \"unrig\", \"unrigs\", \"unrip\", \"unripe\", \"unrips\", \"unrobe\", \"unroll\", \"unroof\", \"unroot\", \"unrove\", \"unruly\", \"uns\", \"unsafe\", \"unsaid\", \"unsawn\", \"unsay\", \"unsays\", \"unseal\", \"unseam\", \"unseat\", \"unseen\", \"unsell\", \"unsent\", \"unset\", \"unsets\", \"unsew\", \"unsewn\", \"unsews\", \"unsex\", \"unsexy\", \"unshed\", \"unship\", \"unshod\", \"unshut\", \"unsnap\", \"unsold\", \"unsown\", \"unspun\", \"unstep\", \"unstop\", \"unsung\", \"unsunk\", \"unsure\", \"untack\", \"untame\", \"untidy\", \"untie\", \"untied\", \"unties\", \"until\", \"unto\", \"untold\", \"untorn\", \"untrim\", \"untrod\", \"untrue\", \"untuck\", \"untune\", \"unused\", \"unveil\", \"unvext\", \"unwary\", \"unwed\", \"unwell\", \"unwept\", \"unwind\", \"unwise\", \"unwish\", \"unwit\", \"unwits\", \"unwon\", \"unworn\", \"unwove\", \"unwrap\", \"unyoke\", \"unzip\", \"unzips\", \"upas\", \"upases\", \"upbear\", \"upbeat\", \"upbind\", \"upboil\", \"upbore\", \"upbow\", \"upbows\", \"upby\", \"upbye\", \"upcast\", \"upcoil\", \"upcurl\", \"updart\", \"update\", \"updive\", \"updo\", \"updos\", \"updove\", \"updry\", \"upend\", \"upends\", \"upflow\", \"upfold\", \"upgaze\", \"upgird\", \"upgirt\", \"upgrew\", \"upgrow\", \"upheap\", \"upheld\", \"uphill\", \"uphold\", \"uphove\", \"uphroe\", \"upkeep\", \"upland\", \"upleap\", \"uplift\", \"uplink\", \"uplit\", \"upload\", \"upmost\", \"upo\", \"upon\", \"upped\", \"upper\", \"uppers\", \"uppile\", \"upping\", \"uppish\", \"uppity\", \"upprop\", \"uprate\", \"uprear\", \"uprise\", \"uproar\", \"uproot\", \"uprose\", \"uprush\", \"ups\", \"upsend\", \"upsent\", \"upset\", \"upsets\", \"upshot\", \"upside\", \"upsoar\", \"upstep\", \"upstir\", \"uptake\", \"uptear\", \"uptick\", \"uptilt\", \"uptime\", \"uptore\", \"uptorn\", \"uptoss\", \"uptown\", \"upturn\", \"upwaft\", \"upward\", \"upwell\", \"upwind\", \"uracil\", \"uraei\", \"uraeus\", \"urania\", \"uranic\", \"uranyl\", \"urare\", \"urares\", \"urari\", \"uraris\", \"urase\", \"urases\", \"urate\", \"urates\", \"uratic\", \"urb\", \"urban\", \"urbane\", \"urbia\", \"urbias\", \"urbs\", \"urchin\", \"urd\", \"urds\", \"urea\", \"ureal\", \"ureas\", \"urease\", \"uredia\", \"uredo\", \"uredos\", \"ureic\", \"ureide\", \"uremia\", \"uremic\", \"ureter\", \"uretic\", \"urge\", \"urged\", \"urgent\", \"urger\", \"urgers\", \"urges\", \"urging\", \"urial\", \"urials\", \"uric\", \"urinal\", \"urine\", \"urines\", \"urn\", \"urns\", \"uropod\", \"ursa\", \"ursae\", \"ursine\", \"urtext\", \"urus\", \"uruses\", \"usable\", \"usably\", \"usage\", \"usages\", \"usance\", \"use\", \"used\", \"useful\", \"user\", \"users\", \"uses\", \"usher\", \"ushers\", \"using\", \"usnea\", \"usneas\", \"usque\", \"usques\", \"usual\", \"usuals\", \"usurer\", \"usurp\", \"usurps\", \"usury\", \"uta\", \"utas\", \"uteri\", \"uterus\", \"utile\", \"utmost\", \"utopia\", \"uts\", \"utter\", \"utters\", \"uvea\", \"uveal\", \"uveas\", \"uveous\", \"uvula\", \"uvulae\", \"uvular\", \"uvulas\", \"vac\", \"vacant\", \"vacate\", \"vacs\", \"vacua\", \"vacuum\", \"vadose\", \"vagal\", \"vagary\", \"vagi\", \"vagile\", \"vagina\", \"vagrom\", \"vague\", \"vaguer\", \"vagus\", \"vahine\", \"vail\", \"vailed\", \"vails\", \"vain\", \"vainer\", \"vainly\", \"vair\", \"vairs\", \"vakeel\", \"vakil\", \"vakils\", \"vale\", \"vales\", \"valet\", \"valets\", \"valgus\", \"valid\", \"valine\", \"valise\", \"valkyr\", \"valley\", \"valor\", \"valors\", \"valour\", \"valse\", \"valses\", \"value\", \"valued\", \"valuer\", \"values\", \"valuta\", \"valval\", \"valvar\", \"valve\", \"valved\", \"valves\", \"vamose\", \"vamp\", \"vamped\", \"vamper\", \"vamps\", \"van\", \"vanda\", \"vandal\", \"vandas\", \"vane\", \"vaned\", \"vanes\", \"vang\", \"vangs\", \"vanish\", \"vanity\", \"vanman\", \"vanmen\", \"vanned\", \"vanner\", \"vans\", \"vapid\", \"vapor\", \"vapors\", \"vapory\", \"vapour\", \"var\", \"vara\", \"varas\", \"varia\", \"varied\", \"varier\", \"varies\", \"varix\", \"varlet\", \"varna\", \"varnas\", \"varoom\", \"vars\", \"varus\", \"varve\", \"varved\", \"varves\", \"vary\", \"vas\", \"vasa\", \"vasal\", \"vase\", \"vases\", \"vassal\", \"vast\", \"vaster\", \"vastly\", \"vasts\", \"vasty\", \"vat\", \"vatful\", \"vatic\", \"vats\", \"vatted\", \"vatu\", \"vatus\", \"vau\", \"vault\", \"vaults\", \"vaulty\", \"vaunt\", \"vaunts\", \"vaunty\", \"vaus\", \"vav\", \"vavs\", \"vaw\", \"vaward\", \"vaws\", \"veal\", \"vealed\", \"vealer\", \"veals\", \"vealy\", \"vector\", \"vee\", \"veejay\", \"veena\", \"veenas\", \"veep\", \"veepee\", \"veeps\", \"veer\", \"veered\", \"veers\", \"veery\", \"vees\", \"veg\", \"vegan\", \"vegans\", \"vegete\", \"veggie\", \"vegie\", \"vegies\", \"veil\", \"veiled\", \"veiler\", \"veils\", \"vein\", \"veinal\", \"veined\", \"veiner\", \"veins\", \"veiny\", \"vela\", \"velar\", \"velars\", \"velate\", \"veld\", \"velds\", \"veldt\", \"veldts\", \"vellum\", \"veloce\", \"velour\", \"velum\", \"velure\", \"velvet\", \"vena\", \"venae\", \"venal\", \"vend\", \"vended\", \"vendee\", \"vender\", \"vendor\", \"vends\", \"vendue\", \"veneer\", \"venery\", \"venge\", \"venged\", \"venges\", \"venial\", \"venin\", \"venine\", \"venins\", \"venire\", \"venom\", \"venoms\", \"venose\", \"venous\", \"vent\", \"vented\", \"venter\", \"vents\", \"venue\", \"venues\", \"venule\", \"vera\", \"verb\", \"verbal\", \"verbid\", \"verbs\", \"verdin\", \"verge\", \"verged\", \"verger\", \"verges\", \"verier\", \"verify\", \"verily\", \"verism\", \"verist\", \"verite\", \"verity\", \"vermes\", \"vermin\", \"vermis\", \"vernal\", \"vernix\", \"versal\", \"verse\", \"versed\", \"verser\", \"verses\", \"verset\", \"verso\", \"versos\", \"verst\", \"verste\", \"versts\", \"versus\", \"vert\", \"vertex\", \"verts\", \"vertu\", \"vertus\", \"verve\", \"verves\", \"vervet\", \"very\", \"vesica\", \"vesper\", \"vespid\", \"vessel\", \"vest\", \"vesta\", \"vestal\", \"vestas\", \"vested\", \"vestee\", \"vestry\", \"vests\", \"vet\", \"vetch\", \"veto\", \"vetoed\", \"vetoer\", \"vetoes\", \"vets\", \"vetted\", \"vex\", \"vexed\", \"vexer\", \"vexers\", \"vexes\", \"vexil\", \"vexils\", \"vexing\", \"vext\", \"via\", \"viable\", \"viably\", \"vial\", \"vialed\", \"vials\", \"viand\", \"viands\", \"viatic\", \"viator\", \"vibe\", \"vibes\", \"vibist\", \"vibrio\", \"vicar\", \"vicars\", \"vice\", \"viced\", \"vices\", \"vichy\", \"vicing\", \"victim\", \"victor\", \"vicuna\", \"vide\", \"video\", \"videos\", \"vie\", \"vied\", \"vier\", \"viers\", \"vies\", \"view\", \"viewed\", \"viewer\", \"views\", \"viewy\", \"vig\", \"viga\", \"vigas\", \"vigil\", \"vigils\", \"vigor\", \"vigors\", \"vigour\", \"vigs\", \"viking\", \"vile\", \"vilely\", \"viler\", \"vilest\", \"vilify\", \"vill\", \"villa\", \"villae\", \"villas\", \"villi\", \"vills\", \"villus\", \"vim\", \"vimen\", \"vimina\", \"vims\", \"vina\", \"vinal\", \"vinals\", \"vinas\", \"vinca\", \"vincas\", \"vine\", \"vineal\", \"vined\", \"vinery\", \"vines\", \"vinic\", \"vinier\", \"vinify\", \"vining\", \"vino\", \"vinos\", \"vinous\", \"viny\", \"vinyl\", \"vinyls\", \"viol\", \"viola\", \"violas\", \"violet\", \"violin\", \"viols\", \"viper\", \"vipers\", \"virago\", \"viral\", \"vireo\", \"vireos\", \"vires\", \"virga\", \"virgas\", \"virgin\", \"virid\", \"virile\", \"virion\", \"virl\", \"virls\", \"viroid\", \"virtu\", \"virtue\", \"virtus\", \"virus\", \"vis\", \"visa\", \"visaed\", \"visage\", \"visard\", \"visas\", \"viscid\", \"viscus\", \"vise\", \"vised\", \"viseed\", \"vises\", \"vising\", \"vision\", \"visit\", \"visits\", \"visive\", \"visor\", \"visors\", \"vista\", \"vistas\", \"visual\", \"vita\", \"vitae\", \"vital\", \"vitals\", \"vitric\", \"vitta\", \"vittae\", \"vittle\", \"viva\", \"vivace\", \"vivary\", \"vivas\", \"vive\", \"vivers\", \"vivid\", \"vivify\", \"vixen\", \"vixens\", \"vizard\", \"vizier\", \"vizir\", \"vizirs\", \"vizor\", \"vizors\", \"vizsla\", \"vocal\", \"vocals\", \"voces\", \"vodka\", \"vodkas\", \"vodoun\", \"vodun\", \"voduns\", \"voe\", \"voes\", \"vogie\", \"vogue\", \"vogued\", \"voguer\", \"vogues\", \"voice\", \"voiced\", \"voicer\", \"voices\", \"void\", \"voided\", \"voider\", \"voids\", \"voila\", \"voile\", \"voiles\", \"volant\", \"volar\", \"vole\", \"voled\", \"volery\", \"voles\", \"voling\", \"volley\", \"volost\", \"volt\", \"volta\", \"volte\", \"voltes\", \"volti\", \"volts\", \"volume\", \"volute\", \"volva\", \"volvas\", \"volvox\", \"vomer\", \"vomers\", \"vomica\", \"vomit\", \"vomito\", \"vomits\", \"voodoo\", \"vortex\", \"votary\", \"vote\", \"voted\", \"voter\", \"voters\", \"votes\", \"voting\", \"votive\", \"vouch\", \"vow\", \"vowed\", \"vowel\", \"vowels\", \"vower\", \"vowers\", \"vowing\", \"vows\", \"vox\", \"voyage\", \"voyeur\", \"vroom\", \"vrooms\", \"vrouw\", \"vrouws\", \"vrow\", \"vrows\", \"vug\", \"vugg\", \"vuggs\", \"vuggy\", \"vugh\", \"vughs\", \"vugs\", \"vulgar\", \"vulgo\", \"vulgus\", \"vulva\", \"vulvae\", \"vulval\", \"vulvar\", \"vulvas\", \"vying\", \"wab\", \"wabble\", \"wabbly\", \"wabs\", \"wack\", \"wacke\", \"wackes\", \"wacko\", \"wackos\", \"wacks\", \"wacky\", \"wad\", \"wadded\", \"wadder\", \"waddie\", \"waddle\", \"waddly\", \"waddy\", \"wade\", \"waded\", \"wader\", \"waders\", \"wades\", \"wadi\", \"wadies\", \"wading\", \"wadis\", \"wadmal\", \"wadmel\", \"wadmol\", \"wads\", \"wadset\", \"wady\", \"wae\", \"waeful\", \"waes\", \"wafer\", \"wafers\", \"wafery\", \"waff\", \"waffed\", \"waffie\", \"waffle\", \"waffs\", \"waft\", \"wafted\", \"wafter\", \"wafts\", \"wag\", \"wage\", \"waged\", \"wager\", \"wagers\", \"wages\", \"wagged\", \"wagger\", \"waggle\", \"waggly\", \"waggon\", \"waging\", \"wagon\", \"wagons\", \"wags\", \"wahine\", \"wahoo\", \"wahoos\", \"waif\", \"waifed\", \"waifs\", \"wail\", \"wailed\", \"wailer\", \"wails\", \"wain\", \"wains\", \"wair\", \"waired\", \"wairs\", \"waist\", \"waists\", \"wait\", \"waited\", \"waiter\", \"waits\", \"waive\", \"waived\", \"waiver\", \"waives\", \"wake\", \"waked\", \"waken\", \"wakens\", \"waker\", \"wakers\", \"wakes\", \"wakiki\", \"waking\", \"wale\", \"waled\", \"waler\", \"walers\", \"wales\", \"walies\", \"waling\", \"walk\", \"walked\", \"walker\", \"walks\", \"walkup\", \"wall\", \"walla\", \"wallah\", \"wallas\", \"walled\", \"wallet\", \"wallie\", \"wallop\", \"wallow\", \"walls\", \"wally\", \"walnut\", \"walrus\", \"waltz\", \"waly\", \"wamble\", \"wambly\", \"wame\", \"wames\", \"wammus\", \"wampum\", \"wampus\", \"wamus\", \"wan\", \"wand\", \"wander\", \"wandle\", \"wands\", \"wane\", \"waned\", \"wanes\", \"waney\", \"wangan\", \"wangle\", \"wangun\", \"wanier\", \"waning\", \"wanion\", \"wanly\", \"wanned\", \"wanner\", \"wans\", \"want\", \"wanted\", \"wanter\", \"wanton\", \"wants\", \"wany\", \"wap\", \"wapiti\", \"wapped\", \"waps\", \"war\", \"warble\", \"ward\", \"warded\", \"warden\", \"warder\", \"wards\", \"ware\", \"wared\", \"wares\", \"warier\", \"warily\", \"waring\", \"wark\", \"warked\", \"warks\", \"warm\", \"warmed\", \"warmer\", \"warmly\", \"warms\", \"warmth\", \"warmup\", \"warn\", \"warned\", \"warner\", \"warns\", \"warp\", \"warped\", \"warper\", \"warps\", \"warred\", \"warren\", \"wars\", \"warsaw\", \"warsle\", \"wart\", \"warted\", \"warts\", \"warty\", \"wary\", \"was\", \"wasabi\", \"wash\", \"washed\", \"washer\", \"washes\", \"washup\", \"washy\", \"wasp\", \"wasps\", \"waspy\", \"wast\", \"waste\", \"wasted\", \"waster\", \"wastes\", \"wastry\", \"wasts\", \"wat\", \"watap\", \"watape\", \"wataps\", \"watch\", \"water\", \"waters\", \"watery\", \"wats\", \"watt\", \"watter\", \"wattle\", \"watts\", \"waucht\", \"waugh\", \"waught\", \"wauk\", \"wauked\", \"wauks\", \"waul\", \"wauled\", \"wauls\", \"waur\", \"wave\", \"waved\", \"waver\", \"wavers\", \"wavery\", \"waves\", \"wavey\", \"waveys\", \"wavier\", \"wavies\", \"wavily\", \"waving\", \"wavy\", \"waw\", \"wawl\", \"wawled\", \"wawls\", \"waws\", \"wax\", \"waxed\", \"waxen\", \"waxer\", \"waxers\", \"waxes\", \"waxier\", \"waxily\", \"waxing\", \"waxy\", \"way\", \"waylay\", \"ways\", \"weak\", \"weaken\", \"weaker\", \"weakly\", \"weal\", \"weald\", \"wealds\", \"weals\", \"wealth\", \"wean\", \"weaned\", \"weaner\", \"weans\", \"weapon\", \"wear\", \"wearer\", \"wears\", \"weary\", \"weasel\", \"weason\", \"weave\", \"weaved\", \"weaver\", \"weaves\", \"web\", \"webbed\", \"webby\", \"weber\", \"webers\", \"webfed\", \"webs\", \"wecht\", \"wechts\", \"wed\", \"wedded\", \"wedder\", \"wedel\", \"wedeln\", \"wedels\", \"wedge\", \"wedged\", \"wedges\", \"wedgie\", \"wedgy\", \"weds\", \"wee\", \"weed\", \"weeded\", \"weeder\", \"weeds\", \"weedy\", \"week\", \"weekly\", \"weeks\", \"weel\", \"ween\", \"weened\", \"weenie\", \"weens\", \"weensy\", \"weeny\", \"weep\", \"weeper\", \"weepie\", \"weeps\", \"weepy\", \"weer\", \"wees\", \"weest\", \"weet\", \"weeted\", \"weets\", \"weever\", \"weevil\", \"weewee\", \"weft\", \"wefts\", \"weigh\", \"weighs\", \"weight\", \"weiner\", \"weir\", \"weird\", \"weirdo\", \"weirds\", \"weirdy\", \"weirs\", \"weka\", \"wekas\", \"welch\", \"weld\", \"welded\", \"welder\", \"weldor\", \"welds\", \"welkin\", \"well\", \"welled\", \"wellie\", \"wells\", \"welly\", \"welsh\", \"welt\", \"welted\", \"welter\", \"welts\", \"wen\", \"wench\", \"wend\", \"wended\", \"wends\", \"wenny\", \"wens\", \"went\", \"wept\", \"were\", \"wert\", \"weskit\", \"west\", \"wester\", \"wests\", \"wet\", \"wether\", \"wetly\", \"wets\", \"wetted\", \"wetter\", \"wha\", \"whack\", \"whacko\", \"whacks\", \"whacky\", \"whale\", \"whaled\", \"whaler\", \"whales\", \"wham\", \"whammo\", \"whammy\", \"whamo\", \"whams\", \"whang\", \"whangs\", \"whap\", \"whaps\", \"wharf\", \"wharfs\", \"wharve\", \"what\", \"whats\", \"whaup\", \"whaups\", \"wheal\", \"wheals\", \"wheat\", \"wheats\", \"whee\", \"wheel\", \"wheels\", \"wheen\", \"wheens\", \"wheep\", \"wheeps\", \"wheeze\", \"wheezy\", \"whelk\", \"whelks\", \"whelky\", \"whelm\", \"whelms\", \"whelp\", \"whelps\", \"when\", \"whenas\", \"whence\", \"whens\", \"where\", \"wheres\", \"wherry\", \"wherve\", \"whet\", \"whets\", \"whew\", \"whews\", \"whey\", \"wheyey\", \"wheys\", \"which\", \"whid\", \"whidah\", \"whids\", \"whiff\", \"whiffs\", \"whig\", \"whigs\", \"while\", \"whiled\", \"whiles\", \"whilom\", \"whilst\", \"whim\", \"whims\", \"whimsy\", \"whin\", \"whine\", \"whined\", \"whiner\", \"whines\", \"whiney\", \"whinge\", \"whinny\", \"whins\", \"whiny\", \"whip\", \"whippy\", \"whips\", \"whipt\", \"whir\", \"whirl\", \"whirls\", \"whirly\", \"whirr\", \"whirrs\", \"whirry\", \"whirs\", \"whish\", \"whisht\", \"whisk\", \"whisks\", \"whisky\", \"whist\", \"whists\", \"whit\", \"white\", \"whited\", \"whiten\", \"whiter\", \"whites\", \"whitey\", \"whits\", \"whity\", \"whiz\", \"whizz\", \"who\", \"whoa\", \"whole\", \"wholes\", \"wholly\", \"whom\", \"whomp\", \"whomps\", \"whomso\", \"whoof\", \"whoofs\", \"whoop\", \"whoops\", \"whoosh\", \"whop\", \"whops\", \"whore\", \"whored\", \"whores\", \"whorl\", \"whorls\", \"whort\", \"whorts\", \"whose\", \"whosis\", \"whoso\", \"whump\", \"whumps\", \"why\", \"whydah\", \"whys\", \"wich\", \"wiches\", \"wick\", \"wicked\", \"wicker\", \"wicket\", \"wicks\", \"wicopy\", \"widder\", \"widdie\", \"widdle\", \"widdy\", \"wide\", \"widely\", \"widen\", \"widens\", \"wider\", \"wides\", \"widest\", \"widget\", \"widish\", \"widow\", \"widows\", \"width\", \"widths\", \"wield\", \"wields\", \"wieldy\", \"wiener\", \"wienie\", \"wife\", \"wifed\", \"wifely\", \"wifes\", \"wifing\", \"wifty\", \"wig\", \"wigan\", \"wigans\", \"wigeon\", \"wigged\", \"wiggle\", \"wiggly\", \"wiggy\", \"wight\", \"wights\", \"wiglet\", \"wigs\", \"wigwag\", \"wigwam\", \"wikiup\", \"wilco\", \"wild\", \"wilder\", \"wildly\", \"wilds\", \"wile\", \"wiled\", \"wiles\", \"wilful\", \"wilier\", \"wilily\", \"wiling\", \"will\", \"willed\", \"willer\", \"willet\", \"willow\", \"wills\", \"willy\", \"wilt\", \"wilted\", \"wilts\", \"wily\", \"wimble\", \"wimp\", \"wimple\", \"wimps\", \"wimpy\", \"win\", \"wince\", \"winced\", \"wincer\", \"winces\", \"wincey\", \"winch\", \"wind\", \"winded\", \"winder\", \"windle\", \"window\", \"winds\", \"windup\", \"windy\", \"wine\", \"wined\", \"winery\", \"wines\", \"winey\", \"wing\", \"winged\", \"winger\", \"wings\", \"wingy\", \"winier\", \"wining\", \"winish\", \"wink\", \"winked\", \"winker\", \"winkle\", \"winks\", \"winned\", \"winner\", \"winnow\", \"wino\", \"winoes\", \"winos\", \"wins\", \"winter\", \"wintle\", \"wintry\", \"winy\", \"winze\", \"winzes\", \"wipe\", \"wiped\", \"wiper\", \"wipers\", \"wipes\", \"wiping\", \"wire\", \"wired\", \"wirer\", \"wirers\", \"wires\", \"wirier\", \"wirily\", \"wiring\", \"wirra\", \"wiry\", \"wis\", \"wisdom\", \"wise\", \"wised\", \"wisely\", \"wisent\", \"wiser\", \"wises\", \"wisest\", \"wish\", \"wisha\", \"wished\", \"wisher\", \"wishes\", \"wising\", \"wisp\", \"wisped\", \"wisps\", \"wispy\", \"wiss\", \"wissed\", \"wisses\", \"wist\", \"wisted\", \"wists\", \"wit\", \"witan\", \"witch\", \"witchy\", \"wite\", \"wited\", \"wites\", \"with\", \"withal\", \"withe\", \"withed\", \"wither\", \"withes\", \"within\", \"withy\", \"witing\", \"witney\", \"wits\", \"witted\", \"wittol\", \"witty\", \"wive\", \"wived\", \"wiver\", \"wivern\", \"wivers\", \"wives\", \"wiving\", \"wiz\", \"wizard\", \"wizen\", \"wizens\", \"wizes\", \"wizzen\", \"woad\", \"woaded\", \"woads\", \"woald\", \"woalds\", \"wobble\", \"wobbly\", \"wodge\", \"wodges\", \"woe\", \"woeful\", \"woes\", \"woful\", \"wog\", \"wogs\", \"wok\", \"woke\", \"woken\", \"woks\", \"wold\", \"wolds\", \"wolf\", \"wolfed\", \"wolfer\", \"wolfs\", \"wolver\", \"wolves\", \"woman\", \"womans\", \"womb\", \"wombat\", \"wombed\", \"wombs\", \"womby\", \"women\", \"womera\", \"won\", \"wonder\", \"wonk\", \"wonks\", \"wonky\", \"wonned\", \"wonner\", \"wons\", \"wont\", \"wonted\", \"wonton\", \"wonts\", \"woo\", \"wood\", \"wooded\", \"wooden\", \"woodie\", \"woods\", \"woodsy\", \"woody\", \"wooed\", \"wooer\", \"wooers\", \"woof\", \"woofed\", \"woofer\", \"woofs\", \"wooing\", \"wool\", \"wooled\", \"woolen\", \"wooler\", \"woolie\", \"woolly\", \"wools\", \"wooly\", \"woops\", \"woos\", \"woosh\", \"woozy\", \"wop\", \"wops\", \"word\", \"worded\", \"words\", \"wordy\", \"wore\", \"work\", \"worked\", \"worker\", \"works\", \"workup\", \"world\", \"worlds\", \"worm\", \"wormed\", \"wormer\", \"wormil\", \"worms\", \"wormy\", \"worn\", \"worrit\", \"worry\", \"worse\", \"worsen\", \"worser\", \"worses\", \"worset\", \"worst\", \"worsts\", \"wort\", \"worth\", \"worths\", \"worthy\", \"worts\", \"wos\", \"wost\", \"wot\", \"wots\", \"wotted\", \"would\", \"wound\", \"wounds\", \"wove\", \"woven\", \"wovens\", \"wow\", \"wowed\", \"wowing\", \"wows\", \"wowser\", \"wrack\", \"wracks\", \"wraith\", \"wrang\", \"wrangs\", \"wrap\", \"wraps\", \"wrapt\", \"wrasse\", \"wrath\", \"wraths\", \"wrathy\", \"wreak\", \"wreaks\", \"wreath\", \"wreck\", \"wrecks\", \"wren\", \"wrench\", \"wrens\", \"wrest\", \"wrests\", \"wretch\", \"wrick\", \"wricks\", \"wried\", \"wrier\", \"wries\", \"wriest\", \"wright\", \"wring\", \"wrings\", \"wrist\", \"wrists\", \"wristy\", \"writ\", \"write\", \"writer\", \"writes\", \"writhe\", \"writs\", \"wrong\", \"wrongs\", \"wrote\", \"wroth\", \"wrung\", \"wry\", \"wryer\", \"wryest\", \"wrying\", \"wryly\", \"wud\", \"wurst\", \"wursts\", \"wurzel\", \"wuss\", \"wusses\", \"wussy\", \"wuther\", \"wych\", \"wyches\", \"wye\", \"wyes\", \"wyle\", \"wyled\", \"wyles\", \"wyling\", \"wyn\", \"wynd\", \"wynds\", \"wynn\", \"wynns\", \"wyns\", \"wyte\", \"wyted\", \"wytes\", \"wyting\", \"wyvern\", \"xebec\", \"xebecs\", \"xenia\", \"xenial\", \"xenias\", \"xenic\", \"xenon\", \"xenons\", \"xeric\", \"xerox\", \"xerus\", \"xis\", \"xylan\", \"xylans\", \"xylem\", \"xylems\", \"xylene\", \"xyloid\", \"xylol\", \"xylols\", \"xylose\", \"xylyl\", \"xylyls\", \"xyst\", \"xyster\", \"xysti\", \"xystoi\", \"xystos\", \"xysts\", \"xystus\", \"yabber\", \"yacht\", \"yachts\", \"yack\", \"yacked\", \"yacks\", \"yaff\", \"yaffed\", \"yaffs\", \"yager\", \"yagers\", \"yagi\", \"yagis\", \"yah\", \"yahoo\", \"yahoos\", \"yaird\", \"yairds\", \"yak\", \"yakked\", \"yakker\", \"yaks\", \"yald\", \"yam\", \"yamen\", \"yamens\", \"yammer\", \"yams\", \"yamun\", \"yamuns\", \"yang\", \"yangs\", \"yank\", \"yanked\", \"yanks\", \"yanqui\", \"yantra\", \"yap\", \"yapock\", \"yapok\", \"yapoks\", \"yapon\", \"yapons\", \"yapped\", \"yapper\", \"yaps\", \"yar\", \"yard\", \"yarded\", \"yards\", \"yare\", \"yarely\", \"yarer\", \"yarest\", \"yarn\", \"yarned\", \"yarner\", \"yarns\", \"yarrow\", \"yasmak\", \"yatter\", \"yaud\", \"yauds\", \"yauld\", \"yaup\", \"yauped\", \"yauper\", \"yaupon\", \"yaups\", \"yautia\", \"yaw\", \"yawed\", \"yawing\", \"yawl\", \"yawled\", \"yawls\", \"yawn\", \"yawned\", \"yawner\", \"yawns\", \"yawp\", \"yawped\", \"yawper\", \"yawps\", \"yaws\", \"yay\", \"yays\", \"yclept\", \"yea\", \"yeah\", \"yean\", \"yeaned\", \"yeans\", \"year\", \"yearly\", \"yearn\", \"yearns\", \"years\", \"yeas\", \"yeast\", \"yeasts\", \"yeasty\", \"yecch\", \"yecchs\", \"yech\", \"yechs\", \"yechy\", \"yeelin\", \"yegg\", \"yeggs\", \"yeh\", \"yeld\", \"yelk\", \"yelks\", \"yell\", \"yelled\", \"yeller\", \"yellow\", \"yells\", \"yelp\", \"yelped\", \"yelper\", \"yelps\", \"yen\", \"yenned\", \"yens\", \"yenta\", \"yentas\", \"yente\", \"yentes\", \"yeoman\", \"yeomen\", \"yep\", \"yerba\", \"yerbas\", \"yerk\", \"yerked\", \"yerks\", \"yes\", \"yeses\", \"yessed\", \"yesses\", \"yester\", \"yet\", \"yeti\", \"yetis\", \"yett\", \"yetts\", \"yeuk\", \"yeuked\", \"yeuks\", \"yeuky\", \"yew\", \"yews\", \"yid\", \"yids\", \"yield\", \"yields\", \"yikes\", \"yill\", \"yills\", \"yin\", \"yince\", \"yins\", \"yip\", \"yipe\", \"yipes\", \"yipped\", \"yippee\", \"yippie\", \"yips\", \"yird\", \"yirds\", \"yirr\", \"yirred\", \"yirrs\", \"yirth\", \"yirths\", \"ylem\", \"ylems\", \"yob\", \"yobbo\", \"yobbos\", \"yobs\", \"yock\", \"yocked\", \"yocks\", \"yod\", \"yodel\", \"yodels\", \"yodh\", \"yodhs\", \"yodle\", \"yodled\", \"yodler\", \"yodles\", \"yods\", \"yoga\", \"yogas\", \"yogee\", \"yogees\", \"yogh\", \"yoghs\", \"yogi\", \"yogic\", \"yogin\", \"yogini\", \"yogins\", \"yogis\", \"yogurt\", \"yoicks\", \"yok\", \"yoke\", \"yoked\", \"yokel\", \"yokels\", \"yokes\", \"yoking\", \"yoks\", \"yolk\", \"yolked\", \"yolks\", \"yolky\", \"yom\", \"yomim\", \"yon\", \"yond\", \"yonder\", \"yoni\", \"yonic\", \"yonis\", \"yonker\", \"yore\", \"yores\", \"you\", \"young\", \"youngs\", \"youpon\", \"your\", \"yourn\", \"yours\", \"youse\", \"youth\", \"youths\", \"yow\", \"yowe\", \"yowed\", \"yowes\", \"yowie\", \"yowies\", \"yowing\", \"yowl\", \"yowled\", \"yowler\", \"yowls\", \"yows\", \"yttria\", \"yttric\", \"yuan\", \"yuans\", \"yuca\", \"yucas\", \"yucca\", \"yuccas\", \"yucch\", \"yuch\", \"yuck\", \"yucked\", \"yucks\", \"yucky\", \"yuga\", \"yugas\", \"yuk\", \"yukked\", \"yuks\", \"yulan\", \"yulans\", \"yule\", \"yules\", \"yum\", \"yummy\", \"yup\", \"yupon\", \"yupons\", \"yuppie\", \"yups\", \"yurt\", \"yurta\", \"yurts\", \"ywis\", \"zaddik\", \"zaffar\", \"zaffer\", \"zaffir\", \"zaffre\", \"zaftig\", \"zag\", \"zagged\", \"zags\", \"zaikai\", \"zaire\", \"zaires\", \"zamia\", \"zamias\", \"zanana\", \"zander\", \"zanier\", \"zanies\", \"zanily\", \"zany\", \"zanza\", \"zanzas\", \"zap\", \"zapped\", \"zapper\", \"zappy\", \"zaps\", \"zareba\", \"zarf\", \"zarfs\", \"zariba\", \"zax\", \"zaxes\", \"zayin\", \"zayins\", \"zazen\", \"zazens\", \"zeal\", \"zealot\", \"zeals\", \"zeatin\", \"zebec\", \"zebeck\", \"zebecs\", \"zebra\", \"zebras\", \"zebu\", \"zebus\", \"zechin\", \"zed\", \"zeds\", \"zee\", \"zees\", \"zein\", \"zeins\", \"zek\", \"zeks\", \"zenana\", \"zenith\", \"zephyr\", \"zerk\", \"zerks\", \"zero\", \"zeroed\", \"zeroes\", \"zeros\", \"zeroth\", \"zest\", \"zested\", \"zester\", \"zests\", \"zesty\", \"zeta\", \"zetas\", \"zeugma\", \"zibet\", \"zibeth\", \"zibets\", \"zig\", \"zigged\", \"zigs\", \"zigzag\", \"zilch\", \"zill\", \"zillah\", \"zills\", \"zin\", \"zinc\", \"zinced\", \"zincic\", \"zincky\", \"zincs\", \"zincy\", \"zineb\", \"zinebs\", \"zing\", \"zinged\", \"zinger\", \"zings\", \"zingy\", \"zinky\", \"zinnia\", \"zins\", \"zip\", \"zipped\", \"zipper\", \"zippy\", \"zips\", \"ziram\", \"zirams\", \"zircon\", \"zit\", \"zither\", \"ziti\", \"zitis\", \"zits\", \"zizit\", \"zizith\", \"zizzle\", \"zlote\", \"zloty\", \"zlotys\", \"zoa\", \"zoaria\", \"zodiac\", \"zoea\", \"zoeae\", \"zoeal\", \"zoeas\", \"zoecia\", \"zoftig\", \"zoic\", \"zombi\", \"zombie\", \"zombis\", \"zonal\", \"zonary\", \"zonate\", \"zone\", \"zoned\", \"zoner\", \"zoners\", \"zones\", \"zoning\", \"zonk\", \"zonked\", \"zonks\", \"zonula\", \"zonule\", \"zoo\", \"zooid\", \"zooids\", \"zooks\", \"zoom\", \"zoomed\", \"zooms\", \"zoon\", \"zoonal\", \"zoons\", \"zoos\", \"zooty\", \"zori\", \"zoril\", \"zorils\", \"zoris\", \"zoster\", \"zouave\", \"zounds\", \"zowie\", \"zoysia\", \"zydeco\", \"zygoid\", \"zygoma\", \"zygose\", \"zygote\", \"zymase\", \"zyme\", \"zymes\"];\n\nexports.default = words;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/dictionary/valid_words_library.js\n");

/***/ }),

/***/ "./src/components/dictionary/word.js":
/*!*******************************************!*\
  !*** ./src/components/dictionary/word.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _game_keys = __webpack_require__(/*! ./game_keys */ \"./src/components/dictionary/game_keys.js\");\n\nvar _game_keys2 = _interopRequireDefault(_game_keys);\n\nvar _util = __webpack_require__(/*! ./util */ \"./src/components/dictionary/util.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Word = function () {\n  function Word() {\n    _classCallCheck(this, Word);\n\n    this._generateRandomWord();\n    this._generateSubwords();\n  }\n\n  _createClass(Word, [{\n    key: '_generateSubwords',\n    value: function _generateSubwords() {\n      this.allSubwords = (0, _util._getValidSubstrings)(this.value, { min: 3, max: 6 });\n    }\n  }, {\n    key: '_generateRandomWord',\n    value: function _generateRandomWord() {\n      var rand = Math.floor(Math.random() * _game_keys2.default.length);\n      this.value = _game_keys2.default[rand];\n    }\n  }, {\n    key: 'includes',\n    value: function includes(letter) {\n      return this.value.includes(letter.toLowerCase());\n    }\n  }]);\n\n  return Word;\n}();\n\nexports.default = Word;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9kaWN0aW9uYXJ5L3dvcmQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvZGljdGlvbmFyeS93b3JkLmpzPzNkN2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGtleVdvcmRzTGlzdCBmcm9tICcuL2dhbWVfa2V5cyc7XG5pbXBvcnQgeyBfZ2V0VmFsaWRTdWJzdHJpbmdzIH0gZnJvbSAnLi91dGlsJztcblxuY2xhc3MgV29yZCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVSYW5kb21Xb3JkKCk7XG4gICAgdGhpcy5fZ2VuZXJhdGVTdWJ3b3JkcygpO1xuICB9XG5cbiAgX2dlbmVyYXRlU3Vid29yZHMoKSB7XG4gICAgdGhpcy5hbGxTdWJ3b3JkcyA9IF9nZXRWYWxpZFN1YnN0cmluZ3ModGhpcy52YWx1ZSwgeyBtaW46IDMsIG1heDogNiB9KTtcbiAgfVxuXG4gIF9nZW5lcmF0ZVJhbmRvbVdvcmQoKSB7XG4gICAgY29uc3QgcmFuZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGtleVdvcmRzTGlzdC5sZW5ndGgpO1xuICAgIHRoaXMudmFsdWUgPSBrZXlXb3Jkc0xpc3RbcmFuZF07XG4gIH1cblxuICBpbmNsdWRlcyhsZXR0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5pbmNsdWRlcyhsZXR0ZXIudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXb3JkO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/dictionary/word.js\n");

/***/ }),

/***/ "./src/components/message.js":
/*!***********************************!*\
  !*** ./src/components/message.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(/*! ./dictionary/util.js */ \"./src/components/dictionary/util.js\");\n\nvar _score_util = __webpack_require__(/*! ./score_util */ \"./src/components/score_util.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Message = function () {\n  function Message() {\n    _classCallCheck(this, Message);\n\n    this.field = document.getElementById(\"message\");\n    this.scoreField = document.getElementById(\"highscore\");\n  }\n\n  _createClass(Message, [{\n    key: 'display',\n    value: function display(entry, isAnswer) {\n      var _this = this;\n\n      var message = void 0;\n      this.clear();\n      var score = (0, _util.calculateWordScore)(entry);\n      var color = isAnswer === true ? \"#008000\" : \"#990016\";\n      var word = '<span class=\"strong\" style=\"color:' + color + '\">\\n    ' + entry + '</span>';\n\n      switch (isAnswer) {\n        case true:\n          message = 'Scored <span class=\"strong\" style=\"color:' + color + '\">\\n        ' + score + '</span> points for ' + word;\n          break;\n        case \"duplicate\":\n          message = word + ' has already been played';\n          break;\n        case false:\n          message = word + '<br>does not exist in the dictionary';\n          break;\n      }\n      this.field.innerHTML = message;\n      setTimeout(function () {\n        _this.field.classList.add(\"fade\");\n      }, 0);\n    }\n  }, {\n    key: 'conclude',\n    value: function conclude(percentage) {\n      this.clear();\n      var color = percentage > 49 ? \"clr-grn\" : \"clr-red\";\n      var message = 'And you got <span class=\"strong ' + color + '\">\\n    ' + percentage + '%</span> of the words!<br>\\n    Click on each word to learn it\\'s definition.';\n      this.field.innerHTML = message;\n    }\n  }, {\n    key: 'alertMin',\n    value: function alertMin() {\n      this.field.innerHTML = \"Please enter at least 3 letters\";\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.field.classList.remove(\"fade\");\n      this.field.innerHTML = \"\";\n      this.scoreField.innerHTML = \"\";\n    }\n  }, {\n    key: 'revealScore',\n    value: function revealScore(word, score) {\n      (0, _score_util.renderScoreMessage)(word, score);\n    }\n  }]);\n\n  return Message;\n}();\n\nexports.default = Message;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL21lc3NhZ2UuanM/ZmY5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxjdWxhdGVXb3JkU2NvcmUgfSBmcm9tICcuL2RpY3Rpb25hcnkvdXRpbC5qcyc7XG5pbXBvcnQgeyByZW5kZXJTY29yZU1lc3NhZ2UgfSBmcm9tICcuL3Njb3JlX3V0aWwnO1xuXG5jbGFzcyBNZXNzYWdlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXNzYWdlXCIpO1xuICAgIHRoaXMuc2NvcmVGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGlnaHNjb3JlXCIpO1xuICB9XG5cbiAgZGlzcGxheShlbnRyeSwgaXNBbnN3ZXIpIHtcbiAgICBsZXQgbWVzc2FnZTtcbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgY29uc3Qgc2NvcmUgPSBjYWxjdWxhdGVXb3JkU2NvcmUoZW50cnkpO1xuICAgIGNvbnN0IGNvbG9yID0gKGlzQW5zd2VyID09PSB0cnVlKSA/IFwiIzAwODAwMFwiIDogXCIjOTkwMDE2XCI7XG4gICAgY29uc3Qgd29yZCA9IGA8c3BhbiBjbGFzcz1cInN0cm9uZ1wiIHN0eWxlPVwiY29sb3I6JHtjb2xvcn1cIj5cbiAgICAke2VudHJ5fTwvc3Bhbj5gO1xuXG4gICAgc3dpdGNoIChpc0Fuc3dlcikge1xuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICBtZXNzYWdlID0gYFNjb3JlZCA8c3BhbiBjbGFzcz1cInN0cm9uZ1wiIHN0eWxlPVwiY29sb3I6JHtjb2xvcn1cIj5cbiAgICAgICAgJHtzY29yZX08L3NwYW4+IHBvaW50cyBmb3IgJHt3b3JkfWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImR1cGxpY2F0ZVwiOlxuICAgICAgICBtZXNzYWdlID0gYCR7d29yZH0gaGFzIGFscmVhZHkgYmVlbiBwbGF5ZWRgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgIG1lc3NhZ2UgPSBgJHt3b3JkfTxicj5kb2VzIG5vdCBleGlzdCBpbiB0aGUgZGljdGlvbmFyeWA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLmZpZWxkLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmZpZWxkLmNsYXNzTGlzdC5hZGQoXCJmYWRlXCIpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgY29uY2x1ZGUocGVyY2VudGFnZSkge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICBjb25zdCBjb2xvciA9IChwZXJjZW50YWdlID4gNDkpID8gXCJjbHItZ3JuXCIgOiBcImNsci1yZWRcIjtcbiAgICBjb25zdCBtZXNzYWdlID0gYEFuZCB5b3UgZ290IDxzcGFuIGNsYXNzPVwic3Ryb25nICR7Y29sb3J9XCI+XG4gICAgJHtwZXJjZW50YWdlfSU8L3NwYW4+IG9mIHRoZSB3b3JkcyE8YnI+XG4gICAgQ2xpY2sgb24gZWFjaCB3b3JkIHRvIGxlYXJuIGl0J3MgZGVmaW5pdGlvbi5gO1xuICAgIHRoaXMuZmllbGQuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgfVxuXG4gIGFsZXJ0TWluKCkge1xuICAgIHRoaXMuZmllbGQuaW5uZXJIVE1MID0gXCJQbGVhc2UgZW50ZXIgYXQgbGVhc3QgMyBsZXR0ZXJzXCI7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLmZpZWxkLmNsYXNzTGlzdC5yZW1vdmUoXCJmYWRlXCIpO1xuICAgIHRoaXMuZmllbGQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICB0aGlzLnNjb3JlRmllbGQuaW5uZXJIVE1MID0gXCJcIjtcbiAgfVxuXG4gIHJldmVhbFNjb3JlKHdvcmQsIHNjb3JlKSB7XG4gICAgcmVuZGVyU2NvcmVNZXNzYWdlKHdvcmQsIHNjb3JlKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/message.js\n");

/***/ }),

/***/ "./src/components/score.js":
/*!*********************************!*\
  !*** ./src/components/score.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _util = __webpack_require__(/*! ./dictionary/util.js */ \"./src/components/dictionary/util.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Score = function () {\n  function Score() {\n    _classCallCheck(this, Score);\n\n    this.currentScore = 0;\n    this.gameScore = document.getElementById(\"score\");\n    this.display();\n  }\n\n  _createClass(Score, [{\n    key: \"update\",\n    value: function update(word) {\n      this.currentScore += (0, _util.calculateWordScore)(word);\n      this.display();\n    }\n  }, {\n    key: \"display\",\n    value: function display() {\n      this.gameScore.innerHTML = this.currentScore;\n    }\n  }]);\n\n  return Score;\n}();\n\nexports.default = Score;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9zY29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9zY29yZS5qcz8yZGYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbGN1bGF0ZVdvcmRTY29yZSB9IGZyb20gXCIuL2RpY3Rpb25hcnkvdXRpbC5qc1wiO1xuXG5jbGFzcyBTY29yZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jdXJyZW50U2NvcmUgPSAwO1xuICAgIHRoaXMuZ2FtZVNjb3JlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzY29yZVwiKTtcbiAgICB0aGlzLmRpc3BsYXkoKTtcbiAgfVxuXG4gIHVwZGF0ZSh3b3JkKSB7XG4gICAgdGhpcy5jdXJyZW50U2NvcmUgKz0gY2FsY3VsYXRlV29yZFNjb3JlKHdvcmQpO1xuICAgIHRoaXMuZGlzcGxheSgpO1xuICB9XG5cbiAgZGlzcGxheSgpIHtcbiAgICB0aGlzLmdhbWVTY29yZS5pbm5lckhUTUwgPSB0aGlzLmN1cnJlbnRTY29yZTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjb3JlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7OztBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7Ozs7O0FBSUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/score.js\n");

/***/ }),

/***/ "./src/components/score_util.js":
/*!**************************************!*\
  !*** ./src/components/score_util.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderScoreMessage = renderScoreMessage;\n\nvar _app = __webpack_require__(/*! firebase/app */ \"./node_modules/firebase/app/dist/index.cjs.js\");\n\nvar firebase = _interopRequireWildcard(_app);\n\n__webpack_require__(/*! firebase/database */ \"./node_modules/firebase/database/dist/index.esm.js\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction renderScoreMessage(word, currentScore) {\n  var highScoreField = document.getElementById('highscore');\n  var message = void 0;\n  if (currentScore < 90) {\n    message = 'Hmm... let\\'s try that again...';\n    highScoreField.innerHTML = message;\n    return null;\n  }\n\n  firebase.database().ref('words/' + word).once('value').then(function (snapshot) {\n    if (!snapshot.val() || currentScore > snapshot.val().highScore) {\n      message = 'You got the new high score for <span class=\"strong clr-grn\">' + word + '</span>!';\n      if (snapshot.val()) {\n        message += '<br>Previous high score: <span class=\"strong clr-red\">' + snapshot.val().highScore + '</span>';\n        message += '<br>Your score: <span class=\"strong clr-grn\">' + currentScore + '</span>';\n      }\n      highScoreField.innerHTML = message;\n      firebase.database().ref('words/' + word).set({ highScore: currentScore });\n    } else {\n      message = 'The high score for\\n      <span class=\"strong clr-grn\">' + word + '</span> was\\n      ' + snapshot.val().highScore + '...<br> you were close.';\n      highScoreField.innerHTML = message;\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9zY29yZV91dGlsLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL3Njb3JlX3V0aWwuanM/ZDYyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0ICdmaXJlYmFzZS9kYXRhYmFzZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTY29yZU1lc3NhZ2Uod29yZCwgY3VycmVudFNjb3JlKSB7XG4gIGNvbnN0IGhpZ2hTY29yZUZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hpZ2hzY29yZScpO1xuICBsZXQgbWVzc2FnZTtcbiAgaWYgKGN1cnJlbnRTY29yZSA8IDkwKSB7XG4gICAgbWVzc2FnZSA9IGBIbW0uLi4gbGV0J3MgdHJ5IHRoYXQgYWdhaW4uLi5gO1xuICAgIGhpZ2hTY29yZUZpZWxkLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZihgd29yZHMvJHt3b3JkfWApLm9uY2UoJ3ZhbHVlJykudGhlbihzbmFwc2hvdCA9PiB7XG4gICAgaWYgKCFzbmFwc2hvdC52YWwoKSB8fCBjdXJyZW50U2NvcmUgPiBzbmFwc2hvdC52YWwoKS5oaWdoU2NvcmUpIHtcbiAgICAgIG1lc3NhZ2UgPSBgWW91IGdvdCB0aGUgbmV3IGhpZ2ggc2NvcmUgZm9yIDxzcGFuIGNsYXNzPVwic3Ryb25nIGNsci1ncm5cIj4ke3dvcmR9PC9zcGFuPiFgO1xuICAgICAgaWYgKHNuYXBzaG90LnZhbCgpKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYDxicj5QcmV2aW91cyBoaWdoIHNjb3JlOiA8c3BhbiBjbGFzcz1cInN0cm9uZyBjbHItcmVkXCI+JHtzbmFwc2hvdC52YWwoKS5oaWdoU2NvcmV9PC9zcGFuPmA7XG4gICAgICAgIG1lc3NhZ2UgKz0gYDxicj5Zb3VyIHNjb3JlOiA8c3BhbiBjbGFzcz1cInN0cm9uZyBjbHItZ3JuXCI+JHtjdXJyZW50U2NvcmV9PC9zcGFuPmA7XG4gICAgICB9XG4gICAgICBoaWdoU2NvcmVGaWVsZC5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoYHdvcmRzLyR7d29yZH1gKS5zZXQoeyBoaWdoU2NvcmU6IGN1cnJlbnRTY29yZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZSA9IGBUaGUgaGlnaCBzY29yZSBmb3JcbiAgICAgIDxzcGFuIGNsYXNzPVwic3Ryb25nIGNsci1ncm5cIj4ke3dvcmR9PC9zcGFuPiB3YXNcbiAgICAgICR7c25hcHNob3QudmFsKCkuaGlnaFNjb3JlfS4uLjxicj4geW91IHdlcmUgY2xvc2UuYDtcbiAgICAgIGhpZ2hTY29yZUZpZWxkLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgfVxuICB9KTtcblxufVxuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUdBO0FBQ0E7QUFKQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/score_util.js\n");

/***/ }),

/***/ "./src/components/tile_factory.js":
/*!****************************************!*\
  !*** ./src/components/tile_factory.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LetterTiles = function () {\n  function LetterTiles(word) {\n    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, LetterTiles);\n\n    this.word = word;\n    this.revealed = false;\n    this.key = key;\n    if (this.key) {\n      this._shuffle();\n    }\n    this.answerItem = document.createElement(\"li\");\n    this.answerItem.classList.add(\"answer\", \"strong\");\n    this.tiles = this._createLetterTiles(this.word);\n    this._fill();\n  }\n\n  _createClass(LetterTiles, [{\n    key: \"reveal\",\n    value: function reveal() {\n      var _this = this;\n\n      var endOfGame = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      //adds the letter to each tile to reveal the answer\n      this.revealed = true;\n      this.tiles.map(function (tile, idx) {\n        tile.innerHTML = _this.word[idx].toUpperCase();\n        if (endOfGame) {\n          tile.classList.add(\"end-game\");\n        }\n      });\n\n      if (!this.key) {\n        this.answerItem.classList.add(\"search\");\n        this.answerItem.addEventListener(\"click\", function () {\n          window.open(\"https://google.com/search?q=define+\" + _this.word);\n        });\n      }\n\n      this._fill();\n    }\n  }, {\n    key: \"_createLetterTiles\",\n    value: function _createLetterTiles(word) {\n      //creates individual tiles for each letter of the word\n      var letters = word.split(\"\");\n      return letters.map(function (letter) {\n        var tile = document.createElement(\"div\");\n        tile.classList.add(\"tile\");\n        return tile;\n      });\n    }\n  }, {\n    key: \"_fill\",\n    value: function _fill() {\n      var _answerItem;\n\n      //appends the tile to the answer to show on the board\n      (_answerItem = this.answerItem).append.apply(_answerItem, _toConsumableArray(this.tiles));\n    }\n  }, {\n    key: \"_shuffle\",\n    value: function _shuffle() {\n      var letterArr = this.word.split(\"\");\n      for (var i = letterArr.length - 1; i > 0; i--) {\n        var rIndex = Math.floor(Math.random() * (i + 1));\n        var _ref = [letterArr[rIndex], letterArr[i]];\n        letterArr[i] = _ref[0];\n        letterArr[rIndex] = _ref[1];\n      }\n      if (this.word === letterArr.join('')) {\n        this._shuffle();\n      } else {\n        this.word = letterArr.join('');\n      }\n    }\n  }]);\n\n  return LetterTiles;\n}();\n\nexports.default = LetterTiles;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy90aWxlX2ZhY3RvcnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvdGlsZV9mYWN0b3J5LmpzP2UzZjgiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTGV0dGVyVGlsZXMge1xuXG4gIGNvbnN0cnVjdG9yKHdvcmQsIGtleSA9IGZhbHNlKSB7XG4gICAgdGhpcy53b3JkID0gd29yZDtcbiAgICB0aGlzLnJldmVhbGVkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgaWYgKHRoaXMua2V5KSB7IHRoaXMuX3NodWZmbGUoKTsgfVxuICAgIHRoaXMuYW5zd2VySXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICB0aGlzLmFuc3dlckl0ZW0uY2xhc3NMaXN0LmFkZChcImFuc3dlclwiLCBcInN0cm9uZ1wiKTtcbiAgICB0aGlzLnRpbGVzID0gdGhpcy5fY3JlYXRlTGV0dGVyVGlsZXModGhpcy53b3JkKTtcbiAgICB0aGlzLl9maWxsKCk7XG4gIH1cblxuICByZXZlYWwoZW5kT2ZHYW1lID0gZmFsc2UpIHtcbiAgICAvL2FkZHMgdGhlIGxldHRlciB0byBlYWNoIHRpbGUgdG8gcmV2ZWFsIHRoZSBhbnN3ZXJcbiAgICB0aGlzLnJldmVhbGVkID0gdHJ1ZTtcbiAgICB0aGlzLnRpbGVzLm1hcCgodGlsZSwgaWR4KSA9PiB7XG4gICAgICB0aWxlLmlubmVySFRNTCA9IHRoaXMud29yZFtpZHhdLnRvVXBwZXJDYXNlKCk7XG4gICAgICBpZiAoZW5kT2ZHYW1lKSB7IHRpbGUuY2xhc3NMaXN0LmFkZChcImVuZC1nYW1lXCIpOyB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMua2V5KSB7XG4gICAgICB0aGlzLmFuc3dlckl0ZW0uY2xhc3NMaXN0LmFkZChcInNlYXJjaFwiKTtcbiAgICAgIHRoaXMuYW5zd2VySXRlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICB3aW5kb3cub3BlbihcbiAgICAgICAgICBgaHR0cHM6Ly9nb29nbGUuY29tL3NlYXJjaD9xPWRlZmluZSske3RoaXMud29yZH1gXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5fZmlsbCgpO1xuICB9XG5cbiAgX2NyZWF0ZUxldHRlclRpbGVzKHdvcmQpIHtcbiAgICAvL2NyZWF0ZXMgaW5kaXZpZHVhbCB0aWxlcyBmb3IgZWFjaCBsZXR0ZXIgb2YgdGhlIHdvcmRcbiAgICBjb25zdCBsZXR0ZXJzID0gd29yZC5zcGxpdChcIlwiKTtcbiAgICByZXR1cm4gbGV0dGVycy5tYXAobGV0dGVyID0+IHtcbiAgICAgIGNvbnN0IHRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdGlsZS5jbGFzc0xpc3QuYWRkKFwidGlsZVwiKTtcbiAgICAgIHJldHVybiB0aWxlO1xuICAgIH0pO1xuICB9XG5cbiAgX2ZpbGwoKSB7XG4gICAgLy9hcHBlbmRzIHRoZSB0aWxlIHRvIHRoZSBhbnN3ZXIgdG8gc2hvdyBvbiB0aGUgYm9hcmRcbiAgICB0aGlzLmFuc3dlckl0ZW0uYXBwZW5kKC4uLnRoaXMudGlsZXMpO1xuICB9XG5cbiAgX3NodWZmbGUoKSB7XG4gICAgY29uc3QgbGV0dGVyQXJyID0gdGhpcy53b3JkLnNwbGl0KFwiXCIpO1xuICAgIGZvciAobGV0IGkgPSBsZXR0ZXJBcnIubGVuZ3RoLTE7IGkgPiAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IHJJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpKzEpKTtcbiAgICAgIFtsZXR0ZXJBcnJbaV0sIGxldHRlckFycltySW5kZXhdXSA9IFtsZXR0ZXJBcnJbckluZGV4XSwgbGV0dGVyQXJyW2ldXTtcbiAgICB9XG4gICAgaWYgKHRoaXMud29yZCA9PT0gbGV0dGVyQXJyLmpvaW4oJycpKSB7XG4gICAgICB0aGlzLl9zaHVmZmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZCA9IGxldHRlckFyci5qb2luKCcnKTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMZXR0ZXJUaWxlcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBSUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/tile_factory.js\n");

/***/ }),

/***/ "./src/components/timer.js":
/*!*********************************!*\
  !*** ./src/components/timer.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//start\n//stop\n//display\n\nvar TimerObject = function () {\n  function TimerObject(game) {\n    _classCallCheck(this, TimerObject);\n\n    this.game = game;\n    this.clockDisplay = document.getElementById(\"clock\");\n    this.stop = this.stop.bind(this);\n  }\n\n  _createClass(TimerObject, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      this.stop();\n      this.duration = 120;\n      this.display();\n      this.countdown = setInterval(function () {\n        _this.tick();\n      }, 1000);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.duration--;\n      this.display();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this.countdown);\n    }\n  }, {\n    key: \"display\",\n    value: function display() {\n      if (this.duration <= 0) {\n        this.stop();\n        this.game.endGame();\n      }\n      this.clockDisplay.innerHTML = this._formatTime(this.duration);\n    }\n  }, {\n    key: \"_formatTime\",\n    value: function _formatTime(time) {\n      var minutes = Math.floor(time / 60);\n      var seconds = time % 60;\n      if (seconds < 10) {\n        seconds = \"0\" + seconds;\n      }\n\n      if (minutes > 0) {\n        return minutes + \":\" + seconds;\n      } else {\n        return \"\" + seconds;\n      }\n    }\n  }]);\n\n  return TimerObject;\n}();\n\nexports.default = TimerObject;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy90aW1lci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY29tcG9uZW50cy90aW1lci5qcz8yMWY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vc3RhcnRcbi8vc3RvcFxuLy9kaXNwbGF5XG5cbmNsYXNzIFRpbWVyT2JqZWN0IHtcblxuICBjb25zdHJ1Y3RvcihnYW1lKSB7XG4gICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICB0aGlzLmNsb2NrRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xvY2tcIik7XG4gICAgdGhpcy5zdG9wID0gdGhpcy5zdG9wLmJpbmQodGhpcyk7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgICB0aGlzLmR1cmF0aW9uID0gMTIwO1xuICAgIHRoaXMuZGlzcGxheSgpO1xuICAgIHRoaXMuY291bnRkb3duID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy50aWNrKCk7XG4gICAgfSwgMTAwMCk7XG4gIH1cblxuICB0aWNrKCkge1xuICAgIHRoaXMuZHVyYXRpb24tLTtcbiAgICB0aGlzLmRpc3BsYXkoKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNvdW50ZG93bik7XG4gIH1cblxuICBkaXNwbGF5KCkge1xuICAgIGlmICh0aGlzLmR1cmF0aW9uIDw9IDApIHtcbiAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgdGhpcy5nYW1lLmVuZEdhbWUoKTtcbiAgICB9XG4gICAgdGhpcy5jbG9ja0Rpc3BsYXkuaW5uZXJIVE1MID0gdGhpcy5fZm9ybWF0VGltZSh0aGlzLmR1cmF0aW9uKTtcbiAgfVxuXG4gIF9mb3JtYXRUaW1lKHRpbWUpIHtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcih0aW1lIC8gNjApO1xuICAgIGxldCBzZWNvbmRzID0gdGltZSAlIDYwO1xuICAgIGlmIChzZWNvbmRzIDwgMTApIHsgc2Vjb25kcyA9IFwiMFwiICsgc2Vjb25kczsgfVxuXG4gICAgaWYgKG1pbnV0ZXMgPiAwKSB7XG4gICAgICByZXR1cm4gYCR7bWludXRlc306JHtzZWNvbmRzfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgJHtzZWNvbmRzfWA7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGltZXJPYmplY3Q7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBSUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/timer.js\n");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _timer = __webpack_require__(/*! ./components/timer */ \"./src/components/timer.js\");\n\nvar _timer2 = _interopRequireDefault(_timer);\n\nvar _score = __webpack_require__(/*! ./components/score */ \"./src/components/score.js\");\n\nvar _score2 = _interopRequireDefault(_score);\n\nvar _word = __webpack_require__(/*! ./components/dictionary/word */ \"./src/components/dictionary/word.js\");\n\nvar _word2 = _interopRequireDefault(_word);\n\nvar _message = __webpack_require__(/*! ./components/message */ \"./src/components/message.js\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _board = __webpack_require__(/*! ./components/board */ \"./src/components/board.js\");\n\nvar _board2 = _interopRequireDefault(_board);\n\nvar _util = __webpack_require__(/*! ./components/dictionary/util */ \"./src/components/dictionary/util.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar GameHandler = function () {\n  function GameHandler() {\n    _classCallCheck(this, GameHandler);\n\n    this.gameOver = false;\n    this.validateInput = this.validateInput.bind(this);\n    this.endGame = this.endGame.bind(this);\n    this.userInput = document.getElementById(\"user-input\");\n    this.revealBtn = document.getElementById(\"gg\");\n    this.timer = new _timer2.default(this);\n    this.userInput.disabled = true;\n  }\n\n  _createClass(GameHandler, [{\n    key: \"beginRound\",\n    value: function beginRound() {\n      this.userInput.value = \"\";\n      this._createComponents();\n      this.timer.start();\n      this.message.clear();\n      this.handlePlayerAction();\n    }\n  }, {\n    key: \"handlePlayerAction\",\n    value: function handlePlayerAction() {\n      this.userInput.disabled = false;\n      this.userInput.focus();\n      this.userInput.addEventListener(\"keypress\", this.validateInput);\n      this.revealBtn.addEventListener(\"click\", this.endGame);\n    }\n  }, {\n    key: \"validateInput\",\n    value: function validateInput() {\n      event.preventDefault();\n      if (!this._validKey(event.key, event.currentTarget)) {\n        switch (event.keyCode) {\n          case 13:\n            //enter key to submit input\n            if (event.currentTarget.value.length < 3) {\n              this.message.alertMin();\n            } else {\n              this.handleSubmit(event.currentTarget.value.toLowerCase());\n              event.currentTarget.value = \"\";\n            }\n            break;\n          case 32:\n            //spacebar to shuffle letters\n            this.board.populateKeyWord();\n            break;\n        }\n      } else {\n        this.userInput.value += event.key.toUpperCase();\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(word) {\n      var isAnswer = this._checkAnswer(word);\n      if (isAnswer === true) {\n        this.correctAnsCounter += 1;\n        this._updateBoardAnswers(word);\n      }\n      this.message.display(word, isAnswer);\n      if (this._allRevealed()) {\n        this.endGame();\n      }\n    }\n  }, {\n    key: \"endGame\",\n    value: function endGame() {\n      var percentage = Math.floor(this.correctAnsCounter / this.answerKey.size * 100);\n      this.message.conclude(percentage);\n      this.message.revealScore(this.word.value, this.score.currentScore);\n      this.board.revealAll();\n      this.timer.stop();\n      this.userInput.disabled = true;\n      this.revealBtn.removeEventListener(\"click\", this.endGame);\n    }\n  }, {\n    key: \"_createComponents\",\n    value: function _createComponents() {\n      this.word = new _word2.default();\n      this.answerKey = new Set(this.word.allSubwords);\n      this.board = new _board2.default(this.word);\n      this.score = new _score2.default();\n      this.message = new _message2.default();\n      this.correctAnsCounter = 0;\n    }\n  }, {\n    key: \"_validKey\",\n    value: function _validKey(letter, inputForm) {\n      //compares letter frequency of word to the input\n      //only allows user to enter letters that are in the keyWord\n      var keyWordCharFrequency = (0, _util._charFrequency)(this.word.value);\n      var inputCharFrequency = (0, _util._charFrequency)(inputForm.value);\n      if (keyWordCharFrequency[letter] === inputCharFrequency[letter]) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"_checkAnswer\",\n    value: function _checkAnswer(word) {\n      if (!this.answerKey.has(word)) {\n        return false;\n      } else {\n        if (this.board.ansDisplayKey[word].revealed) {\n          return \"duplicate\";\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"_allRevealed\",\n    value: function _allRevealed() {\n      return this.correctAnsCounter === this.answerKey.size;\n    }\n  }, {\n    key: \"_updateBoardAnswers\",\n    value: function _updateBoardAnswers(word) {\n      this.board.updateAnswerDisplay(word);\n      this.score.update(word);\n    }\n  }]);\n\n  return GameHandler;\n}();\n\nexports.default = GameHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZ2FtZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvZ2FtZS5qcz9iNjg5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUaW1lck9iamVjdCBmcm9tIFwiLi9jb21wb25lbnRzL3RpbWVyXCI7XG5pbXBvcnQgU2NvcmUgZnJvbSBcIi4vY29tcG9uZW50cy9zY29yZVwiO1xuaW1wb3J0IFdvcmQgZnJvbSBcIi4vY29tcG9uZW50cy9kaWN0aW9uYXJ5L3dvcmRcIjtcbmltcG9ydCBNZXNzYWdlIGZyb20gXCIuL2NvbXBvbmVudHMvbWVzc2FnZVwiO1xuaW1wb3J0IEJvYXJkIGZyb20gXCIuL2NvbXBvbmVudHMvYm9hcmRcIjtcbmltcG9ydCB7IF9jaGFyRnJlcXVlbmN5IH0gZnJvbSBcIi4vY29tcG9uZW50cy9kaWN0aW9uYXJ5L3V0aWxcIjtcblxuY2xhc3MgR2FtZUhhbmRsZXIge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZ2FtZU92ZXIgPSBmYWxzZTtcbiAgICB0aGlzLnZhbGlkYXRlSW5wdXQgPSB0aGlzLnZhbGlkYXRlSW5wdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmVuZEdhbWUgPSB0aGlzLmVuZEdhbWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnVzZXJJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXNlci1pbnB1dFwiKTtcbiAgICB0aGlzLnJldmVhbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2dcIik7XG4gICAgdGhpcy50aW1lciA9IG5ldyBUaW1lck9iamVjdCh0aGlzKTtcbiAgICB0aGlzLnVzZXJJbnB1dC5kaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICBiZWdpblJvdW5kKCkge1xuICAgIHRoaXMudXNlcklucHV0LnZhbHVlID0gXCJcIjtcbiAgICB0aGlzLl9jcmVhdGVDb21wb25lbnRzKCk7XG4gICAgdGhpcy50aW1lci5zdGFydCgpO1xuICAgIHRoaXMubWVzc2FnZS5jbGVhcigpO1xuICAgIHRoaXMuaGFuZGxlUGxheWVyQWN0aW9uKCk7XG4gIH1cblxuICBoYW5kbGVQbGF5ZXJBY3Rpb24oKSB7XG4gICAgdGhpcy51c2VySW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnVzZXJJbnB1dC5mb2N1cygpO1xuICAgIHRoaXMudXNlcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCB0aGlzLnZhbGlkYXRlSW5wdXQpO1xuICAgIHRoaXMucmV2ZWFsQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmVuZEdhbWUpO1xuICB9XG5cbiAgdmFsaWRhdGVJbnB1dCgpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICghdGhpcy5fdmFsaWRLZXkoZXZlbnQua2V5LCBldmVudC5jdXJyZW50VGFyZ2V0KSkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTM6IC8vZW50ZXIga2V5IHRvIHN1Ym1pdCBpbnB1dFxuICAgICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZS5hbGVydE1pbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVN1Ym1pdChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDMyOiAvL3NwYWNlYmFyIHRvIHNodWZmbGUgbGV0dGVyc1xuICAgICAgICAgIHRoaXMuYm9hcmQucG9wdWxhdGVLZXlXb3JkKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXNlcklucHV0LnZhbHVlICs9IGV2ZW50LmtleS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdCh3b3JkKSB7XG4gICAgY29uc3QgaXNBbnN3ZXIgPSB0aGlzLl9jaGVja0Fuc3dlcih3b3JkKTtcbiAgICBpZiAoaXNBbnN3ZXIgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuY29ycmVjdEFuc0NvdW50ZXIgKz0gMTtcbiAgICAgIHRoaXMuX3VwZGF0ZUJvYXJkQW5zd2Vycyh3b3JkKTtcbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlLmRpc3BsYXkod29yZCwgaXNBbnN3ZXIpO1xuICAgIGlmICh0aGlzLl9hbGxSZXZlYWxlZCgpKSB7IHRoaXMuZW5kR2FtZSgpOyB9XG4gIH1cblxuICBlbmRHYW1lKCkge1xuICAgIGNvbnN0IHBlcmNlbnRhZ2UgPVxuICAgICAgTWF0aC5mbG9vcih0aGlzLmNvcnJlY3RBbnNDb3VudGVyIC8gdGhpcy5hbnN3ZXJLZXkuc2l6ZSAqIDEwMCk7XG4gICAgdGhpcy5tZXNzYWdlLmNvbmNsdWRlKHBlcmNlbnRhZ2UpO1xuICAgIHRoaXMubWVzc2FnZS5yZXZlYWxTY29yZSh0aGlzLndvcmQudmFsdWUsIHRoaXMuc2NvcmUuY3VycmVudFNjb3JlKTtcbiAgICB0aGlzLmJvYXJkLnJldmVhbEFsbCgpO1xuICAgIHRoaXMudGltZXIuc3RvcCgpO1xuICAgIHRoaXMudXNlcklucHV0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJldmVhbEJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5lbmRHYW1lKTtcbiAgfVxuXG4gIF9jcmVhdGVDb21wb25lbnRzKCkge1xuICAgIHRoaXMud29yZCA9IG5ldyBXb3JkKCk7XG4gICAgdGhpcy5hbnN3ZXJLZXkgPSBuZXcgU2V0KHRoaXMud29yZC5hbGxTdWJ3b3Jkcyk7XG4gICAgdGhpcy5ib2FyZCA9IG5ldyBCb2FyZCh0aGlzLndvcmQpO1xuICAgIHRoaXMuc2NvcmUgPSBuZXcgU2NvcmUoKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBuZXcgTWVzc2FnZSgpO1xuICAgIHRoaXMuY29ycmVjdEFuc0NvdW50ZXIgPSAwO1xuICB9XG5cbiAgX3ZhbGlkS2V5KGxldHRlciwgaW5wdXRGb3JtKSB7XG4gICAgLy9jb21wYXJlcyBsZXR0ZXIgZnJlcXVlbmN5IG9mIHdvcmQgdG8gdGhlIGlucHV0XG4gICAgLy9vbmx5IGFsbG93cyB1c2VyIHRvIGVudGVyIGxldHRlcnMgdGhhdCBhcmUgaW4gdGhlIGtleVdvcmRcbiAgICBjb25zdCBrZXlXb3JkQ2hhckZyZXF1ZW5jeSA9IF9jaGFyRnJlcXVlbmN5KHRoaXMud29yZC52YWx1ZSk7XG4gICAgY29uc3QgaW5wdXRDaGFyRnJlcXVlbmN5ID0gX2NoYXJGcmVxdWVuY3koaW5wdXRGb3JtLnZhbHVlKTtcbiAgICBpZiAoa2V5V29yZENoYXJGcmVxdWVuY3lbbGV0dGVyXSA9PT0gaW5wdXRDaGFyRnJlcXVlbmN5W2xldHRlcl0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBfY2hlY2tBbnN3ZXIod29yZCkge1xuICAgIGlmICghdGhpcy5hbnN3ZXJLZXkuaGFzKHdvcmQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmJvYXJkLmFuc0Rpc3BsYXlLZXlbd29yZF0ucmV2ZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuIFwiZHVwbGljYXRlXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX2FsbFJldmVhbGVkKCkge1xuICAgIHJldHVybiB0aGlzLmNvcnJlY3RBbnNDb3VudGVyID09PSB0aGlzLmFuc3dlcktleS5zaXplO1xuICB9XG5cbiAgX3VwZGF0ZUJvYXJkQW5zd2Vycyh3b3JkKSB7XG4gICAgdGhpcy5ib2FyZC51cGRhdGVBbnN3ZXJEaXNwbGF5KHdvcmQpO1xuICAgIHRoaXMuc2NvcmUudXBkYXRlKHdvcmQpO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgR2FtZUhhbmRsZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQVhBO0FBYUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFJQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/game.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _app = __webpack_require__(/*! firebase/app */ \"./node_modules/firebase/app/dist/index.cjs.js\");\n\nvar firebase = _interopRequireWildcard(_app);\n\nvar _game = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\nvar _game2 = _interopRequireDefault(_game);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var game = new _game2.default();\n  var newGame = document.getElementById(\"new-game\");\n\n  window.onload = function () {\n    newGame.addEventListener(\"click\", function () {\n      event.preventDefault();\n      instructions.classList.remove(\"active\");\n      game.beginRound();\n    });\n  };\n\n  var config = {\n    apiKey: 'AIzaSyAbTuJaoP1ZaUlBzkGbowEBN6IdK5SPsNc',\n    authDomain: 'wordjs-80f4a.firebaseapp.com',\n    databaseURL: 'https://wordjs-80f4a.firebaseio.com',\n    projectId: 'wordjs-80f4a',\n    storageBucket: 'wordjs-80f4a.appspot.com',\n    messagingSenderId: '726517595431'\n  };\n  firebase.initializeApp(config);\n\n  var instructions = document.getElementById(\"ins\");\n  var insToggler = document.getElementById(\"ins-btn\");\n  insToggler.addEventListener(\"click\", function () {\n    instructions.classList.toggle(\"active\");\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2luZGV4LmpzPzEyZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCBHYW1lSGFuZGxlciBmcm9tIFwiLi9nYW1lXCI7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgY29uc3QgZ2FtZSA9IG5ldyBHYW1lSGFuZGxlcigpO1xuICBjb25zdCBuZXdHYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXctZ2FtZVwiKTtcblxuICB3aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICAgIG5ld0dhbWUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpbnN0cnVjdGlvbnMuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgIGdhbWUuYmVnaW5Sb3VuZCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGNvbmZpZyA9IHtcbiAgICBhcGlLZXk6ICdBSXphU3lBYlR1SmFvUDFaYVVsQnprR2Jvd0VCTjZJZEs1U1BzTmMnLFxuICAgIGF1dGhEb21haW46ICd3b3JkanMtODBmNGEuZmlyZWJhc2VhcHAuY29tJyxcbiAgICBkYXRhYmFzZVVSTDogJ2h0dHBzOi8vd29yZGpzLTgwZjRhLmZpcmViYXNlaW8uY29tJyxcbiAgICBwcm9qZWN0SWQ6ICd3b3JkanMtODBmNGEnLFxuICAgIHN0b3JhZ2VCdWNrZXQ6ICd3b3JkanMtODBmNGEuYXBwc3BvdC5jb20nLFxuICAgIG1lc3NhZ2luZ1NlbmRlcklkOiAnNzI2NTE3NTk1NDMxJ1xuICB9O1xuICBmaXJlYmFzZS5pbml0aWFsaXplQXBwKGNvbmZpZyk7XG5cbiAgY29uc3QgaW5zdHJ1Y3Rpb25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnNcIik7XG4gIGNvbnN0IGluc1RvZ2dsZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlucy1idG5cIik7XG4gIGluc1RvZ2dsZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBpbnN0cnVjdGlvbnMuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ });